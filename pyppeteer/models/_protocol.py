import sys

from typing import Any, Dict, List, TYPE_CHECKING, Union

if sys.version_info < (3, 8):
    from typing_extensions import Literal, TypedDict
else:
    from typing import Literal, TypedDict

"""
Automatically generated by ./utils/generate_protocol_types.py
Attention! This file should *not* be modified directly! Instead, use the script to update it. 

Last regeneration: 2020-04-02 19:17:08.879455
"""
if TYPE_CHECKING:
    class AXNode(TypedDict, total=False):
        # Unique identifier for this node.
        nodeId: str
        # Whether this node is ignored for accessibility
        ignored: bool
        # Collection of reasons why this node is hidden.
        ignoredReasons: List['AXProperty']
        # This `Node`'s role, whether explicit or implicit.
        role: 'AXValue'
        # The accessible name for this `Node`.
        name: 'AXValue'
        # The accessible description for this `Node`.
        description: 'AXValue'
        # The value for this `Node`.
        value: 'AXValue'
        # All other properties
        properties: List['AXProperty']
        # IDs for each of this node's child nodes.
        childIds: List[str]
        # The backend ID for the associated DOM node, if any.
        backendDOMNodeId: int

    class AXProperty(TypedDict):
        # The name of this property.
        name: Literal['busy', 'disabled', 'editable', 'focusable', 'focused', 'hidden', 'hiddenRoot', 'invalid', 'keyshortcuts', 'settable', 'roledescription', 'live', 'atomic', 'relevant', 'root', 'autocomplete', 'hasPopup', 'level', 'multiselectable', 'orientation', 'multiline', 'readonly', 'required', 'valuemin', 'valuemax', 'valuetext', 'checked', 'expanded', 'modal', 'pressed', 'selected', 'activedescendant', 'controls', 'describedby', 'details', 'errormessage', 'flowto', 'labelledby', 'owns']
        # The value of this property.
        value: 'AXValue'

    class AXRelatedNode(TypedDict, total=False):
        # The BackendNodeId of the related DOM node.
        backendDOMNodeId: int
        # The IDRef value provided, if any.
        idref: str
        # The text alternative of this node in the current context.
        text: str

    class AXValue(TypedDict, total=False):
        # The type of this value.
        type: Literal['boolean', 'tristate', 'booleanOrUndefined', 'idref', 'idrefList', 'integer', 'node', 'nodeList', 'number', 'string', 'computedString', 'token', 'tokenList', 'domRelation', 'role', 'internalRole', 'valueUndefined']
        # The computed value of this property.
        value: Any
        # One or more related nodes, if applicable.
        relatedNodes: List['AXRelatedNode']
        # The sources which contributed to the computation of this property.
        # actual: AXValueSource
        sources: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]


    class AXValueSource(TypedDict, total=False):
        # What type of source this is.
        type: Literal['attribute', 'implicit', 'style', 'contents', 'placeholder', 'relatedElement']
        # The value of this property source.
        # actual: AXValue
        value: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # The name of the relevant attribute, if any.
        attribute: str
        # The value of the relevant attribute, if any.
        # actual: AXValue
        attributeValue: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Whether this source is superseded by a higher priority source.
        superseded: bool
        # The native markup source for this value, e.g. a <label> element.
        nativeSource: Literal['figcaption', 'label', 'labelfor', 'labelwrapped', 'legend', 'tablecaption', 'title', 'other']
        # The value, such as a node or node list, of the native source.
        # actual: AXValue
        nativeSourceValue: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Whether the value for this property is invalid.
        invalid: bool
        # Reason for the value being invalid, if it is.
        invalidReason: str

    class Animation(TypedDict, total=False):
        # `Animation`'s id.
        id: str
        # `Animation`'s name.
        name: str
        # `Animation`'s internal paused state.
        pausedState: bool
        # `Animation`'s play state.
        playState: str
        # `Animation`'s playback rate.
        playbackRate: float
        # `Animation`'s start time.
        startTime: float
        # `Animation`'s current time.
        currentTime: float
        # Animation type of `Animation`.
        type: Literal['CSSTransition', 'CSSAnimation', 'WebAnimation']
        # `Animation`'s source animation node.
        source: 'AnimationEffect'
        # A unique ID for `Animation` representing the sources that triggered this CSS animation/transition.
        cssId: str

    class AnimationEffect(TypedDict, total=False):
        # `AnimationEffect`'s delay.
        delay: float
        # `AnimationEffect`'s end delay.
        endDelay: float
        # `AnimationEffect`'s iteration start.
        iterationStart: float
        # `AnimationEffect`'s iterations.
        iterations: float
        # `AnimationEffect`'s iteration duration.
        duration: float
        # `AnimationEffect`'s playback direction.
        direction: str
        # `AnimationEffect`'s fill mode.
        fill: str
        # `AnimationEffect`'s target node.
        backendNodeId: int
        # `AnimationEffect`'s keyframes.
        keyframesRule: 'KeyframesRule'
        # `AnimationEffect`'s timing function.
        easing: str

    class AppManifestError(TypedDict):
        # Error message.
        message: str
        # If criticial, this is a non-recoverable parse error.
        critical: int
        # Error line.
        line: int
        # Error column.
        column: int

    class ApplicationCache(TypedDict):
        # Manifest URL.
        manifestURL: str
        # Application cache size.
        size: float
        # Application cache creation time.
        creationTime: float
        # Application cache update time.
        updateTime: float
        # Application cache resources.
        resources: List['ApplicationCacheResource']

    class ApplicationCacheResource(TypedDict):
        # Resource url.
        url: str
        # Resource size.
        size: int
        # Resource type.
        type: str

    class AudioListener(TypedDict):
        listenerId: str
        contextId: str

    class AudioNode(TypedDict):
        nodeId: str
        contextId: str
        nodeType: str
        numberOfInputs: float
        numberOfOutputs: float
        channelCount: float
        channelCountMode: Literal['clamped-max', 'explicit', 'max']
        channelInterpretation: Literal['discrete', 'speakers']

    class AudioParam(TypedDict):
        paramId: str
        nodeId: str
        contextId: str
        paramType: str
        rate: Literal['a-rate', 'k-rate']
        defaultValue: float
        minValue: float
        maxValue: float

    class AuthChallenge(TypedDict, total=False):
        # Source of the authentication challenge.
        source: Literal['Server', 'Proxy']
        # Origin of the challenger.
        origin: str
        # The authentication scheme used, such as basic or digest
        scheme: str
        # The realm of the challenge. May be empty.
        realm: str

    class AuthChallengeResponse(TypedDict, total=False):
        # The decision on what to do in response to the authorization challenge.  Default means deferring to the default behavior of the net stack, which will likely either the Cancel authentication or display a popup dialog box.
        response: Literal['Default', 'CancelAuth', 'ProvideCredentials']
        # The username to provide, possibly empty. Should only be set if response is ProvideCredentials.
        username: str
        # The password to provide, possibly empty. Should only be set if response is ProvideCredentials.
        password: str

    class BackendNode(TypedDict):
        # `Node`'s nodeType.
        nodeType: int
        # `Node`'s nodeName.
        nodeName: str
        backendNodeId: int

    class BackgroundServiceEvent(TypedDict):
        # Timestamp of the event (in seconds).
        timestamp: float
        # The origin this event belongs to.
        origin: str
        # The Service Worker ID that initiated the event.
        serviceWorkerRegistrationId: str
        # The Background Service this event belongs to.
        service: Literal['backgroundFetch', 'backgroundSync', 'pushMessaging', 'notifications', 'paymentHandler', 'periodicBackgroundSync']
        # A description of the event.
        eventName: str
        # An identifier that groups related events together.
        instanceId: str
        # A list of event-specific information.
        eventMetadata: List['EventMetadata']

    class BaseAudioContext(TypedDict, total=False):
        contextId: str
        contextType: Literal['realtime', 'offline']
        contextState: Literal['suspended', 'running', 'closed']
        realtimeData: 'ContextRealtimeData'
        # Platform-dependent callback buffer size.
        callbackBufferSize: float
        # Number of output channels supported by audio hardware in use.
        maxOutputChannelCount: float
        # Context sample rate.
        sampleRate: float

    class BlockedCookieWithReason(TypedDict):
        # The reason(s) the cookie was blocked.
        blockedReasons: List[Literal['SecureOnly', 'NotOnPath', 'DomainMismatch', 'SameSiteStrict', 'SameSiteLax', 'SameSiteUnspecifiedTreatedAsLax', 'SameSiteNoneInsecure', 'UserPreferences', 'UnknownError']]
        # The cookie object representing the cookie which was not sent.
        cookie: 'Cookie'

    class BlockedSetCookieWithReason(TypedDict, total=False):
        # The reason(s) this cookie was blocked.
        blockedReasons: List[Literal['SecureOnly', 'SameSiteStrict', 'SameSiteLax', 'SameSiteUnspecifiedTreatedAsLax', 'SameSiteNoneInsecure', 'UserPreferences', 'SyntaxError', 'SchemeNotSupported', 'OverwriteSecure', 'InvalidDomain', 'InvalidPrefix', 'UnknownError']]
        # The string representing this individual cookie as it would appear in the header. This is not the entire "cookie" or "set-cookie" header which could have multiple cookies.
        cookieLine: str
        # The cookie object which represents the cookie which was not stored. It is optional because sometimes complete cookie information is not available, such as in the case of parsing errors.
        cookie: 'Cookie'

    class Bounds(TypedDict, total=False):
        # The offset from the left edge of the screen to the window in pixels.
        left: int
        # The offset from the top edge of the screen to the window in pixels.
        top: int
        # The window width in pixels.
        width: int
        # The window height in pixels.
        height: int
        # The window state. Default to normal.
        windowState: Literal['normal', 'minimized', 'maximized', 'fullscreen']

    class BoxModel(TypedDict, total=False):
        # Content box
        content: List[float]
        # Padding box
        padding: List[float]
        # Border box
        border: List[float]
        # Margin box
        margin: List[float]
        # Node width
        width: int
        # Node height
        height: int
        # Shape outside coordinates
        shapeOutside: 'ShapeOutsideInfo'

    class BreakLocation(TypedDict, total=False):
        # Script identifier as reported in the `Debugger.scriptParsed`.
        scriptId: str
        # Line number in the script (0-based).
        lineNumber: int
        # Column number in the script (0-based).
        columnNumber: int
        type: Literal['debuggerStatement', 'call', 'return']

    class Bucket(TypedDict):
        # Minimum value (inclusive).
        low: int
        # Maximum value (exclusive).
        high: int
        # Number of samples.
        count: int

    class CSSComputedStyleProperty(TypedDict):
        # Computed style property name.
        name: str
        # Computed style property value.
        value: str

    class CSSKeyframeRule(TypedDict, total=False):
        # The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from.
        styleSheetId: str
        # Parent stylesheet's origin.
        origin: Literal['injected', 'user-agent', 'inspector', 'regular']
        # Associated key text.
        keyText: 'Value'
        # Associated style declaration.
        style: 'CSSStyle'

    class CSSKeyframesRule(TypedDict):
        # Animation name.
        animationName: 'Value'
        # List of keyframes.
        keyframes: List['CSSKeyframeRule']

    class CSSMedia(TypedDict, total=False):
        # Media query text.
        text: str
        # Source of the media query: "mediaRule" if specified by a @media rule, "importRule" if specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked stylesheet's LINK tag, "inlineSheet" if specified by a "media" attribute in an inline stylesheet's STYLE tag.
        source: Literal['mediaRule', 'importRule', 'linkedSheet', 'inlineSheet']
        # URL of the document containing the media query description.
        sourceURL: str
        # The associated rule (@media or @import) header range in the enclosing stylesheet (if available).
        range: 'SourceRange'
        # Identifier of the stylesheet containing this object (if exists).
        styleSheetId: str
        # Array of media queries.
        mediaList: List['MediaQuery']

    class CSSProperty(TypedDict, total=False):
        # The property name.
        name: str
        # The property value.
        value: str
        # Whether the property has "!important" annotation (implies `false` if absent).
        important: bool
        # Whether the property is implicit (implies `false` if absent).
        implicit: bool
        # The full property text as specified in the style.
        text: str
        # Whether the property is understood by the browser (implies `true` if absent).
        parsedOk: bool
        # Whether the property is disabled by the user (present for source-based properties only).
        disabled: bool
        # The entire property range in the enclosing style declaration (if available).
        range: 'SourceRange'

    class CSSRule(TypedDict, total=False):
        # The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from.
        styleSheetId: str
        # Rule selector data.
        selectorList: 'SelectorList'
        # Parent stylesheet's origin.
        origin: Literal['injected', 'user-agent', 'inspector', 'regular']
        # Associated style declaration.
        style: 'CSSStyle'
        # Media list array (for rules involving media queries). The array enumerates media queries starting with the innermost one, going outwards.
        media: List['CSSMedia']

    class CSSStyle(TypedDict, total=False):
        # The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from.
        styleSheetId: str
        # CSS properties in the style.
        cssProperties: List['CSSProperty']
        # Computed values for all shorthands found in the style.
        shorthandEntries: List['ShorthandEntry']
        # Style declaration text (if available).
        cssText: str
        # Style declaration range in the enclosing stylesheet (if available).
        range: 'SourceRange'

    class CSSStyleSheetHeader(TypedDict, total=False):
        # The stylesheet identifier.
        styleSheetId: str
        # Owner frame identifier.
        frameId: str
        # Stylesheet resource URL.
        sourceURL: str
        # URL of source map associated with the stylesheet (if any).
        sourceMapURL: str
        # Stylesheet origin.
        origin: Literal['injected', 'user-agent', 'inspector', 'regular']
        # Stylesheet title.
        title: str
        # The backend id for the owner node of the stylesheet.
        ownerNode: int
        # Denotes whether the stylesheet is disabled.
        disabled: bool
        # Whether the sourceURL field value comes from the sourceURL comment.
        hasSourceURL: bool
        # Whether this stylesheet is created for STYLE tag by parser. This flag is not set for document.written STYLE tags.
        isInline: bool
        # Line offset of the stylesheet within the resource (zero based).
        startLine: float
        # Column offset of the stylesheet within the resource (zero based).
        startColumn: float
        # Size of the content (in characters).
        length: float
        # Line offset of the end of the stylesheet within the resource (zero based).
        endLine: float
        # Column offset of the end of the stylesheet within the resource (zero based).
        endColumn: float

    class Cache(TypedDict):
        # An opaque unique id of the cache.
        cacheId: str
        # Security origin of the cache.
        securityOrigin: str
        # The name of the cache.
        cacheName: str

    class CachedResource(TypedDict, total=False):
        # Resource URL. This is the url of the original network request.
        url: str
        # Type of this resource.
        type: Literal['Document', 'Stylesheet', 'Image', 'Media', 'Font', 'Script', 'TextTrack', 'XHR', 'Fetch', 'EventSource', 'WebSocket', 'Manifest', 'SignedExchange', 'Ping', 'CSPViolationReport', 'Other']
        # Cached response data.
        response: 'Response'
        # Cached response body size.
        bodySize: float

    class CachedResponse(TypedDict):
        # Entry content, base64-encoded.
        body: bytes

    class CallArgument(TypedDict, total=False):
        # Primitive value or serializable javascript object.
        value: Any
        # Primitive value which can not be JSON-stringified.
        unserializableValue: str
        # Remote object handle.
        objectId: str

    class CallFrame(TypedDict):
        # JavaScript function name.
        functionName: str
        # JavaScript script id.
        scriptId: str
        # JavaScript script name or url.
        url: str
        # JavaScript script line number (0-based).
        lineNumber: int
        # JavaScript script column number (0-based).
        columnNumber: int

    class CertificateSecurityState(TypedDict, total=False):
        # Protocol name (e.g. "TLS 1.2" or "QUIC").
        protocol: str
        # Key Exchange used by the connection, or the empty string if not applicable.
        keyExchange: str
        # (EC)DH group used by the connection, if applicable.
        keyExchangeGroup: str
        # Cipher name.
        cipher: str
        # TLS MAC. Note that AEAD ciphers do not have separate MACs.
        mac: str
        # Page certificate.
        certificate: List[str]
        # Certificate subject name.
        subjectName: str
        # Name of the issuing CA.
        issuer: str
        # Certificate valid from date.
        validFrom: float
        # Certificate valid to (expiration) date
        validTo: float
        # The highest priority network error code, if the certificate has an error.
        certificateNetworkError: str
        # True if the certificate uses a weak signature aglorithm.
        certificateHasWeakSignature: bool
        # True if the certificate has a SHA1 signature in the chain.
        certificateHasSha1Signature: bool
        # True if modern SSL
        modernSSL: bool
        # True if the connection is using an obsolete SSL protocol.
        obsoleteSslProtocol: bool
        # True if the connection is using an obsolete SSL key exchange.
        obsoleteSslKeyExchange: bool
        # True if the connection is using an obsolete SSL cipher.
        obsoleteSslCipher: bool
        # True if the connection is using an obsolete SSL signature.
        obsoleteSslSignature: bool

    class ComputedStyle(TypedDict):
        # Name/value pairs of computed style properties.
        properties: List['NameValue']

    class ConsoleMessage(TypedDict, total=False):
        # Message source.
        source: Literal['xml', 'javascript', 'network', 'console-api', 'storage', 'appcache', 'rendering', 'security', 'other', 'deprecation', 'worker']
        # Message severity.
        level: Literal['log', 'warning', 'error', 'debug', 'info']
        # Message text.
        text: str
        # URL of the message origin.
        url: str
        # Line number in the resource that generated this message (1-based).
        line: int
        # Column number in the resource that generated this message (1-based).
        column: int

    class ContextRealtimeData(TypedDict):
        # The current context time in second in BaseAudioContext.
        currentTime: float
        # The time spent on rendering graph divided by render qunatum duration, and multiplied by 100. 100 means the audio renderer reached the full capacity and glitch may occur.
        renderCapacity: float
        # A running mean of callback interval.
        callbackIntervalMean: float
        # A running variance of callback interval.
        callbackIntervalVariance: float

    class Cookie(TypedDict, total=False):
        # Cookie name.
        name: str
        # Cookie value.
        value: str
        # Cookie domain.
        domain: str
        # Cookie path.
        path: str
        # Cookie expiration date as the number of seconds since the UNIX epoch.
        expires: float
        # Cookie size.
        size: int
        # True if cookie is http-only.
        httpOnly: bool
        # True if cookie is secure.
        secure: bool
        # True in case of session cookie.
        session: bool
        # Cookie SameSite type.
        sameSite: Literal['Strict', 'Lax', 'None']

    class CookieParam(TypedDict, total=False):
        # Cookie name.
        name: str
        # Cookie value.
        value: str
        # The request-URI to associate with the setting of the cookie. This value can affect the default domain and path values of the created cookie.
        url: str
        # Cookie domain.
        domain: str
        # Cookie path.
        path: str
        # True if cookie is secure.
        secure: bool
        # True if cookie is http-only.
        httpOnly: bool
        # Cookie SameSite type.
        sameSite: Literal['Strict', 'Lax', 'None']
        # Cookie expiration date, session cookie if not set
        expires: float

    class CounterInfo(TypedDict):
        # Counter name.
        name: str
        # Counter value.
        value: int

    class CoverageRange(TypedDict):
        # JavaScript script source offset for the range start.
        startOffset: int
        # JavaScript script source offset for the range end.
        endOffset: int
        # Collected execution count of the source range.
        count: int

    class Credential(TypedDict, total=False):
        credentialId: bytes
        isResidentCredential: bool
        # Relying Party ID the credential is scoped to. Must be set when adding a credential.
        rpId: str
        # The ECDSA P-256 private key in PKCS#8 format.
        privateKey: bytes
        # An opaque byte sequence with a maximum size of 64 bytes mapping the credential to a specific user.
        userHandle: bytes
        # Signature counter. This is incremented by one for each successful assertion. See https://w3c.github.io/webauthn/#signature-counter
        signCount: int

    class CustomPreview(TypedDict, total=False):
        # The JSON-stringified result of formatter.header(object, config) call. It contains json ML array that represents RemoteObject.
        header: str
        # If formatter returns true as a result of formatter.hasBody call then bodyGetterId will contain RemoteObjectId for the function that returns result of formatter.body(object, config) call. The result value is json ML array.
        bodyGetterId: str

    class DOMNode(TypedDict, total=False):
        # `Node`'s nodeType.
        nodeType: int
        # `Node`'s nodeName.
        nodeName: str
        # `Node`'s nodeValue.
        nodeValue: str
        # Only set for textarea elements, contains the text value.
        textValue: str
        # Only set for input elements, contains the input's associated text value.
        inputValue: str
        # Only set for radio and checkbox input elements, indicates if the element has been checked
        inputChecked: bool
        # Only set for option elements, indicates if the element has been selected
        optionSelected: bool
        # `Node`'s id, corresponds to DOM.Node.backendNodeId.
        backendNodeId: int
        # The indexes of the node's child nodes in the `domNodes` array returned by `getSnapshot`, if any.
        childNodeIndexes: List[int]
        # Attributes of an `Element` node.
        attributes: List['NameValue']
        # Indexes of pseudo elements associated with this node in the `domNodes` array returned by `getSnapshot`, if any.
        pseudoElementIndexes: List[int]
        # The index of the node's related layout tree node in the `layoutTreeNodes` array returned by `getSnapshot`, if any.
        layoutNodeIndex: int
        # Document URL that `Document` or `FrameOwner` node points to.
        documentURL: str
        # Base URL that `Document` or `FrameOwner` node uses for URL completion.
        baseURL: str
        # Only set for documents, contains the document's content language.
        contentLanguage: str
        # Only set for documents, contains the document's character set encoding.
        documentEncoding: str
        # `DocumentType` node's publicId.
        publicId: str
        # `DocumentType` node's systemId.
        systemId: str
        # Frame ID for frame owner elements and also for the document node.
        frameId: str
        # The index of a frame owner element's content document in the `domNodes` array returned by `getSnapshot`, if any.
        contentDocumentIndex: int
        # Type of a pseudo element node.
        pseudoType: Literal['first-line', 'first-letter', 'before', 'after', 'backdrop', 'selection', 'first-line-inherited', 'scrollbar', 'scrollbar-thumb', 'scrollbar-button', 'scrollbar-track', 'scrollbar-track-piece', 'scrollbar-corner', 'resizer', 'input-list-button']
        # Shadow root type.
        shadowRootType: Literal['user-agent', 'open', 'closed']
        # Whether this DOM node responds to mouse clicks. This includes nodes that have had click event listeners attached via JavaScript as well as anchor tags that naturally navigate when clicked.
        isClickable: bool
        # Details of the node's event listeners, if any.
        eventListeners: List['EventListener']
        # The selected url for nodes with a srcset attribute.
        currentSourceURL: str
        # The url of the script (if any) that generates this node.
        originURL: str
        # Scroll offsets, set when this node is a Document.
        scrollOffsetX: float
        scrollOffsetY: float

    class DataEntry(TypedDict):
        # Key object.
        key: 'RemoteObject'
        # Primary key object.
        primaryKey: 'RemoteObject'
        # Value object.
        value: 'RemoteObject'

    class Database(TypedDict):
        # Database ID.
        id: str
        # Database domain.
        domain: str
        # Database name.
        name: str
        # Database version.
        version: str

    class DatabaseWithObjectStores(TypedDict):
        # Database name.
        name: str
        # Database version (type is not 'integer', as the standard requires the version number to be 'unsigned long long')
        version: float
        # Object stores in this database.
        objectStores: List['ObjectStore']

    class DocumentSnapshot(TypedDict, total=False):
        # Document URL that `Document` or `FrameOwner` node points to.
        documentURL: int
        # Document title.
        title: int
        # Base URL that `Document` or `FrameOwner` node uses for URL completion.
        baseURL: int
        # Contains the document's content language.
        contentLanguage: int
        # Contains the document's character set encoding.
        encodingName: int
        # `DocumentType` node's publicId.
        publicId: int
        # `DocumentType` node's systemId.
        systemId: int
        # Frame ID for frame owner elements and also for the document node.
        frameId: int
        # A table with dom nodes.
        nodes: 'NodeTreeSnapshot'
        # The nodes in the layout tree.
        layout: 'LayoutTreeSnapshot'
        # The post-layout inline text nodes.
        textBoxes: 'TextBoxSnapshot'
        # Horizontal scroll offset.
        scrollOffsetX: float
        # Vertical scroll offset.
        scrollOffsetY: float
        # Document content width.
        contentWidth: float
        # Document content height.
        contentHeight: float

    class Domain(TypedDict):
        # Domain name.
        name: str
        # Domain version.
        version: str

    class EntryPreview(TypedDict, total=False):
        # Preview of the key. Specified for map-like collection entries.
        # actual: ObjectPreview
        key: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Preview of the value.
        # actual: ObjectPreview
        value: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]


    class Error(TypedDict):
        # Error message.
        message: str
        # Error code.
        code: int

    class EventListener(TypedDict, total=False):
        # `EventListener`'s type.
        type: str
        # `EventListener`'s useCapture.
        useCapture: bool
        # `EventListener`'s passive flag.
        passive: bool
        # `EventListener`'s once flag.
        once: bool
        # Script id of the handler code.
        scriptId: str
        # Line number in the script (0-based).
        lineNumber: int
        # Column number in the script (0-based).
        columnNumber: int
        # Event handler function value.
        handler: 'RemoteObject'
        # Event original handler function value.
        originalHandler: 'RemoteObject'
        # Node the listener is added to (if any).
        backendNodeId: int

    class EventMetadata(TypedDict):
        key: str
        value: str

    class ExceptionDetails(TypedDict, total=False):
        # Exception id.
        exceptionId: int
        # Exception text, which should be used together with exception object when available.
        text: str
        # Line number of the exception location (0-based).
        lineNumber: int
        # Column number of the exception location (0-based).
        columnNumber: int
        # Script ID of the exception location.
        scriptId: str
        # URL of the exception location, to be used when the script was not reported.
        url: str
        # JavaScript stack trace if available.
        stackTrace: 'StackTrace'
        # Exception object if available.
        exception: 'RemoteObject'
        # Identifier of the context where exception happened.
        executionContextId: int

    class ExecutionContextDescription(TypedDict, total=False):
        # Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.
        id: int
        # Execution context origin.
        origin: str
        # Human readable name describing given context.
        name: str
        # Embedder-specific auxiliary data.
        auxData: Dict[str, str]

    class FontFace(TypedDict):
        # The font-family.
        fontFamily: str
        # The font-style.
        fontStyle: str
        # The font-variant.
        fontVariant: str
        # The font-weight.
        fontWeight: str
        # The font-stretch.
        fontStretch: str
        # The unicode-range.
        unicodeRange: str
        # The src.
        src: str
        # The resolved platform font family
        platformFontFamily: str

    class FontFamilies(TypedDict, total=False):
        # The standard font-family.
        standard: str
        # The fixed font-family.
        fixed: str
        # The serif font-family.
        serif: str
        # The sansSerif font-family.
        sansSerif: str
        # The cursive font-family.
        cursive: str
        # The fantasy font-family.
        fantasy: str
        # The pictograph font-family.
        pictograph: str

    class FontSizes(TypedDict, total=False):
        # Default standard font size.
        standard: int
        # Default fixed font size.
        fixed: int

    class Frame(TypedDict, total=False):
        # Frame unique identifier.
        id: str
        # Parent frame identifier.
        parentId: str
        # Identifier of the loader associated with this frame.
        loaderId: str
        # Frame's name as specified in the tag.
        name: str
        # Frame document's URL without fragment.
        url: str
        # Frame document's URL fragment including the '#'.
        urlFragment: str
        # Frame document's security origin.
        securityOrigin: str
        # Frame document's mimeType as determined by the browser.
        mimeType: str
        # If the frame failed to load, this contains the URL that could not be loaded. Note that unlike url above, this URL may contain a fragment.
        unreachableUrl: str

    class FrameResource(TypedDict, total=False):
        # Resource URL.
        url: str
        # Type of this resource.
        type: Literal['Document', 'Stylesheet', 'Image', 'Media', 'Font', 'Script', 'TextTrack', 'XHR', 'Fetch', 'EventSource', 'WebSocket', 'Manifest', 'SignedExchange', 'Ping', 'CSPViolationReport', 'Other']
        # Resource mimeType as determined by the browser.
        mimeType: str
        # last-modified timestamp as reported by server.
        lastModified: float
        # Resource content size.
        contentSize: float
        # True if the resource failed to load.
        failed: bool
        # True if the resource was canceled during loading.
        canceled: bool

    class FrameResourceTree(TypedDict, total=False):
        # Frame information for this tree item.
        frame: 'Frame'
        # Child frames.
        # actual: FrameResourceTree
        childFrames: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Information about frame resources.
        resources: List['FrameResource']

    class FrameTree(TypedDict, total=False):
        # Frame information for this tree item.
        frame: 'Frame'
        # Child frames.
        # actual: FrameTree
        childFrames: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]


    class FrameWithManifest(TypedDict):
        # Frame identifier.
        frameId: str
        # Manifest URL.
        manifestURL: str
        # Application cache status.
        status: int

    class FunctionCoverage(TypedDict):
        # JavaScript function name.
        functionName: str
        # Source ranges inside the function with coverage data.
        ranges: List['CoverageRange']
        # Whether coverage data for this function has block granularity.
        isBlockCoverage: bool

    class GPUDevice(TypedDict, total=False):
        # PCI ID of the GPU vendor, if available; 0 otherwise.
        vendorId: float
        # PCI ID of the GPU device, if available; 0 otherwise.
        deviceId: float
        # Sub sys ID of the GPU, only available on Windows.
        subSysId: float
        # Revision of the GPU, only available on Windows.
        revision: float
        # String description of the GPU vendor, if the PCI ID is not available.
        vendorString: str
        # String description of the GPU device, if the PCI ID is not available.
        deviceString: str
        # String description of the GPU driver vendor.
        driverVendor: str
        # String description of the GPU driver version.
        driverVersion: str

    class GPUInfo(TypedDict, total=False):
        # The graphics devices on the system. Element 0 is the primary GPU.
        devices: List['GPUDevice']
        # An optional dictionary of additional GPU related attributes.
        auxAttributes: Dict[str, str]
        # An optional dictionary of graphics features and their status.
        featureStatus: Dict[str, str]
        # An optional array of GPU driver bug workarounds.
        driverBugWorkarounds: List[str]
        # Supported accelerated video decoding capabilities.
        videoDecoding: List['VideoDecodeAcceleratorCapability']
        # Supported accelerated video encoding capabilities.
        videoEncoding: List['VideoEncodeAcceleratorCapability']
        # Supported accelerated image decoding capabilities.
        imageDecoding: List['ImageDecodeAcceleratorCapability']

    class Header(TypedDict):
        name: str
        value: str

    class HeaderEntry(TypedDict):
        name: str
        value: str

    class HighlightConfig(TypedDict, total=False):
        # Whether the node info tooltip should be shown (default: false).
        showInfo: bool
        # Whether the node styles in the tooltip (default: false).
        showStyles: bool
        # Whether the rulers should be shown (default: false).
        showRulers: bool
        # Whether the extension lines from node to the rulers should be shown (default: false).
        showExtensionLines: bool
        # The content box highlight fill color (default: transparent).
        contentColor: 'RGBA'
        # The padding highlight fill color (default: transparent).
        paddingColor: 'RGBA'
        # The border highlight fill color (default: transparent).
        borderColor: 'RGBA'
        # The margin highlight fill color (default: transparent).
        marginColor: 'RGBA'
        # The event target element highlight fill color (default: transparent).
        eventTargetColor: 'RGBA'
        # The shape outside fill color (default: transparent).
        shapeColor: 'RGBA'
        # The shape margin fill color (default: transparent).
        shapeMarginColor: 'RGBA'
        # The grid layout color (default: transparent).
        cssGridColor: 'RGBA'

    class Histogram(TypedDict):
        # Name.
        name: str
        # Sum of sample values.
        sum: int
        # Total number of samples.
        count: int
        # Buckets.
        buckets: List['Bucket']

    class ImageDecodeAcceleratorCapability(TypedDict):
        # Image coded, e.g. Jpeg.
        imageType: Literal['jpeg', 'webp', 'unknown']
        # Maximum supported dimensions of the image in pixels.
        maxDimensions: 'Size'
        # Minimum supported dimensions of the image in pixels.
        minDimensions: 'Size'
        # Optional array of supported subsampling formats, e.g. 4:2:0, if known.
        subsamplings: List[Literal['yuv420', 'yuv422', 'yuv444']]

    class InheritedStyleEntry(TypedDict, total=False):
        # The ancestor node's inline style, if any, in the style inheritance chain.
        inlineStyle: 'CSSStyle'
        # Matches of CSS rules matching the ancestor node in the style inheritance chain.
        matchedCSSRules: List['RuleMatch']

    class Initiator(TypedDict, total=False):
        # Type of this initiator.
        type: Literal['parser', 'script', 'preload', 'SignedExchange', 'other']
        # Initiator JavaScript stack trace, set for Script only.
        stack: 'StackTrace'
        # Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type.
        url: str
        # Initiator line number, set for Parser type or for Script type (when script is importing module) (0-based).
        lineNumber: float

    class InlineTextBox(TypedDict):
        # The bounding box in document coordinates. Note that scroll offset of the document is ignored.
        boundingBox: 'Rect'
        # The starting index in characters, for this post layout textbox substring. Characters that would be represented as a surrogate pair in UTF-16 have length 2.
        startCharacterIndex: int
        # The number of characters in this post layout textbox substring. Characters that would be represented as a surrogate pair in UTF-16 have length 2.
        numCharacters: int

    class InsecureContentStatus(TypedDict):
        # Always false.
        ranMixedContent: bool
        # Always false.
        displayedMixedContent: bool
        # Always false.
        containedMixedForm: bool
        # Always false.
        ranContentWithCertErrors: bool
        # Always false.
        displayedContentWithCertErrors: bool
        # Always set to unknown.
        ranInsecureContentStyle: Literal['unknown', 'neutral', 'insecure', 'secure', 'info', 'insecure-broken']
        # Always set to unknown.
        displayedInsecureContentStyle: Literal['unknown', 'neutral', 'insecure', 'secure', 'info', 'insecure-broken']

    class InternalPropertyDescriptor(TypedDict, total=False):
        # Conventional property name.
        name: str
        # The value associated with the property.
        value: 'RemoteObject'

    class Key(TypedDict, total=False):
        # Key type.
        type: Literal['number', 'string', 'date', 'array']
        # Number value.
        number: float
        # String value.
        string: str
        # Date value.
        date: float
        # Array value.
        # actual: Key
        array: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]


    class KeyPath(TypedDict, total=False):
        # Key path type.
        type: Literal['null', 'string', 'array']
        # String value.
        string: str
        # Array value.
        array: List[str]

    class KeyRange(TypedDict, total=False):
        # Lower bound.
        lower: 'Key'
        # Upper bound.
        upper: 'Key'
        # If true lower bound is open.
        lowerOpen: bool
        # If true upper bound is open.
        upperOpen: bool

    class KeyframeStyle(TypedDict):
        # Keyframe's time offset.
        offset: str
        # `AnimationEffect`'s timing function.
        easing: str

    class KeyframesRule(TypedDict, total=False):
        # CSS keyframed animation's name.
        name: str
        # List of animation keyframes.
        keyframes: List['KeyframeStyle']

    class Layer(TypedDict, total=False):
        # The unique id for this layer.
        layerId: str
        # The id of parent (not present for root).
        parentLayerId: str
        # The backend id for the node associated with this layer.
        backendNodeId: int
        # Offset from parent layer, X coordinate.
        offsetX: float
        # Offset from parent layer, Y coordinate.
        offsetY: float
        # Layer width.
        width: float
        # Layer height.
        height: float
        # Transformation matrix for layer, default is identity matrix
        transform: List[float]
        # Transform anchor point X, absent if no transform specified
        anchorX: float
        # Transform anchor point Y, absent if no transform specified
        anchorY: float
        # Transform anchor point Z, absent if no transform specified
        anchorZ: float
        # Indicates how many time this layer has painted.
        paintCount: int
        # Indicates whether this layer hosts any content, rather than being used for transform/scrolling purposes only.
        drawsContent: bool
        # Set if layer is not visible.
        invisible: bool
        # Rectangles scrolling on main thread only.
        scrollRects: List['ScrollRect']
        # Sticky position constraint information
        stickyPositionConstraint: 'StickyPositionConstraint'

    class LayoutTreeNode(TypedDict, total=False):
        # The index of the related DOM node in the `domNodes` array returned by `getSnapshot`.
        domNodeIndex: int
        # The bounding box in document coordinates. Note that scroll offset of the document is ignored.
        boundingBox: 'Rect'
        # Contents of the LayoutText, if any.
        layoutText: str
        # The post-layout inline text nodes, if any.
        inlineTextNodes: List['InlineTextBox']
        # Index into the `computedStyles` array returned by `getSnapshot`.
        styleIndex: int
        # Global paint order index, which is determined by the stacking order of the nodes. Nodes that are painted together will have the same index. Only provided if includePaintOrder in getSnapshot was true.
        paintOrder: int
        # Set to true to indicate the element begins a new stacking context.
        isStackingContext: bool

    class LayoutTreeSnapshot(TypedDict, total=False):
        # Index of the corresponding node in the `NodeTreeSnapshot` array returned by `captureSnapshot`.
        nodeIndex: List[int]
        # Array of indexes specifying computed style strings, filtered according to the `computedStyles` parameter passed to `captureSnapshot`.
        styles: List[List[int]]
        # The absolute position bounding box.
        bounds: List[List[float]]
        # Contents of the LayoutText, if any.
        text: List[int]
        # Stacking context information.
        stackingContexts: 'RareBooleanData'
        # Global paint order index, which is determined by the stacking order of the nodes. Nodes that are painted together will have the same index. Only provided if includePaintOrder in captureSnapshot was true.
        paintOrders: List[int]
        # The offset rect of nodes. Only available when includeDOMRects is set to true
        offsetRects: List[List[float]]
        # The scroll rect of nodes. Only available when includeDOMRects is set to true
        scrollRects: List[List[float]]
        # The client rect of nodes. Only available when includeDOMRects is set to true
        clientRects: List[List[float]]

    class LayoutViewport(TypedDict):
        # Horizontal offset relative to the document (CSS pixels).
        pageX: int
        # Vertical offset relative to the document (CSS pixels).
        pageY: int
        # Width (CSS pixels), excludes scrollbar if present.
        clientWidth: int
        # Height (CSS pixels), excludes scrollbar if present.
        clientHeight: int

    class Location(TypedDict, total=False):
        # Script identifier as reported in the `Debugger.scriptParsed`.
        scriptId: str
        # Line number in the script (0-based).
        lineNumber: int
        # Column number in the script (0-based).
        columnNumber: int

    class LogEntry(TypedDict, total=False):
        # Log entry source.
        source: Literal['xml', 'javascript', 'network', 'storage', 'appcache', 'rendering', 'security', 'deprecation', 'worker', 'violation', 'intervention', 'recommendation', 'other']
        # Log entry severity.
        level: Literal['verbose', 'info', 'warning', 'error']
        # Logged text.
        text: str
        # Timestamp when this entry was added.
        timestamp: float
        # URL of the resource if known.
        url: str
        # Line number in the resource.
        lineNumber: int
        # JavaScript stack trace.
        stackTrace: 'StackTrace'
        # Identifier of the network request associated with this entry.
        networkRequestId: str
        # Identifier of the worker associated with this entry.
        workerId: str
        # Call arguments.
        args: List['RemoteObject']

    class MediaFeature(TypedDict):
        name: str
        value: str

    class MediaQuery(TypedDict):
        # Array of media query expressions.
        expressions: List['MediaQueryExpression']
        # Whether the media query condition is satisfied.
        active: bool

    class MediaQueryExpression(TypedDict, total=False):
        # Media query expression value.
        value: float
        # Media query expression units.
        unit: str
        # Media query expression feature.
        feature: str
        # The associated range of the value text in the enclosing stylesheet (if available).
        valueRange: 'SourceRange'
        # Computed length of media query expression (if applicable).
        computedLength: float

    class Metric(TypedDict):
        # Metric name.
        name: str
        # Metric value.
        value: float

    class Module(TypedDict):
        # Name of the module.
        name: str
        # UUID of the module.
        uuid: str
        # Base address where the module is loaded into memory. Encoded as a decimal or hexadecimal (0x prefixed) string.
        baseAddress: str
        # Size of the module in bytes.
        size: float

    class NameValue(TypedDict):
        # Attribute/property name.
        name: str
        # Attribute/property value.
        value: str

    class NavigationEntry(TypedDict):
        # Unique id of the navigation history entry.
        id: int
        # URL of the navigation history entry.
        url: str
        # URL that the user typed in the url bar.
        userTypedURL: str
        # Title of the navigation history entry.
        title: str
        # Transition type.
        transitionType: Literal['link', 'typed', 'address_bar', 'auto_bookmark', 'auto_subframe', 'manual_subframe', 'generated', 'auto_toplevel', 'form_submit', 'reload', 'keyword', 'keyword_generated', 'other']

    class Node(TypedDict, total=False):
        # Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend will only push node with given `id` once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client.
        nodeId: int
        # The id of the parent node if any.
        parentId: int
        # The BackendNodeId for this node.
        backendNodeId: int
        # `Node`'s nodeType.
        nodeType: int
        # `Node`'s nodeName.
        nodeName: str
        # `Node`'s localName.
        localName: str
        # `Node`'s nodeValue.
        nodeValue: str
        # Child count for `Container` nodes.
        childNodeCount: int
        # Child nodes of this node when requested with children.
        # actual: Node
        children: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`.
        attributes: List[str]
        # Document URL that `Document` or `FrameOwner` node points to.
        documentURL: str
        # Base URL that `Document` or `FrameOwner` node uses for URL completion.
        baseURL: str
        # `DocumentType`'s publicId.
        publicId: str
        # `DocumentType`'s systemId.
        systemId: str
        # `DocumentType`'s internalSubset.
        internalSubset: str
        # `Document`'s XML version in case of XML documents.
        xmlVersion: str
        # `Attr`'s name.
        name: str
        # `Attr`'s value.
        value: str
        # Pseudo element type for this node.
        pseudoType: Literal['first-line', 'first-letter', 'before', 'after', 'backdrop', 'selection', 'first-line-inherited', 'scrollbar', 'scrollbar-thumb', 'scrollbar-button', 'scrollbar-track', 'scrollbar-track-piece', 'scrollbar-corner', 'resizer', 'input-list-button']
        # Shadow root type.
        shadowRootType: Literal['user-agent', 'open', 'closed']
        # Frame ID for frame owner elements.
        frameId: str
        # Content document for frame owner elements.
        # actual: Node
        contentDocument: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Shadow root list for given element host.
        # actual: Node
        shadowRoots: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Content document fragment for template elements.
        # actual: Node
        templateContent: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Pseudo elements associated with this node.
        # actual: Node
        pseudoElements: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Import document for the HTMLImport links.
        # actual: Node
        importedDocument: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Distributed nodes for given insertion point.
        distributedNodes: List['BackendNode']
        # Whether the node is SVG.
        isSVG: bool

    class NodeTreeSnapshot(TypedDict, total=False):
        # Parent node index.
        parentIndex: List[int]
        # `Node`'s nodeType.
        nodeType: List[int]
        # `Node`'s nodeName.
        nodeName: List[int]
        # `Node`'s nodeValue.
        nodeValue: List[int]
        # `Node`'s id, corresponds to DOM.Node.backendNodeId.
        backendNodeId: List[int]
        # Attributes of an `Element` node. Flatten name, value pairs.
        attributes: List[List[int]]
        # Only set for textarea elements, contains the text value.
        textValue: 'RareStringData'
        # Only set for input elements, contains the input's associated text value.
        inputValue: 'RareStringData'
        # Only set for radio and checkbox input elements, indicates if the element has been checked
        inputChecked: 'RareBooleanData'
        # Only set for option elements, indicates if the element has been selected
        optionSelected: 'RareBooleanData'
        # The index of the document in the list of the snapshot documents.
        contentDocumentIndex: 'RareIntegerData'
        # Type of a pseudo element node.
        pseudoType: 'RareStringData'
        # Whether this DOM node responds to mouse clicks. This includes nodes that have had click event listeners attached via JavaScript as well as anchor tags that naturally navigate when clicked.
        isClickable: 'RareBooleanData'
        # The selected url for nodes with a srcset attribute.
        currentSourceURL: 'RareStringData'
        # The url of the script (if any) that generates this node.
        originURL: 'RareStringData'

    class ObjectPreview(TypedDict, total=False):
        # Object type.
        type: Literal['object', 'function', 'undefined', 'string', 'number', 'boolean', 'symbol', 'bigint']
        # Object subtype hint. Specified for `object` type values only.
        subtype: Literal['array', 'null', 'node', 'regexp', 'date', 'map', 'set', 'weakmap', 'weakset', 'iterator', 'generator', 'error']
        # String representation of the object.
        description: str
        # True iff some of the properties or entries of the original object did not fit.
        overflow: bool
        # List of the properties.
        # actual: PropertyPreview
        properties: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # List of the entries. Specified for `map` and `set` subtype values only.
        # actual: EntryPreview
        entries: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

    class ObjectStore(TypedDict):
        # Object store name.
        name: str
        # Object store key path.
        keyPath: 'KeyPath'
        # If true, object store has auto increment flag set.
        autoIncrement: bool
        # Indexes in this object store.
        indexes: List['ObjectStoreIndex']

    class ObjectStoreIndex(TypedDict):
        # Index name.
        name: str
        # Index key path.
        keyPath: 'KeyPath'
        # If true, index is unique.
        unique: bool
        # If true, index allows multiple entries for a key.
        multiEntry: bool

    class PermissionDescriptor(TypedDict, total=False):
        # Name of permission. See https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl for valid permission names.
        name: str
        # For "midi" permission, may also specify sysex control.
        sysex: bool
        # For "push" permission, may specify userVisibleOnly. Note that userVisibleOnly = true is the only currently supported type.
        userVisibleOnly: bool
        # For "wake-lock" permission, must specify type as either "screen" or "system".
        type: str

    class PictureTile(TypedDict):
        # Offset from owning layer left boundary
        x: float
        # Offset from owning layer top boundary
        y: float
        # Base64-encoded snapshot data.
        picture: bytes

    class PlatformFontUsage(TypedDict):
        # Font's family name reported by platform.
        familyName: str
        # Indicates if the font was downloaded or resolved locally.
        isCustomFont: bool
        # Amount of glyphs that were rendered with this font.
        glyphCount: float

    class PlayerEvent(TypedDict):
        type: Literal['playbackEvent', 'systemEvent', 'messageEvent']
        # Events are timestamped relative to the start of the player creation not relative to the start of playback.
        timestamp: float
        name: str
        value: str

    class PlayerProperty(TypedDict, total=False):
        name: str
        value: str

    class PositionTickInfo(TypedDict):
        # Source line number (1-based).
        line: int
        # Number of samples attributed to the source line.
        ticks: int

    class PrivatePropertyDescriptor(TypedDict):
        # Private property name.
        name: str
        # The value associated with the private property.
        value: 'RemoteObject'

    class ProcessInfo(TypedDict):
        # Specifies process type.
        type: str
        # Specifies process id.
        id: int
        # Specifies cumulative CPU usage in seconds across all threads of the process since the process start.
        cpuTime: float

    class Profile(TypedDict, total=False):
        # The list of profile nodes. First item is the root node.
        nodes: List['ProfileNode']
        # Profiling start timestamp in microseconds.
        startTime: float
        # Profiling end timestamp in microseconds.
        endTime: float
        # Ids of samples top nodes.
        samples: List[int]
        # Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime.
        timeDeltas: List[int]

    class ProfileNode(TypedDict, total=False):
        # Unique id of the node.
        id: int
        # Function location.
        callFrame: 'CallFrame'
        # Number of samples where this node was on top of the call stack.
        hitCount: int
        # Child node ids.
        children: List[int]
        # The reason of being not optimized. The function may be deoptimized or marked as don't optimize.
        deoptReason: str
        # An array of source position ticks.
        positionTicks: List['PositionTickInfo']

    class PropertyDescriptor(TypedDict, total=False):
        # Property name or symbol description.
        name: str
        # The value associated with the property.
        value: 'RemoteObject'
        # True if the value associated with the property may be changed (data descriptors only).
        writable: bool
        # A function which serves as a getter for the property, or `undefined` if there is no getter (accessor descriptors only).
        get: 'RemoteObject'
        # A function which serves as a setter for the property, or `undefined` if there is no setter (accessor descriptors only).
        set: 'RemoteObject'
        # True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.
        configurable: bool
        # True if this property shows up during enumeration of the properties on the corresponding object.
        enumerable: bool
        # True if the result was thrown during the evaluation.
        wasThrown: bool
        # True if the property is owned for the object.
        isOwn: bool
        # Property symbol object, if the property is of the `symbol` type.
        symbol: 'RemoteObject'

    class PropertyPreview(TypedDict, total=False):
        # Property name.
        name: str
        # Object type. Accessor means that the property itself is an accessor property.
        type: Literal['object', 'function', 'undefined', 'string', 'number', 'boolean', 'symbol', 'accessor', 'bigint']
        # User-friendly property value string.
        value: str
        # Nested value preview.
        # actual: ObjectPreview
        valuePreview: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Object subtype hint. Specified for `object` type values only.
        subtype: Literal['array', 'null', 'node', 'regexp', 'date', 'map', 'set', 'weakmap', 'weakset', 'iterator', 'generator', 'error']

    class PseudoElementMatches(TypedDict):
        # Pseudo element type.
        pseudoType: Literal['first-line', 'first-letter', 'before', 'after', 'backdrop', 'selection', 'first-line-inherited', 'scrollbar', 'scrollbar-thumb', 'scrollbar-button', 'scrollbar-track', 'scrollbar-track-piece', 'scrollbar-corner', 'resizer', 'input-list-button']
        # Matches of CSS rules applicable to the pseudo style.
        matches: List['RuleMatch']

    class RGBA(TypedDict, total=False):
        # The red component, in the [0-255] range.
        r: int
        # The green component, in the [0-255] range.
        g: int
        # The blue component, in the [0-255] range.
        b: int
        # The alpha component, in the [0-1] range (default: 1).
        a: float

    class RareBooleanData(TypedDict):
        index: List[int]

    class RareIntegerData(TypedDict):
        index: List[int]
        value: List[int]

    class RareStringData(TypedDict):
        index: List[int]
        value: List[int]

    class Rect(TypedDict):
        # X coordinate
        x: float
        # Y coordinate
        y: float
        # Rectangle width
        width: float
        # Rectangle height
        height: float

    class RemoteLocation(TypedDict):
        host: str
        port: int

    class RemoteObject(TypedDict, total=False):
        # Object type.
        type: Literal['object', 'function', 'undefined', 'string', 'number', 'boolean', 'symbol', 'bigint']
        # Object subtype hint. Specified for `object` type values only.
        subtype: Literal['array', 'null', 'node', 'regexp', 'date', 'map', 'set', 'weakmap', 'weakset', 'iterator', 'generator', 'error', 'proxy', 'promise', 'typedarray', 'arraybuffer', 'dataview']
        # Object class (constructor) name. Specified for `object` type values only.
        className: str
        # Remote object value in case of primitive values or JSON values (if it was requested).
        value: Any
        # Primitive value which can not be JSON-stringified does not have `value`, but gets this property.
        unserializableValue: str
        # String representation of the object.
        description: str
        # Unique object identifier (for non-primitive values).
        objectId: str
        # Preview containing abbreviated property values. Specified for `object` type values only.
        preview: 'ObjectPreview'
        customPreview: 'CustomPreview'

    class Request(TypedDict, total=False):
        # Request URL (without fragment).
        url: str
        # Fragment of the requested URL starting with hash, if present.
        urlFragment: str
        # HTTP request method.
        method: str
        # HTTP request headers.
        headers: Dict[str, str]
        # HTTP POST request data.
        postData: str
        # True when the request has POST data. Note that postData might still be omitted when this flag is true when the data is too long.
        hasPostData: bool
        # The mixed content type of the request.
        mixedContentType: Literal['blockable', 'optionally-blockable', 'none']
        # Priority of the resource request at the time request is sent.
        initialPriority: Literal['VeryLow', 'Low', 'Medium', 'High', 'VeryHigh']
        # The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/
        referrerPolicy: Literal['unsafe-url', 'no-referrer-when-downgrade', 'no-referrer', 'origin', 'origin-when-cross-origin', 'same-origin', 'strict-origin', 'strict-origin-when-cross-origin']
        # Whether is loaded via link preload.
        isLinkPreload: bool

    class RequestPattern(TypedDict, total=False):
        # Wildcards ('*' -> zero or more, '?' -> exactly one) are allowed. Escape character is backslash. Omitting is equivalent to "*".
        urlPattern: str
        # If set, only requests for matching resource types will be intercepted.
        resourceType: Literal['Document', 'Stylesheet', 'Image', 'Media', 'Font', 'Script', 'TextTrack', 'XHR', 'Fetch', 'EventSource', 'WebSocket', 'Manifest', 'SignedExchange', 'Ping', 'CSPViolationReport', 'Other']
        # Stage at wich to begin intercepting requests. Default is Request.
        requestStage: Literal['Request', 'Response']

    class ResourceTiming(TypedDict):
        # Timing's requestTime is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this requestTime.
        requestTime: float
        # Started resolving proxy.
        proxyStart: float
        # Finished resolving proxy.
        proxyEnd: float
        # Started DNS address resolve.
        dnsStart: float
        # Finished DNS address resolve.
        dnsEnd: float
        # Started connecting to the remote host.
        connectStart: float
        # Connected to the remote host.
        connectEnd: float
        # Started SSL handshake.
        sslStart: float
        # Finished SSL handshake.
        sslEnd: float
        # Started running ServiceWorker.
        workerStart: float
        # Finished Starting ServiceWorker.
        workerReady: float
        # Started sending request.
        sendStart: float
        # Finished sending request.
        sendEnd: float
        # Time the server started pushing request.
        pushStart: float
        # Time the server finished pushing request.
        pushEnd: float
        # Finished receiving response headers.
        receiveHeadersEnd: float

    class Response(TypedDict, total=False):
        # Response URL. This URL can be different from CachedResource.url in case of redirect.
        url: str
        # HTTP response status code.
        status: int
        # HTTP response status text.
        statusText: str
        # HTTP response headers.
        headers: Dict[str, str]
        # HTTP response headers text.
        headersText: str
        # Resource mimeType as determined by the browser.
        mimeType: str
        # Refined HTTP request headers that were actually transmitted over the network.
        requestHeaders: Dict[str, str]
        # HTTP request headers text.
        requestHeadersText: str
        # Specifies whether physical connection was actually reused for this request.
        connectionReused: bool
        # Physical connection id that was actually used for this request.
        connectionId: float
        # Remote IP address.
        remoteIPAddress: str
        # Remote port.
        remotePort: int
        # Specifies that the request was served from the disk cache.
        fromDiskCache: bool
        # Specifies that the request was served from the ServiceWorker.
        fromServiceWorker: bool
        # Specifies that the request was served from the prefetch cache.
        fromPrefetchCache: bool
        # Total number of bytes received for this request so far.
        encodedDataLength: float
        # Timing information for the given request.
        timing: 'ResourceTiming'
        # Protocol used to fetch this request.
        protocol: str
        # Security state of the request resource.
        securityState: Literal['unknown', 'neutral', 'insecure', 'secure', 'info', 'insecure-broken']
        # Security details for the request.
        securityDetails: 'SecurityDetails'

    class RuleMatch(TypedDict):
        # CSS rule in the match.
        rule: 'CSSRule'
        # Matching selector indices in the rule's selectorList selectors (0-based).
        matchingSelectors: List[int]

    class RuleUsage(TypedDict):
        # The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from.
        styleSheetId: str
        # Offset of the start of the rule (including selector) from the beginning of the stylesheet.
        startOffset: float
        # Offset of the end of the rule body from the beginning of the stylesheet.
        endOffset: float
        # Indicates whether the rule was actually used by some element in the page.
        used: bool

    class SafetyTipInfo(TypedDict, total=False):
        # Describes whether the page triggers any safety tips or reputation warnings. Default is unknown.
        safetyTipStatus: Literal['badReputation', 'lookalike']
        # The URL the safety tip suggested ("Did you mean?"). Only filled in for lookalike matches.
        safeUrl: str

    class SamplingHeapProfile(TypedDict):
        head: 'SamplingHeapProfileNode'
        samples: List['SamplingHeapProfileSample']

    class SamplingHeapProfileNode(TypedDict):
        # Function location.
        callFrame: 'CallFrame'
        # Allocations size in bytes for the node excluding children.
        selfSize: float
        # Node id. Ids are unique across all profiles collected between startSampling and stopSampling.
        id: int
        # Child nodes.
        # actual: SamplingHeapProfileNode
        children: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]


    class SamplingHeapProfileSample(TypedDict):
        # Allocation size in bytes attributed to the sample.
        size: float
        # Id of the corresponding profile tree node.
        nodeId: int
        # Time-ordered sample ordinal number. It is unique across all profiles retrieved between startSampling and stopSampling.
        ordinal: float

    class SamplingProfile(TypedDict):
        samples: List['SamplingProfileNode']
        modules: List['Module']

    class SamplingProfileNode(TypedDict):
        # Size of the sampled allocation.
        size: float
        # Total bytes attributed to this sample.
        total: float
        # Execution stack at the point of allocation.
        stack: List[str]

    class Scope(TypedDict, total=False):
        # Scope type.
        type: Literal['global', 'local', 'with', 'closure', 'catch', 'block', 'script', 'eval', 'module']
        # Object representing the scope. For `global` and `with` scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.
        object: 'RemoteObject'
        name: str
        # Location in the source code where scope starts
        startLocation: 'Location'
        # Location in the source code where scope ends
        endLocation: 'Location'

    class ScreenOrientation(TypedDict):
        # Orientation type.
        type: Literal['portraitPrimary', 'portraitSecondary', 'landscapePrimary', 'landscapeSecondary']
        # Orientation angle.
        angle: int

    class ScreencastFrameMetadata(TypedDict, total=False):
        # Top offset in DIP.
        offsetTop: float
        # Page scale factor.
        pageScaleFactor: float
        # Device screen width in DIP.
        deviceWidth: float
        # Device screen height in DIP.
        deviceHeight: float
        # Position of horizontal scroll in CSS pixels.
        scrollOffsetX: float
        # Position of vertical scroll in CSS pixels.
        scrollOffsetY: float
        # Frame swap timestamp.
        timestamp: float

    class ScreenshotParams(TypedDict, total=False):
        # Image compression format (defaults to png).
        format: Literal['jpeg', 'png']
        # Compression quality from range [0..100] (jpeg only).
        quality: int

    class ScriptCoverage(TypedDict):
        # JavaScript script id.
        scriptId: str
        # JavaScript script name or url.
        url: str
        # Functions contained in the script that has coverage data.
        functions: List['FunctionCoverage']

    class ScriptPosition(TypedDict):
        lineNumber: int
        columnNumber: int

    class ScriptTypeProfile(TypedDict):
        # JavaScript script id.
        scriptId: str
        # JavaScript script name or url.
        url: str
        # Type profile entries for parameters and return values of the functions in the script.
        entries: List['TypeProfileEntry']

    class ScrollRect(TypedDict):
        # Rectangle itself.
        rect: 'Rect'
        # Reason for rectangle to force scrolling on the main thread
        type: Literal['RepaintsOnScroll', 'TouchEventHandler', 'WheelEventHandler']

    class SearchMatch(TypedDict):
        # Line number in resource content.
        lineNumber: float
        # Line with match content.
        lineContent: str

    class SecurityDetails(TypedDict, total=False):
        # Protocol name (e.g. "TLS 1.2" or "QUIC").
        protocol: str
        # Key Exchange used by the connection, or the empty string if not applicable.
        keyExchange: str
        # (EC)DH group used by the connection, if applicable.
        keyExchangeGroup: str
        # Cipher name.
        cipher: str
        # TLS MAC. Note that AEAD ciphers do not have separate MACs.
        mac: str
        # Certificate ID value.
        certificateId: int
        # Certificate subject name.
        subjectName: str
        # Subject Alternative Name (SAN) DNS names and IP addresses.
        sanList: List[str]
        # Name of the issuing CA.
        issuer: str
        # Certificate valid from date.
        validFrom: float
        # Certificate valid to (expiration) date
        validTo: float
        # List of signed certificate timestamps (SCTs).
        signedCertificateTimestampList: List['SignedCertificateTimestamp']
        # Whether the request complied with Certificate Transparency policy
        certificateTransparencyCompliance: Literal['unknown', 'not-compliant', 'compliant']

    class SecurityStateExplanation(TypedDict, total=False):
        # Security state representing the severity of the factor being explained.
        securityState: Literal['unknown', 'neutral', 'insecure', 'secure', 'info', 'insecure-broken']
        # Title describing the type of factor.
        title: str
        # Short phrase describing the type of factor.
        summary: str
        # Full text explanation of the factor.
        description: str
        # The type of mixed content described by the explanation.
        mixedContentType: Literal['blockable', 'optionally-blockable', 'none']
        # Page certificate.
        certificate: List[str]
        # Recommendations to fix any issues.
        recommendations: List[str]

    class SelectorList(TypedDict):
        # Selectors in the list.
        selectors: List['Value']
        # Rule selector text.
        text: str

    class ServiceWorkerErrorMessage(TypedDict):
        errorMessage: str
        registrationId: str
        versionId: str
        sourceURL: str
        lineNumber: int
        columnNumber: int

    class ServiceWorkerRegistration(TypedDict):
        registrationId: str
        scopeURL: str
        isDeleted: bool

    class ServiceWorkerVersion(TypedDict, total=False):
        versionId: str
        registrationId: str
        scriptURL: str
        runningStatus: Literal['stopped', 'starting', 'running', 'stopping']
        status: Literal['new', 'installing', 'installed', 'activating', 'activated', 'redundant']
        # The Last-Modified header value of the main script.
        scriptLastModified: float
        # The time at which the response headers of the main script were received from the server. For cached script it is the last time the cache entry was validated.
        scriptResponseTime: float
        controlledClients: List[str]
        targetId: str

    class ShapeOutsideInfo(TypedDict):
        # Shape bounds
        bounds: List[float]
        # Shape coordinate details
        shape: List[Any]
        # Margin shape bounds
        marginShape: List[Any]

    class ShorthandEntry(TypedDict, total=False):
        # Shorthand name.
        name: str
        # Shorthand value.
        value: str
        # Whether the property has "!important" annotation (implies `false` if absent).
        important: bool

    class SignedCertificateTimestamp(TypedDict):
        # Validation status.
        status: str
        # Origin.
        origin: str
        # Log name / description.
        logDescription: str
        # Log ID.
        logId: str
        # Issuance date.
        timestamp: float
        # Hash algorithm.
        hashAlgorithm: str
        # Signature algorithm.
        signatureAlgorithm: str
        # Signature data.
        signatureData: str

    class SignedExchangeError(TypedDict, total=False):
        # Error message.
        message: str
        # The index of the signature which caused the error.
        signatureIndex: int
        # The field which caused the error.
        errorField: Literal['signatureSig', 'signatureIntegrity', 'signatureCertUrl', 'signatureCertSha256', 'signatureValidityUrl', 'signatureTimestamps']

    class SignedExchangeHeader(TypedDict):
        # Signed exchange request URL.
        requestUrl: str
        # Signed exchange response code.
        responseCode: int
        # Signed exchange response headers.
        responseHeaders: Dict[str, str]
        # Signed exchange response signature.
        signatures: List['SignedExchangeSignature']
        # Signed exchange header integrity hash in the form of "sha256-<base64-hash-value>".
        headerIntegrity: str

    class SignedExchangeInfo(TypedDict, total=False):
        # The outer response of signed HTTP exchange which was received from network.
        outerResponse: 'Response'
        # Information about the signed exchange header.
        header: 'SignedExchangeHeader'
        # Security details for the signed exchange header.
        securityDetails: 'SecurityDetails'
        # Errors occurred while handling the signed exchagne.
        errors: List['SignedExchangeError']

    class SignedExchangeSignature(TypedDict, total=False):
        # Signed exchange signature label.
        label: str
        # The hex string of signed exchange signature.
        signature: str
        # Signed exchange signature integrity.
        integrity: str
        # Signed exchange signature cert Url.
        certUrl: str
        # The hex string of signed exchange signature cert sha256.
        certSha256: str
        # Signed exchange signature validity Url.
        validityUrl: str
        # Signed exchange signature date.
        date: int
        # Signed exchange signature expires.
        expires: int
        # The encoded certificates.
        certificates: List[str]

    class Sink(TypedDict, total=False):
        name: str
        id: str
        # Text describing the current session. Present only if there is an active session on the sink.
        session: str

    class Size(TypedDict):
        # Width in pixels.
        width: int
        # Height in pixels.
        height: int

    class SourceRange(TypedDict):
        # Start line of range.
        startLine: int
        # Start column of range (inclusive).
        startColumn: int
        # End line of range
        endLine: int
        # End column of range (exclusive).
        endColumn: int

    class StackTrace(TypedDict, total=False):
        # String label of this stack trace. For async traces this may be a name of the function that initiated the async call.
        description: str
        # JavaScript function name.
        callFrames: List['CallFrame']
        # Asynchronous JavaScript stack trace that preceded this stack, if available.
        # actual: StackTrace
        parent: Dict[str, Union[Dict[str, Any], str, bool, int, float, List]]

        # Asynchronous JavaScript stack trace that preceded this stack, if available.
        parentId: 'StackTraceId'

    class StackTraceId(TypedDict, total=False):
        id: str
        debuggerId: str

    class StickyPositionConstraint(TypedDict, total=False):
        # Layout rectangle of the sticky element before being shifted
        stickyBoxRect: 'Rect'
        # Layout rectangle of the containing block of the sticky element
        containingBlockRect: 'Rect'
        # The nearest sticky layer that shifts the sticky box
        nearestLayerShiftingStickyBox: str
        # The nearest sticky layer that shifts the containing block
        nearestLayerShiftingContainingBlock: str

    class StorageId(TypedDict):
        # Security origin for the storage.
        securityOrigin: str
        # Whether the storage is local storage (not session storage).
        isLocalStorage: bool

    class StyleDeclarationEdit(TypedDict):
        # The css style sheet identifier.
        styleSheetId: str
        # The range of the style text in the enclosing stylesheet.
        range: 'SourceRange'
        # New style text.
        text: str

    class TargetInfo(TypedDict, total=False):
        targetId: str
        type: str
        title: str
        url: str
        # Whether the target has an attached client.
        attached: bool
        # Opener target Id
        openerId: str
        browserContextId: str

    class TextBoxSnapshot(TypedDict):
        # Index of the layout tree node that owns this box collection.
        layoutIndex: List[int]
        # The absolute position bounding box.
        bounds: List[List[float]]
        # The starting index in characters, for this post layout textbox substring. Characters that would be represented as a surrogate pair in UTF-16 have length 2.
        start: List[int]
        # The number of characters in this post layout textbox substring. Characters that would be represented as a surrogate pair in UTF-16 have length 2.
        length: List[int]

    class TouchPoint(TypedDict, total=False):
        # X coordinate of the event relative to the main frame's viewport in CSS pixels.
        x: float
        # Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
        y: float
        # X radius of the touch area (default: 1.0).
        radiusX: float
        # Y radius of the touch area (default: 1.0).
        radiusY: float
        # Rotation angle (default: 0.0).
        rotationAngle: float
        # Force (default: 1.0).
        force: float
        # Identifier used to track touch sources between events, must be unique within an event.
        id: float

    class TraceConfig(TypedDict, total=False):
        # Controls how the trace buffer stores data.
        recordMode: Literal['recordUntilFull', 'recordContinuously', 'recordAsMuchAsPossible', 'echoToConsole']
        # Turns on JavaScript stack sampling.
        enableSampling: bool
        # Turns on system tracing.
        enableSystrace: bool
        # Turns on argument filter.
        enableArgumentFilter: bool
        # Included category filters.
        includedCategories: List[str]
        # Excluded category filters.
        excludedCategories: List[str]
        # Configuration to synthesize the delays in tracing.
        syntheticDelays: List[str]
        # Configuration for memory dump triggers. Used only when "memory-infra" category is enabled.
        memoryDumpConfig: Dict[str, str]

    class TypeObject(TypedDict):
        # Name of a type collected with type profiling.
        name: str

    class TypeProfileEntry(TypedDict):
        # Source offset of the parameter or end of function for return values.
        offset: int
        # The types for this parameter or return value.
        types: List['TypeObject']

    class UsageForType(TypedDict):
        # Name of storage type.
        storageType: Literal['appcache', 'cookies', 'file_systems', 'indexeddb', 'local_storage', 'shader_cache', 'websql', 'service_workers', 'cache_storage', 'all', 'other']
        # Storage usage (bytes).
        usage: float

    class Value(TypedDict, total=False):
        # Value text.
        text: str
        # Value range in the underlying resource (if available).
        range: 'SourceRange'

    class VideoDecodeAcceleratorCapability(TypedDict):
        # Video codec profile that is supported, e.g. VP9 Profile 2.
        profile: str
        # Maximum video dimensions in pixels supported for this |profile|.
        maxResolution: 'Size'
        # Minimum video dimensions in pixels supported for this |profile|.
        minResolution: 'Size'

    class VideoEncodeAcceleratorCapability(TypedDict):
        # Video codec profile that is supported, e.g H264 Main.
        profile: str
        # Maximum video dimensions in pixels supported for this |profile|.
        maxResolution: 'Size'
        # Maximum encoding framerate in frames per second supported for this |profile|, as fraction's numerator and denominator, e.g. 24/1 fps, 24000/1001 fps, etc.
        maxFramerateNumerator: int
        maxFramerateDenominator: int

    class Viewport(TypedDict):
        # X offset in device independent pixels (dip).
        x: float
        # Y offset in device independent pixels (dip).
        y: float
        # Rectangle width in device independent pixels (dip).
        width: float
        # Rectangle height in device independent pixels (dip).
        height: float
        # Page scale factor.
        scale: float

    class ViolationSetting(TypedDict):
        # Violation type.
        name: Literal['longTask', 'longLayout', 'blockedEvent', 'blockedParser', 'discouragedAPIUse', 'handler', 'recurringHandler']
        # Time threshold to trigger upon.
        threshold: float

    class VirtualAuthenticatorOptions(TypedDict, total=False):
        protocol: Literal['u2f', 'ctap2']
        transport: Literal['usb', 'nfc', 'ble', 'cable', 'internal']
        # Defaults to false.
        hasResidentKey: bool
        # Defaults to false.
        hasUserVerification: bool
        # If set to true, tests of user presence will succeed immediately. Otherwise, they will not be resolved. Defaults to true.
        automaticPresenceSimulation: bool
        # Sets whether User Verification succeeds or fails for an authenticator. Defaults to false.
        isUserVerified: bool

    class VisibleSecurityState(TypedDict, total=False):
        # The security level of the page.
        securityState: Literal['unknown', 'neutral', 'insecure', 'secure', 'info', 'insecure-broken']
        # Security state details about the page certificate.
        certificateSecurityState: 'CertificateSecurityState'
        # The type of Safety Tip triggered on the page. Note that this field will be set even if the Safety Tip UI was not actually shown.
        safetyTipInfo: 'SafetyTipInfo'
        # Array of security state issues ids.
        securityStateIssueIds: List[str]

    class VisualViewport(TypedDict, total=False):
        # Horizontal offset relative to the layout viewport (CSS pixels).
        offsetX: float
        # Vertical offset relative to the layout viewport (CSS pixels).
        offsetY: float
        # Horizontal offset relative to the document (CSS pixels).
        pageX: float
        # Vertical offset relative to the document (CSS pixels).
        pageY: float
        # Width (CSS pixels), excludes scrollbar if present.
        clientWidth: float
        # Height (CSS pixels), excludes scrollbar if present.
        clientHeight: float
        # Scale relative to the ideal viewport (size at width=device-width).
        scale: float
        # Page zoom factor (CSS to device independent pixels ratio).
        zoom: float

    class WebSocketFrame(TypedDict):
        # WebSocket message opcode.
        opcode: float
        # WebSocket message mask.
        mask: bool
        # WebSocket message payload data. If the opcode is 1, this is a text message and payloadData is a UTF-8 string. If the opcode isn't 1, then payloadData is a base64 encoded string representing binary data.
        payloadData: str

    class WebSocketRequest(TypedDict):
        # HTTP request headers.
        headers: Dict[str, str]

    class WebSocketResponse(TypedDict, total=False):
        # HTTP response status code.
        status: int
        # HTTP response status text.
        statusText: str
        # HTTP response headers.
        headers: Dict[str, str]
        # HTTP response headers text.
        headersText: str
        # HTTP request headers.
        requestHeaders: Dict[str, str]
        # HTTP request headers text.
        requestHeadersText: str

    class acceptedPayload(TypedDict):
        # Port number that was successfully bound.
        port: int
        # Connection id to be used.
        connectionId: str

    class addDatabasePayload(TypedDict):
        database: 'Database'

    class addHeapSnapshotChunkPayload(TypedDict):
        chunk: str

    class addRuleReturnValues(TypedDict):
        # The newly created rule.
        rule: 'CSSRule'

    class addScriptToEvaluateOnLoadReturnValues(TypedDict):
        # Identifier of the added script.
        identifier: str

    class addScriptToEvaluateOnNewDocumentReturnValues(TypedDict):
        # Identifier of the added script.
        identifier: str

    class addVirtualAuthenticatorReturnValues(TypedDict):
        authenticatorId: str

    class animationCanceledPayload(TypedDict):
        # Id of the animation that was cancelled.
        id: str

    class animationCreatedPayload(TypedDict):
        # Id of the animation that was created.
        id: str

    class animationStartedPayload(TypedDict):
        # Animation that was started.
        animation: 'Animation'

    class applicationCacheStatusUpdatedPayload(TypedDict):
        # Identifier of the frame containing document whose application cache updated status.
        frameId: str
        # Manifest URL.
        manifestURL: str
        # Updated application cache status.
        status: int

    class attachToBrowserTargetReturnValues(TypedDict):
        # Id assigned to the session.
        sessionId: str

    class attachToTargetReturnValues(TypedDict):
        # Id assigned to the session.
        sessionId: str

    class attachedToTargetPayload(TypedDict):
        # Identifier assigned to the session used to send/receive messages.
        sessionId: str
        targetInfo: 'TargetInfo'
        waitingForDebugger: bool

    class attributeModifiedPayload(TypedDict):
        # Id of the node that has changed.
        nodeId: int
        # Attribute name.
        name: str
        # Attribute value.
        value: str

    class attributeRemovedPayload(TypedDict):
        # Id of the node that has changed.
        nodeId: int
        # A ttribute name.
        name: str

    class audioListenerCreatedPayload(TypedDict):
        listener: 'AudioListener'

    class audioListenerWillBeDestroyedPayload(TypedDict):
        contextId: str
        listenerId: str

    class audioNodeCreatedPayload(TypedDict):
        node: 'AudioNode'

    class audioNodeWillBeDestroyedPayload(TypedDict):
        contextId: str
        nodeId: str

    class audioParamCreatedPayload(TypedDict):
        param: 'AudioParam'

    class audioParamWillBeDestroyedPayload(TypedDict):
        contextId: str
        nodeId: str
        paramId: str

    class authRequiredPayload(TypedDict):
        # Each request the page makes will have a unique id.
        requestId: str
        # The details of the request.
        request: 'Request'
        # The id of the frame that initiated the request.
        frameId: str
        # How the requested resource will be used.
        resourceType: Literal['Document', 'Stylesheet', 'Image', 'Media', 'Font', 'Script', 'TextTrack', 'XHR', 'Fetch', 'EventSource', 'WebSocket', 'Manifest', 'SignedExchange', 'Ping', 'CSPViolationReport', 'Other']
        # Details of the Authorization Challenge encountered. If this is set, client should respond with continueRequest that contains AuthChallengeResponse.
        authChallenge: 'AuthChallenge'

    class awaitPromiseReturnValues(TypedDict, total=False):
        # Promise result. Will contain rejected value if promise was rejected.
        result: 'RemoteObject'
        # Exception details if stack strace is available.
        exceptionDetails: 'ExceptionDetails'

    class backgroundServiceEventReceivedPayload(TypedDict):
        backgroundServiceEvent: 'BackgroundServiceEvent'

    class beginFrameReturnValues(TypedDict, total=False):
        # Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the display. Reported for diagnostic uses, may be removed in the future.
        hasDamage: bool
        # Base64-encoded image data of the screenshot, if one was requested and successfully taken.
        screenshotData: bytes

    class bindingCalledPayload(TypedDict):
        name: str
        payload: str
        # Identifier of the context where the call was made.
        executionContextId: int

    class breakpointResolvedPayload(TypedDict):
        # Breakpoint unique identifier.
        breakpointId: str
        # Actual breakpoint location.
        location: 'Location'

    class bufferUsagePayload(TypedDict, total=False):
        # A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size.
        percentFull: float
        # An approximate number of events in the trace log.
        eventCount: float
        # A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size.
        value: float

    class cacheStorageContentUpdatedPayload(TypedDict):
        # Origin to update.
        origin: str
        # Name of cache in origin.
        cacheName: str

    class cacheStorageListUpdatedPayload(TypedDict):
        # Origin to update.
        origin: str

    class callFunctionOnReturnValues(TypedDict, total=False):
        # Call result.
        result: 'RemoteObject'
        # Exception details.
        exceptionDetails: 'ExceptionDetails'

    class canClearBrowserCacheReturnValues(TypedDict):
        # True if browser cache can be cleared.
        result: bool

    class canClearBrowserCookiesReturnValues(TypedDict):
        # True if browser cookies can be cleared.
        result: bool

    class canEmulateNetworkConditionsReturnValues(TypedDict):
        # True if emulation of network conditions is supported.
        result: bool

    class canEmulateReturnValues(TypedDict):
        # True if emulation is supported.
        result: bool

    class captureScreenshotReturnValues(TypedDict):
        # Base64-encoded image data.
        data: bytes

    class captureSnapshotReturnValues(TypedDict):
        # Serialized page data.
        data: str

    class certificateErrorPayload(TypedDict):
        # The ID of the event.
        eventId: int
        # The type of the error.
        errorType: str
        # The url that was requested.
        requestURL: str

    class characterDataModifiedPayload(TypedDict):
        # Id of the node that has changed.
        nodeId: int
        # New text value.
        characterData: str

    class childNodeCountUpdatedPayload(TypedDict):
        # Id of the node that has changed.
        nodeId: int
        # New node count.
        childNodeCount: int

    class childNodeInsertedPayload(TypedDict):
        # Id of the node that has changed.
        parentNodeId: int
        # If of the previous siblint.
        previousNodeId: int
        # Inserted node data.
        node: 'Node'

    class childNodeRemovedPayload(TypedDict):
        # Parent id.
        parentNodeId: int
        # Id of the node that has been removed.
        nodeId: int

    class closeTargetReturnValues(TypedDict):
        success: bool

    class collectClassNamesFromSubtreeReturnValues(TypedDict):
        # Class name list.
        classNames: List[str]

    class collectClassNamesReturnValues(TypedDict):
        # Class name list.
        classNames: List[str]

    class compilationCacheProducedPayload(TypedDict):
        url: str
        # Base64-encoded data
        data: bytes

    class compileScriptReturnValues(TypedDict, total=False):
        # Id of the script.
        scriptId: str
        # Exception details.
        exceptionDetails: 'ExceptionDetails'

    class compositingReasonsReturnValues(TypedDict):
        # A list of strings specifying reasons for the given layer to become composited.
        compositingReasons: List[str]

    class consoleAPICalledPayload(TypedDict, total=False):
        # Type of the call.
        type: Literal['log', 'debug', 'info', 'error', 'warning', 'dir', 'dirxml', 'table', 'trace', 'clear', 'startGroup', 'startGroupCollapsed', 'endGroup', 'assert', 'profile', 'profileEnd', 'count', 'timeEnd']
        # Call arguments.
        args: List['RemoteObject']
        # Identifier of the context where the call was made.
        executionContextId: int
        # Call timestamp.
        timestamp: float
        # Stack trace captured when the call was made. The async stack chain is automatically reported for the following call types: `assert`, `error`, `trace`, `warning`. For other types the async call chain can be retrieved using `Debugger.getStackTrace` and `stackTrace.parentId` field.
        stackTrace: 'StackTrace'
        # Console context descriptor for calls on non-default console context (not console.*): 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call on named context.
        context: str

    class consoleProfileFinishedPayload(TypedDict, total=False):
        id: str
        # Location of console.profileEnd().
        location: 'Location'
        profile: 'Profile'
        # Profile title passed as an argument to console.profile().
        title: str

    class consoleProfileStartedPayload(TypedDict, total=False):
        id: str
        # Location of console.profile().
        location: 'Location'
        # Profile title passed as an argument to console.profile().
        title: str

    class contextChangedPayload(TypedDict):
        context: 'BaseAudioContext'

    class contextCreatedPayload(TypedDict):
        context: 'BaseAudioContext'

    class contextWillBeDestroyedPayload(TypedDict):
        contextId: str

    class copyToReturnValues(TypedDict):
        # Id of the node clone.
        nodeId: int

    class createBrowserContextReturnValues(TypedDict):
        # The id of the context created.
        browserContextId: str

    class createIsolatedWorldReturnValues(TypedDict):
        # Execution context of the isolated world.
        executionContextId: int

    class createStyleSheetReturnValues(TypedDict):
        # Identifier of the created "via-inspector" stylesheet.
        styleSheetId: str

    class createTargetReturnValues(TypedDict):
        # The id of the page opened.
        targetId: str

    class dataCollectedPayload(TypedDict):
        value: List[Dict[str, str]]

    class dataReceivedPayload(TypedDict):
        # Request identifier.
        requestId: str
        # Timestamp.
        timestamp: float
        # Data chunk length.
        dataLength: int
        # Actual bytes received (might be less than dataLength for compressed encodings).
        encodedDataLength: int

    class describeNodeReturnValues(TypedDict):
        # Node description.
        node: 'Node'

    class detachedFromTargetPayload(TypedDict, total=False):
        # Detached session identifier.
        sessionId: str
        # Deprecated.
        targetId: str

    class detachedPayload(TypedDict):
        # The reason why connection has been terminated.
        reason: str

    class distributedNodesUpdatedPayload(TypedDict):
        # Insertion point where distrubuted nodes were updated.
        insertionPointId: int
        # Distributed nodes for given insertion point.
        distributedNodes: List['BackendNode']

    class domContentEventFiredPayload(TypedDict):
        timestamp: float

    class domStorageItemAddedPayload(TypedDict):
        storageId: 'StorageId'
        key: str
        newValue: str

    class domStorageItemRemovedPayload(TypedDict):
        storageId: 'StorageId'
        key: str

    class domStorageItemUpdatedPayload(TypedDict):
        storageId: 'StorageId'
        key: str
        oldValue: str
        newValue: str

    class domStorageItemsClearedPayload(TypedDict):
        storageId: 'StorageId'

    class downloadWillBeginPayload(TypedDict):
        # Id of the frame that caused download to begin.
        frameId: str
        # URL of the resource being downloaded.
        url: str

    class enableReturnValues(TypedDict):
        # Unique identifier of the debugger.
        debuggerId: str

    class entryAddedPayload(TypedDict):
        # The entry.
        entry: 'LogEntry'

    class evaluateOnCallFrameReturnValues(TypedDict, total=False):
        # Object wrapper for the evaluation result.
        result: 'RemoteObject'
        # Exception details.
        exceptionDetails: 'ExceptionDetails'

    class evaluateReturnValues(TypedDict, total=False):
        # Evaluation result.
        result: 'RemoteObject'
        # Exception details.
        exceptionDetails: 'ExceptionDetails'

    class eventSourceMessageReceivedPayload(TypedDict):
        # Request identifier.
        requestId: str
        # Timestamp.
        timestamp: float
        # Message type.
        eventName: str
        # Message identifier.
        eventId: str
        # Message content.
        data: str

    class exceptionRevokedPayload(TypedDict):
        # Reason describing why exception was revoked.
        reason: str
        # The id of revoked exception, as reported in `exceptionThrown`.
        exceptionId: int

    class exceptionThrownPayload(TypedDict):
        # Timestamp of the exception.
        timestamp: float
        exceptionDetails: 'ExceptionDetails'

    class executeSQLReturnValues(TypedDict, total=False):
        columnNames: List[str]
        values: List[Any]
        sqlError: 'Error'

    class executionContextCreatedPayload(TypedDict):
        # A newly created execution context.
        context: 'ExecutionContextDescription'

    class executionContextDestroyedPayload(TypedDict):
        # Id of the destroyed context
        executionContextId: int

    class fileChooserOpenedPayload(TypedDict):
        # Id of the frame containing input node.
        frameId: str
        # Input node id.
        backendNodeId: int
        # Input mode.
        mode: Literal['selectSingle', 'selectMultiple']

    class fontsUpdatedPayload(TypedDict, total=False):
        # The web font that has loaded.
        font: 'FontFace'

    class frameAttachedPayload(TypedDict, total=False):
        # Id of the frame that has been attached.
        frameId: str
        # Parent frame identifier.
        parentFrameId: str
        # JavaScript stack trace of when frame was attached, only set if frame initiated from script.
        stack: 'StackTrace'

    class frameClearedScheduledNavigationPayload(TypedDict):
        # Id of the frame that has cleared its scheduled navigation.
        frameId: str

    class frameDetachedPayload(TypedDict):
        # Id of the frame that has been detached.
        frameId: str

    class frameNavigatedPayload(TypedDict):
        # Frame object.
        frame: 'Frame'

    class frameRequestedNavigationPayload(TypedDict):
        # Id of the frame that is being navigated.
        frameId: str
        # The reason for the navigation.
        reason: Literal['formSubmissionGet', 'formSubmissionPost', 'httpHeaderRefresh', 'scriptInitiated', 'metaTagRefresh', 'pageBlockInterstitial', 'reload']
        # The destination URL for the requested navigation.
        url: str

    class frameScheduledNavigationPayload(TypedDict):
        # Id of the frame that has scheduled a navigation.
        frameId: str
        # Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start.
        delay: float
        # The reason for the navigation.
        reason: Literal['formSubmissionGet', 'formSubmissionPost', 'httpHeaderRefresh', 'scriptInitiated', 'metaTagRefresh', 'pageBlockInterstitial', 'reload']
        # The destination URL for the scheduled navigation.
        url: str

    class frameStartedLoadingPayload(TypedDict):
        # Id of the frame that has started loading.
        frameId: str

    class frameStoppedLoadingPayload(TypedDict):
        # Id of the frame that has stopped loading.
        frameId: str

    class getAllCookiesReturnValues(TypedDict):
        # Array of cookie objects.
        cookies: List['Cookie']

    class getAllTimeSamplingProfileReturnValues(TypedDict):
        profile: 'SamplingProfile'

    class getAppManifestReturnValues(TypedDict, total=False):
        # Manifest location.
        url: str
        errors: List['AppManifestError']
        # Manifest content.
        data: str

    class getApplicationCacheForFrameReturnValues(TypedDict):
        # Relevant application cache data for the document in given frame.
        applicationCache: 'ApplicationCache'

    class getAttributesReturnValues(TypedDict):
        # An interleaved array of node attribute names and values.
        attributes: List[str]

    class getBackgroundColorsReturnValues(TypedDict, total=False):
        # The range of background colors behind this element, if it contains any visible text. If no visible text is present, this will be undefined. In the case of a flat background color, this will consist of simply that color. In the case of a gradient, this will consist of each of the color stops. For anything more complicated, this will be an empty array. Images will be ignored (as if the image had failed to load).
        backgroundColors: List[str]
        # The computed font size for this node, as a CSS computed value string (e.g. '12px').
        computedFontSize: str
        # The computed font weight for this node, as a CSS computed value string (e.g. 'normal' or '100').
        computedFontWeight: str

    class getBestEffortCoverageReturnValues(TypedDict):
        # Coverage data for the current isolate.
        result: List['ScriptCoverage']

    class getBoxModelReturnValues(TypedDict):
        # Box model for the node.
        model: 'BoxModel'

    class getBrowserCommandLineReturnValues(TypedDict):
        # Commandline parameters
        arguments: List[str]

    class getBrowserContextsReturnValues(TypedDict):
        # An array of browser context ids.
        browserContextIds: List[str]

    class getBrowserSamplingProfileReturnValues(TypedDict):
        profile: 'SamplingProfile'

    class getCategoriesReturnValues(TypedDict):
        # A list of supported tracing categories.
        categories: List[str]

    class getCertificateReturnValues(TypedDict):
        tableNames: List[str]

    class getComputedStyleForNodeReturnValues(TypedDict):
        # Computed style for the specified DOM node.
        computedStyle: List['CSSComputedStyleProperty']

    class getContentQuadsReturnValues(TypedDict):
        # Quads that describe node layout relative to viewport.
        quads: List[List[float]]

    class getCookiesReturnValues(TypedDict):
        # Array of cookie objects.
        cookies: List['Cookie']

    class getCredentialReturnValues(TypedDict):
        credential: 'Credential'

    class getCredentialsReturnValues(TypedDict):
        credentials: List['Credential']

    class getCurrentTimeReturnValues(TypedDict):
        # Current time of the page.
        currentTime: float

    class getDOMCountersReturnValues(TypedDict):
        documents: int
        nodes: int
        jsEventListeners: int

    class getDOMStorageItemsReturnValues(TypedDict):
        entries: List[List[str]]

    class getDatabaseTableNamesReturnValues(TypedDict):
        tableNames: List[str]

    class getDocumentReturnValues(TypedDict):
        # Resulting node.
        root: 'Node'

    class getDomainsReturnValues(TypedDict):
        # List of supported domains.
        domains: List['Domain']

    class getEncodedResponseReturnValues(TypedDict, total=False):
        # The encoded body as a base64 string. Omitted if sizeOnly is true.
        body: bytes
        # Size before re-encoding.
        originalSize: int
        # Size after re-encoding.
        encodedSize: int

    class getEventListenersReturnValues(TypedDict):
        # Array of relevant listeners.
        listeners: List['EventListener']

    class getFileInfoReturnValues(TypedDict):
        path: str

    class getFlattenedDocumentReturnValues(TypedDict):
        # Resulting node.
        nodes: List['Node']

    class getFrameOwnerReturnValues(TypedDict, total=False):
        # Resulting node.
        backendNodeId: int
        # Id of the node at given coordinates, only when enabled and requested document.
        nodeId: int

    class getFrameTreeReturnValues(TypedDict):
        # Present frame tree structure.
        frameTree: 'FrameTree'

    class getFramesWithManifestsReturnValues(TypedDict):
        # Array of frame identifiers with manifest urls for each frame containing a document associated with some application cache.
        frameIds: List['FrameWithManifest']

    class getFullAXTreeReturnValues(TypedDict):
        nodes: List['AXNode']

    class getHeapObjectIdReturnValues(TypedDict):
        # Id of the heap snapshot object corresponding to the passed remote object id.
        heapSnapshotObjectId: str

    class getHeapUsageReturnValues(TypedDict):
        # Used heap size in bytes.
        usedSize: float
        # Allocated heap size in bytes.
        totalSize: float

    class getHighlightObjectForTestReturnValues(TypedDict):
        # Highlight data for the node.
        highlight: Dict[str, str]

    class getHistogramReturnValues(TypedDict):
        # Histogram.
        histogram: 'Histogram'

    class getHistogramsReturnValues(TypedDict):
        # Histograms.
        histograms: List['Histogram']

    class getInfoReturnValues(TypedDict):
        # Information about the GPUs on the system.
        gpu: 'GPUInfo'
        # A platform-dependent description of the model of the machine. On Mac OS, this is, for example, 'MacBookPro'. Will be the empty string if not supported.
        modelName: str
        # A platform-dependent description of the version of the machine. On Mac OS, this is, for example, '10.1'. Will be the empty string if not supported.
        modelVersion: str
        # The command line string used to launch the browser. Will be the empty string if not supported.
        commandLine: str

    class getInlineStylesForNodeReturnValues(TypedDict, total=False):
        # Inline style for the specified DOM node.
        inlineStyle: 'CSSStyle'
        # Attribute-defined element style (e.g. resulting from "width=20 height=100%").
        attributesStyle: 'CSSStyle'

    class getInstallabilityErrorsReturnValues(TypedDict):
        errors: List[str]

    class getIsolateIdReturnValues(TypedDict):
        # The isolate id.
        id: str

    class getLayoutMetricsReturnValues(TypedDict):
        # Metrics relating to the layout viewport.
        layoutViewport: 'LayoutViewport'
        # Metrics relating to the visual viewport.
        visualViewport: 'VisualViewport'
        # Size of scrollable area.
        contentSize: 'Rect'

    class getManifestForFrameReturnValues(TypedDict):
        # Manifest URL for document in the given frame.
        manifestURL: str

    class getMatchedStylesForNodeReturnValues(TypedDict, total=False):
        # Inline style for the specified DOM node.
        inlineStyle: 'CSSStyle'
        # Attribute-defined element style (e.g. resulting from "width=20 height=100%").
        attributesStyle: 'CSSStyle'
        # CSS rules matching this node, from all applicable stylesheets.
        matchedCSSRules: List['RuleMatch']
        # Pseudo style matches for this node.
        pseudoElements: List['PseudoElementMatches']
        # A chain of inherited styles (from the immediate node parent up to the DOM tree root).
        inherited: List['InheritedStyleEntry']
        # A list of CSS keyframed animations matching this node.
        cssKeyframesRules: List['CSSKeyframesRule']

    class getMediaQueriesReturnValues(TypedDict):
        medias: List['CSSMedia']

    class getMetadataReturnValues(TypedDict):
        # the entries count
        entriesCount: float
        # the current value of key generator, to become the next inserted key into the object store. Valid if objectStore.autoIncrement is true.
        keyGeneratorValue: float

    class getMetricsReturnValues(TypedDict):
        # Current values for run-time metrics.
        metrics: List['Metric']

    class getNavigationHistoryReturnValues(TypedDict):
        # Index of the current navigation history entry.
        currentIndex: int
        # Array of navigation history entries.
        entries: List['NavigationEntry']

    class getNodeForLocationReturnValues(TypedDict, total=False):
        # Resulting node.
        backendNodeId: int
        # Frame this node belongs to.
        frameId: str
        # Id of the node at given coordinates, only when enabled and requested document.
        nodeId: int

    class getNodeStackTracesReturnValues(TypedDict, total=False):
        # Creation stack trace, if available.
        creation: 'StackTrace'

    class getObjectByHeapObjectIdReturnValues(TypedDict):
        # Evaluation result.
        result: 'RemoteObject'

    class getOuterHTMLReturnValues(TypedDict):
        # Outer HTML markup.
        outerHTML: str

    class getPartialAXTreeReturnValues(TypedDict):
        # The `Accessibility.AXNode` for this DOM node, if it exists, plus its ancestors, siblings and children, if requested.
        nodes: List['AXNode']

    class getPlatformFontsForNodeReturnValues(TypedDict):
        # Usage statistics for every employed platform font.
        fonts: List['PlatformFontUsage']

    class getPlaybackRateReturnValues(TypedDict):
        # Playback rate for animations on page.
        playbackRate: float

    class getPossibleBreakpointsReturnValues(TypedDict):
        # List of the possible breakpoint locations.
        locations: List['BreakLocation']

    class getProcessInfoReturnValues(TypedDict):
        # An array of process info blocks.
        processInfo: List['ProcessInfo']

    class getPropertiesReturnValues(TypedDict, total=False):
        # Object properties.
        result: List['PropertyDescriptor']
        # Internal object properties (only of the element itself).
        internalProperties: List['InternalPropertyDescriptor']
        # Object private properties.
        privateProperties: List['PrivatePropertyDescriptor']
        # Exception details.
        exceptionDetails: 'ExceptionDetails'

    class getRealtimeDataReturnValues(TypedDict):
        realtimeData: 'ContextRealtimeData'

    class getRelayoutBoundaryReturnValues(TypedDict):
        # Relayout boundary node id for the given node.
        nodeId: int

    class getRequestPostDataReturnValues(TypedDict):
        # Request body string, omitting files from multipart requests
        postData: str

    class getResourceContentReturnValues(TypedDict):
        # Resource content.
        content: str
        # True, if content was served as base64.
        base64Encoded: bool

    class getResourceTreeReturnValues(TypedDict):
        # Present frame / resource tree structure.
        frameTree: 'FrameResourceTree'

    class getResponseBodyForInterceptionReturnValues(TypedDict):
        # Response body.
        body: str
        # True, if content was sent as base64.
        base64Encoded: bool

    class getResponseBodyReturnValues(TypedDict):
        # Response body.
        body: str
        # True, if content was sent as base64.
        base64Encoded: bool

    class getRuntimeCallStatsReturnValues(TypedDict):
        # Collected counter information.
        result: List['CounterInfo']

    class getSamplingProfileReturnValues(TypedDict):
        # Return the sampling profile being collected.
        profile: 'SamplingHeapProfile'

    class getScriptSourceReturnValues(TypedDict, total=False):
        # Script source (empty in case of Wasm bytecode).
        scriptSource: str
        # Wasm bytecode.
        bytecode: bytes

    class getSearchResultsReturnValues(TypedDict):
        # Ids of the search result nodes.
        nodeIds: List[int]

    class getSnapshotReturnValues(TypedDict):
        # The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.
        domNodes: List['DOMNode']
        # The nodes in the layout tree.
        layoutTreeNodes: List['LayoutTreeNode']
        # Whitelisted ComputedStyle properties for each node in the layout tree.
        computedStyles: List['ComputedStyle']

    class getStackTraceReturnValues(TypedDict):
        stackTrace: 'StackTrace'

    class getStyleSheetTextReturnValues(TypedDict):
        # The stylesheet text.
        text: str

    class getTargetInfoReturnValues(TypedDict):
        targetInfo: 'TargetInfo'

    class getTargetsReturnValues(TypedDict):
        # The list of targets.
        targetInfos: List['TargetInfo']

    class getUsageAndQuotaReturnValues(TypedDict):
        # Storage usage (bytes).
        usage: float
        # Storage quota (bytes).
        quota: float
        # Storage usage per type (bytes).
        usageBreakdown: List['UsageForType']

    class getVersionReturnValues(TypedDict):
        # Protocol version.
        protocolVersion: str
        # Product name.
        product: str
        # Product revision.
        revision: str
        # User-Agent.
        userAgent: str
        # V8 version.
        jsVersion: str

    class getWasmBytecodeReturnValues(TypedDict):
        # Script source.
        bytecode: bytes

    class getWindowBoundsReturnValues(TypedDict):
        # Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
        bounds: 'Bounds'

    class getWindowForTargetReturnValues(TypedDict):
        # Browser window id.
        windowId: int
        # Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
        bounds: 'Bounds'

    class globalLexicalScopeNamesReturnValues(TypedDict):
        names: List[str]

    class heapStatsUpdatePayload(TypedDict):
        # An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment.
        statsUpdate: List[int]

    class indexedDBContentUpdatedPayload(TypedDict):
        # Origin to update.
        origin: str
        # Database to update.
        databaseName: str
        # ObjectStore to update.
        objectStoreName: str

    class indexedDBListUpdatedPayload(TypedDict):
        # Origin to update.
        origin: str

    class inlineStyleInvalidatedPayload(TypedDict):
        # Ids of the nodes for which the inline styles have been invalidated.
        nodeIds: List[int]

    class inspectNodeRequestedPayload(TypedDict):
        # Id of the node to inspect.
        backendNodeId: int

    class inspectRequestedPayload(TypedDict):
        object: 'RemoteObject'
        hints: Dict[str, str]

    class issueUpdatedPayload(TypedDict):
        issueMessage: str

    class javascriptDialogClosedPayload(TypedDict):
        # Whether dialog was confirmed.
        result: bool
        # User input in case of prompt.
        userInput: str

    class javascriptDialogOpeningPayload(TypedDict, total=False):
        # Frame url.
        url: str
        # Message that will be displayed by the dialog.
        message: str
        # Dialog type.
        type: Literal['alert', 'confirm', 'prompt', 'beforeunload']
        # True iff browser is capable showing or acting on the given dialog. When browser has no dialog handler for given target, calling alert while Page domain is engaged will stall the page execution. Execution can be resumed via calling Page.handleJavaScriptDialog.
        hasBrowserHandler: bool
        # Default dialog prompt.
        defaultPrompt: str

    class lastSeenObjectIdPayload(TypedDict):
        lastSeenObjectId: int
        timestamp: float

    class layerPaintedPayload(TypedDict):
        # The id of the painted layer.
        layerId: str
        # Clip rectangle.
        clip: 'Rect'

    class layerTreeDidChangePayload(TypedDict, total=False):
        # Layer tree, absent if not in the comspositing mode.
        layers: List['Layer']

    class lifecycleEventPayload(TypedDict):
        # Id of the frame.
        frameId: str
        # Loader identifier. Empty string if the request is fetched from worker.
        loaderId: str
        name: str
        timestamp: float

    class loadEventFiredPayload(TypedDict):
        timestamp: float

    class loadSnapshotReturnValues(TypedDict):
        # The id of the snapshot.
        snapshotId: str

    class loadingFailedPayload(TypedDict, total=False):
        # Request identifier.
        requestId: str
        # Timestamp.
        timestamp: float
        # Resource type.
        type: Literal['Document', 'Stylesheet', 'Image', 'Media', 'Font', 'Script', 'TextTrack', 'XHR', 'Fetch', 'EventSource', 'WebSocket', 'Manifest', 'SignedExchange', 'Ping', 'CSPViolationReport', 'Other']
        # User friendly error message.
        errorText: str
        # True if loading was canceled.
        canceled: bool
        # The reason why loading was blocked, if any.
        blockedReason: Literal['other', 'csp', 'mixed-content', 'origin', 'inspector', 'subresource-filter', 'content-type', 'collapsed-by-client']

    class loadingFinishedPayload(TypedDict, total=False):
        # Request identifier.
        requestId: str
        # Timestamp.
        timestamp: float
        # Total number of bytes received for this request.
        encodedDataLength: float
        # Set when 1) response was blocked by Cross-Origin Read Blocking and also 2) this needs to be reported to the DevTools console.
        shouldReportCorbBlocking: bool

    class makeSnapshotReturnValues(TypedDict):
        # The id of the layer snapshot.
        snapshotId: str

    class messageAddedPayload(TypedDict):
        # Console message that has been added.
        message: 'ConsoleMessage'

    class metricsPayload(TypedDict):
        # Current values of the metrics.
        metrics: List['Metric']
        # Timestamp title.
        title: str

    class moveToReturnValues(TypedDict):
        # New id of the moved node.
        nodeId: int

    class navigateReturnValues(TypedDict, total=False):
        # Frame id that has navigated (or failed to navigate)
        frameId: str
        # Loader identifier.
        loaderId: str
        # User friendly error message, present if and only if navigation has failed.
        errorText: str

    class navigatedWithinDocumentPayload(TypedDict):
        # Id of the frame.
        frameId: str
        # Frame's new url.
        url: str

    class needsBeginFramesChangedPayload(TypedDict):
        # True if BeginFrames are needed, false otherwise.
        needsBeginFrames: bool

    class networkStateUpdatedPayload(TypedDict):
        isNowOnline: bool

    class nodeHighlightRequestedPayload(TypedDict):
        nodeId: int

    class nodeParamConnectedPayload(TypedDict, total=False):
        contextId: str
        sourceId: str
        destinationId: str
        sourceOutputIndex: float

    class nodeParamDisconnectedPayload(TypedDict, total=False):
        contextId: str
        sourceId: str
        destinationId: str
        sourceOutputIndex: float

    class nodesConnectedPayload(TypedDict, total=False):
        contextId: str
        sourceId: str
        destinationId: str
        sourceOutputIndex: float
        destinationInputIndex: float

    class nodesDisconnectedPayload(TypedDict, total=False):
        contextId: str
        sourceId: str
        destinationId: str
        sourceOutputIndex: float
        destinationInputIndex: float

    class pausedPayload(TypedDict, total=False):
        # Call stack the virtual machine stopped on.
        callFrames: List['CallFrame']
        # Pause reason.
        reason: Literal['ambiguous', 'assert', 'debugCommand', 'DOM', 'EventListener', 'exception', 'instrumentation', 'OOM', 'other', 'promiseRejection', 'XHR']
        # Object containing break-specific auxiliary properties.
        data: Dict[str, str]
        # Hit breakpoints IDs
        hitBreakpoints: List[str]
        # Async stack trace, if any.
        asyncStackTrace: 'StackTrace'
        # Async stack trace, if any.
        asyncStackTraceId: 'StackTraceId'
        # Never present, will be removed.
        asyncCallStackTraceId: 'StackTraceId'

    class performSearchReturnValues(TypedDict):
        # Unique search session identifier.
        searchId: str
        # Number of search results.
        resultCount: int

    class playerEventsAddedPayload(TypedDict):
        playerId: str
        events: List['PlayerEvent']

    class playerPropertiesChangedPayload(TypedDict):
        playerId: str
        properties: List['PlayerProperty']

    class playersCreatedPayload(TypedDict):
        players: List[str]

    class printToPDFReturnValues(TypedDict, total=False):
        # Base64-encoded pdf data. Empty if |returnAsStream| is specified.
        data: bytes
        # A handle of the stream that holds resulting PDF data.
        stream: str

    class profileSnapshotReturnValues(TypedDict):
        # The array of paint profiles, one per run.
        timings: List[List[float]]

    class pseudoElementAddedPayload(TypedDict):
        # Pseudo element's parent element id.
        parentId: int
        # The added pseudo element.
        pseudoElement: 'Node'

    class pseudoElementRemovedPayload(TypedDict):
        # Pseudo element's parent element id.
        parentId: int
        # The removed pseudo element id.
        pseudoElementId: int

    class pushNodeByPathToFrontendReturnValues(TypedDict):
        # Id of the node for given path.
        nodeId: int

    class pushNodesByBackendIdsToFrontendReturnValues(TypedDict):
        # The array of ids of pushed nodes that correspond to the backend ids specified in backendNodeIds.
        nodeIds: List[int]

    class queryObjectsReturnValues(TypedDict):
        # Array with objects.
        objects: 'RemoteObject'

    class querySelectorAllReturnValues(TypedDict):
        # Query selector result.
        nodeIds: List[int]

    class querySelectorReturnValues(TypedDict):
        # Query selector result.
        nodeId: int

    class readReturnValues(TypedDict, total=False):
        # Set if the data is base64-encoded
        base64Encoded: bool
        # Data that were read.
        data: str
        # Set if the end-of-file condition occured while reading.
        eof: bool

    class receivedMessageFromTargetPayload(TypedDict, total=False):
        # Identifier of a session which sends a message.
        sessionId: str
        message: str
        # Deprecated.
        targetId: str

    class recordingStateChangedPayload(TypedDict):
        isRecording: bool
        service: Literal['backgroundFetch', 'backgroundSync', 'pushMessaging', 'notifications', 'paymentHandler', 'periodicBackgroundSync']

    class replaySnapshotReturnValues(TypedDict):
        # A data: URL for resulting image.
        dataURL: str

    class reportHeapSnapshotProgressPayload(TypedDict, total=False):
        done: int
        total: int
        finished: bool

    class requestCacheNamesReturnValues(TypedDict):
        # Caches for the security origin.
        caches: List['Cache']

    class requestCachedResponseReturnValues(TypedDict):
        # Response read from the cache.
        response: 'CachedResponse'

    class requestDataReturnValues(TypedDict):
        # Array of object store data entries.
        objectStoreDataEntries: List['DataEntry']
        # If true, there are more entries to fetch in the given range.
        hasMore: bool

    class requestDatabaseNamesReturnValues(TypedDict):
        # Database names for origin.
        databaseNames: List[str]

    class requestDatabaseReturnValues(TypedDict):
        # Database with an array of object stores.
        databaseWithObjectStores: 'DatabaseWithObjectStores'

    class requestEntriesReturnValues(TypedDict):
        # Array of object store data entries.
        cacheDataEntries: List['DataEntry']
        # Count of returned entries from this storage. If pathFilter is empty, it is the count of all entries from this storage.
        returnCount: float

    class requestInterceptedPayload(TypedDict, total=False):
        # Each request the page makes will have a unique id, however if any redirects are encountered while processing that fetch, they will be reported with the same id as the original fetch. Likewise if HTTP authentication is needed then the same fetch id will be used.
        interceptionId: str
        request: 'Request'
        # The id of the frame that initiated the request.
        frameId: str
        # How the requested resource will be used.
        resourceType: Literal['Document', 'Stylesheet', 'Image', 'Media', 'Font', 'Script', 'TextTrack', 'XHR', 'Fetch', 'EventSource', 'WebSocket', 'Manifest', 'SignedExchange', 'Ping', 'CSPViolationReport', 'Other']
        # Whether this is a navigation request, which can abort the navigation completely.
        isNavigationRequest: bool
        # Set if the request is a navigation that will result in a download. Only present after response is received from the server (i.e. HeadersReceived stage).
        isDownload: bool
        # Redirect location, only sent if a redirect was intercepted.
        redirectUrl: str
        # Details of the Authorization Challenge encountered. If this is set then continueInterceptedRequest must contain an authChallengeResponse.
        authChallenge: 'AuthChallenge'
        # Response error if intercepted at response stage or if redirect occurred while intercepting request.
        responseErrorReason: Literal['Failed', 'Aborted', 'TimedOut', 'AccessDenied', 'ConnectionClosed', 'ConnectionReset', 'ConnectionRefused', 'ConnectionAborted', 'ConnectionFailed', 'NameNotResolved', 'InternetDisconnected', 'AddressUnreachable', 'BlockedByClient', 'BlockedByResponse']
        # Response code if intercepted at response stage or if redirect occurred while intercepting request or auth retry occurred.
        responseStatusCode: int
        # Response headers if intercepted at the response stage or if redirect occurred while intercepting request or auth retry occurred.
        responseHeaders: Dict[str, str]
        # If the intercepted request had a corresponding requestWillBeSent event fired for it, then this requestId will be the same as the requestId present in the requestWillBeSent event.
        requestId: str

    class requestMemoryDumpReturnValues(TypedDict):
        # GUID of the resulting global memory dump.
        dumpGuid: str
        # True iff the global memory dump succeeded.
        success: bool

    class requestNodeReturnValues(TypedDict):
        # Node id for given object.
        nodeId: int

    class requestPausedPayload(TypedDict, total=False):
        # Each request the page makes will have a unique id.
        requestId: str
        # The details of the request.
        request: 'Request'
        # The id of the frame that initiated the request.
        frameId: str
        # How the requested resource will be used.
        resourceType: Literal['Document', 'Stylesheet', 'Image', 'Media', 'Font', 'Script', 'TextTrack', 'XHR', 'Fetch', 'EventSource', 'WebSocket', 'Manifest', 'SignedExchange', 'Ping', 'CSPViolationReport', 'Other']
        # Response error if intercepted at response stage.
        responseErrorReason: Literal['Failed', 'Aborted', 'TimedOut', 'AccessDenied', 'ConnectionClosed', 'ConnectionReset', 'ConnectionRefused', 'ConnectionAborted', 'ConnectionFailed', 'NameNotResolved', 'InternetDisconnected', 'AddressUnreachable', 'BlockedByClient', 'BlockedByResponse']
        # Response code if intercepted at response stage.
        responseStatusCode: int
        # Response headers if intercepted at the response stage.
        responseHeaders: List['HeaderEntry']
        # If the intercepted request had a corresponding Network.requestWillBeSent event fired for it, then this networkId will be the same as the requestId present in the requestWillBeSent event.
        networkId: str

    class requestServedFromCachePayload(TypedDict):
        # Request identifier.
        requestId: str

    class requestWillBeSentExtraInfoPayload(TypedDict):
        # Request identifier. Used to match this information to an existing requestWillBeSent event.
        requestId: str
        # A list of cookies which will not be sent with this request along with corresponding reasons for blocking.
        blockedCookies: List['BlockedCookieWithReason']
        # Raw request headers as they will be sent over the wire.
        headers: Dict[str, str]

    class requestWillBeSentPayload(TypedDict, total=False):
        # Request identifier.
        requestId: str
        # Loader identifier. Empty string if the request is fetched from worker.
        loaderId: str
        # URL of the document this request is loaded for.
        documentURL: str
        # Request data.
        request: 'Request'
        # Timestamp.
        timestamp: float
        # Timestamp.
        wallTime: float
        # Request initiator.
        initiator: 'Initiator'
        # Redirect response data.
        redirectResponse: 'Response'
        # Type of this resource.
        type: Literal['Document', 'Stylesheet', 'Image', 'Media', 'Font', 'Script', 'TextTrack', 'XHR', 'Fetch', 'EventSource', 'WebSocket', 'Manifest', 'SignedExchange', 'Ping', 'CSPViolationReport', 'Other']
        # Frame identifier.
        frameId: str
        # Whether the request is initiated by a user gesture. Defaults to false.
        hasUserGesture: bool

    class resolveAnimationReturnValues(TypedDict):
        # Corresponding remote object.
        remoteObject: 'RemoteObject'

    class resolveBlobReturnValues(TypedDict):
        # UUID of the specified Blob.
        uuid: str

    class resolveNodeReturnValues(TypedDict):
        # JavaScript object wrapper for given node.
        object: 'RemoteObject'

    class resourceChangedPriorityPayload(TypedDict):
        # Request identifier.
        requestId: str
        # New priority
        newPriority: Literal['VeryLow', 'Low', 'Medium', 'High', 'VeryHigh']
        # Timestamp.
        timestamp: float

    class responseReceivedExtraInfoPayload(TypedDict, total=False):
        # Request identifier. Used to match this information to another responseReceived event.
        requestId: str
        # A list of cookies which were not stored from the response along with the corresponding reasons for blocking. The cookies here may not be valid due to syntax errors, which are represented by the invalid cookie line string instead of a proper cookie.
        blockedCookies: List['BlockedSetCookieWithReason']
        # Raw response headers as they were received over the wire.
        headers: Dict[str, str]
        # Raw response header text as it was received over the wire. The raw text may not always be available, such as in the case of HTTP/2 or QUIC.
        headersText: str

    class responseReceivedPayload(TypedDict, total=False):
        # Request identifier.
        requestId: str
        # Loader identifier. Empty string if the request is fetched from worker.
        loaderId: str
        # Timestamp.
        timestamp: float
        # Resource type.
        type: Literal['Document', 'Stylesheet', 'Image', 'Media', 'Font', 'Script', 'TextTrack', 'XHR', 'Fetch', 'EventSource', 'WebSocket', 'Manifest', 'SignedExchange', 'Ping', 'CSPViolationReport', 'Other']
        # Response data.
        response: 'Response'
        # Frame identifier.
        frameId: str

    class restartFrameReturnValues(TypedDict, total=False):
        # New stack trace.
        callFrames: List['CallFrame']
        # Async stack trace, if any.
        asyncStackTrace: 'StackTrace'
        # Async stack trace, if any.
        asyncStackTraceId: 'StackTraceId'

    class runScriptReturnValues(TypedDict, total=False):
        # Run result.
        result: 'RemoteObject'
        # Exception details.
        exceptionDetails: 'ExceptionDetails'

    class screencastFramePayload(TypedDict):
        # Base64-encoded compressed image.
        data: bytes
        # Screencast frame metadata.
        metadata: 'ScreencastFrameMetadata'
        # Frame number.
        sessionId: int

    class screencastVisibilityChangedPayload(TypedDict):
        # True if the page is visible.
        visible: bool

    class screenshotRequestedPayload(TypedDict):
        # Viewport to capture, in device independent pixels (dip).
        viewport: 'Viewport'

    class scriptFailedToParsePayload(TypedDict, total=False):
        # Identifier of the script parsed.
        scriptId: str
        # URL or name of the script parsed (if any).
        url: str
        # Line offset of the script within the resource with given URL (for script tags).
        startLine: int
        # Column offset of the script within the resource with given URL.
        startColumn: int
        # Last line of the script.
        endLine: int
        # Length of the last line of the script.
        endColumn: int
        # Specifies script creation context.
        executionContextId: int
        # Content hash of the script.
        hash: str
        # Embedder-specific auxiliary data.
        executionContextAuxData: Dict[str, str]
        # URL of source map associated with script (if any).
        sourceMapURL: str
        # True, if this script has sourceURL.
        hasSourceURL: bool
        # True, if this script is ES6 module.
        isModule: bool
        # This script length.
        length: int
        # JavaScript top stack frame of where the script parsed event was triggered if available.
        stackTrace: 'StackTrace'

    class scriptParsedPayload(TypedDict, total=False):
        # Identifier of the script parsed.
        scriptId: str
        # URL or name of the script parsed (if any).
        url: str
        # Line offset of the script within the resource with given URL (for script tags).
        startLine: int
        # Column offset of the script within the resource with given URL.
        startColumn: int
        # Last line of the script.
        endLine: int
        # Length of the last line of the script.
        endColumn: int
        # Specifies script creation context.
        executionContextId: int
        # Content hash of the script.
        hash: str
        # Embedder-specific auxiliary data.
        executionContextAuxData: Dict[str, str]
        # True, if this script is generated as a result of the live edit operation.
        isLiveEdit: bool
        # URL of source map associated with script (if any).
        sourceMapURL: str
        # True, if this script has sourceURL.
        hasSourceURL: bool
        # True, if this script is ES6 module.
        isModule: bool
        # This script length.
        length: int
        # JavaScript top stack frame of where the script parsed event was triggered if available.
        stackTrace: 'StackTrace'

    class searchInContentReturnValues(TypedDict):
        # List of search matches.
        result: List['SearchMatch']

    class searchInResourceReturnValues(TypedDict):
        # List of search matches.
        result: List['SearchMatch']

    class searchInResponseBodyReturnValues(TypedDict):
        # List of search matches.
        result: List['SearchMatch']

    class securityStateChangedPayload(TypedDict, total=False):
        # Security state.
        securityState: Literal['unknown', 'neutral', 'insecure', 'secure', 'info', 'insecure-broken']
        # True if the page was loaded over cryptographic transport such as HTTPS.
        schemeIsCryptographic: bool
        # List of explanations for the security state. If the overall security state is `insecure` or `warning`, at least one corresponding explanation should be included.
        explanations: List['SecurityStateExplanation']
        # Information about insecure content on the page.
        insecureContentStatus: 'InsecureContentStatus'
        # Overrides user-visible description of the state.
        summary: str

    class setBreakpointByUrlReturnValues(TypedDict):
        # Id of the created breakpoint for further reference.
        breakpointId: str
        # List of the locations this breakpoint resolved into upon addition.
        locations: List['Location']

    class setBreakpointOnFunctionCallReturnValues(TypedDict):
        # Id of the created breakpoint for further reference.
        breakpointId: str

    class setBreakpointReturnValues(TypedDict):
        # Id of the created breakpoint for further reference.
        breakpointId: str
        # Location this breakpoint resolved into.
        actualLocation: 'Location'

    class setChildNodesPayload(TypedDict):
        # Parent node id to populate with children.
        parentId: int
        # Child nodes array.
        nodes: List['Node']

    class setCookieReturnValues(TypedDict):
        # True if successfully set cookie.
        success: bool

    class setInstrumentationBreakpointReturnValues(TypedDict):
        # Id of the created breakpoint for further reference.
        breakpointId: str

    class setKeyframeKeyReturnValues(TypedDict):
        # The resulting key text after modification.
        keyText: 'Value'

    class setMediaTextReturnValues(TypedDict):
        # The resulting CSS media rule after modification.
        media: 'CSSMedia'

    class setNodeNameReturnValues(TypedDict):
        # New node's id.
        nodeId: int

    class setRuleSelectorReturnValues(TypedDict):
        # The resulting selector list after modification.
        selectorList: 'SelectorList'

    class setScriptSourceReturnValues(TypedDict, total=False):
        # New stack trace in case editing has happened while VM was stopped.
        callFrames: List['CallFrame']
        # Whether current call stack  was modified after applying the changes.
        stackChanged: bool
        # Async stack trace, if any.
        asyncStackTrace: 'StackTrace'
        # Async stack trace, if any.
        asyncStackTraceId: 'StackTraceId'
        # Exception details if any.
        exceptionDetails: 'ExceptionDetails'

    class setStyleSheetTextReturnValues(TypedDict, total=False):
        # URL of source map associated with script (if any).
        sourceMapURL: str

    class setStyleTextsReturnValues(TypedDict):
        # The resulting styles after modification.
        styles: List['CSSStyle']

    class setVirtualTimePolicyReturnValues(TypedDict):
        # Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
        virtualTimeTicksBase: float

    class shadowRootPoppedPayload(TypedDict):
        # Host element id.
        hostId: int
        # Shadow root id.
        rootId: int

    class shadowRootPushedPayload(TypedDict):
        # Host element id.
        hostId: int
        # Shadow root.
        root: 'Node'

    class signedExchangeReceivedPayload(TypedDict):
        # Request identifier.
        requestId: str
        # Information about the signed exchange response.
        info: 'SignedExchangeInfo'

    class sinksUpdatedPayload(TypedDict):
        sinks: List['Sink']

    class snapshotCommandLogReturnValues(TypedDict):
        # The array of canvas function calls.
        commandLog: List[Dict[str, str]]

    class stopReturnValues(TypedDict):
        # Recorded profile.
        profile: 'Profile'

    class stopRuleUsageTrackingReturnValues(TypedDict):
        ruleUsage: List['RuleUsage']

    class stopSamplingReturnValues(TypedDict):
        # Recorded sampling heap profile.
        profile: 'SamplingHeapProfile'

    class styleSheetAddedPayload(TypedDict):
        # Added stylesheet metainfo.
        header: 'CSSStyleSheetHeader'

    class styleSheetChangedPayload(TypedDict):
        styleSheetId: str

    class styleSheetRemovedPayload(TypedDict):
        # Identifier of the removed stylesheet.
        styleSheetId: str

    class takeCoverageDeltaReturnValues(TypedDict):
        coverage: List['RuleUsage']

    class takePreciseCoverageReturnValues(TypedDict):
        # Coverage data for the current isolate.
        result: List['ScriptCoverage']

    class takeResponseBodyAsStreamReturnValues(TypedDict):
        stream: str

    class takeResponseBodyForInterceptionAsStreamReturnValues(TypedDict):
        stream: str

    class takeTypeProfileReturnValues(TypedDict):
        # Type profile for all scripts since startTypeProfile() was turned on.
        result: List['ScriptTypeProfile']

    class targetCrashedPayload(TypedDict):
        targetId: str
        # Termination status type.
        status: str
        # Termination error code.
        errorCode: int

    class targetCreatedPayload(TypedDict):
        targetInfo: 'TargetInfo'

    class targetDestroyedPayload(TypedDict):
        targetId: str

    class targetInfoChangedPayload(TypedDict):
        targetInfo: 'TargetInfo'

    class tracingCompletePayload(TypedDict, total=False):
        # Indicates whether some trace data is known to have been lost, e.g. because the trace ring buffer wrapped around.
        dataLossOccurred: bool
        # A handle of the stream that holds resulting trace data.
        stream: str
        # Trace data format of returned stream.
        traceFormat: Literal['json', 'proto']
        # Compression format of returned stream.
        streamCompression: Literal['none', 'gzip']

    class visibleSecurityStateChangedPayload(TypedDict):
        # Security state information about the page.
        visibleSecurityState: 'VisibleSecurityState'

    class webSocketClosedPayload(TypedDict):
        # Request identifier.
        requestId: str
        # Timestamp.
        timestamp: float

    class webSocketCreatedPayload(TypedDict, total=False):
        # Request identifier.
        requestId: str
        # WebSocket request URL.
        url: str
        # Request initiator.
        initiator: 'Initiator'

    class webSocketFrameErrorPayload(TypedDict):
        # Request identifier.
        requestId: str
        # Timestamp.
        timestamp: float
        # WebSocket error message.
        errorMessage: str

    class webSocketFrameReceivedPayload(TypedDict):
        # Request identifier.
        requestId: str
        # Timestamp.
        timestamp: float
        # WebSocket response data.
        response: 'WebSocketFrame'

    class webSocketFrameSentPayload(TypedDict):
        # Request identifier.
        requestId: str
        # Timestamp.
        timestamp: float
        # WebSocket response data.
        response: 'WebSocketFrame'

    class webSocketHandshakeResponseReceivedPayload(TypedDict):
        # Request identifier.
        requestId: str
        # Timestamp.
        timestamp: float
        # WebSocket response data.
        response: 'WebSocketResponse'

    class webSocketWillSendHandshakeRequestPayload(TypedDict):
        # Request identifier.
        requestId: str
        # Timestamp.
        timestamp: float
        # UTC Timestamp.
        wallTime: float
        # WebSocket request data.
        request: 'WebSocketRequest'

    class windowOpenPayload(TypedDict):
        # The URL for the new window.
        url: str
        # Window name.
        windowName: str
        # An array of enabled window features.
        windowFeatures: List[str]
        # Whether or not it was triggered by user gesture.
        userGesture: bool

    class workerErrorReportedPayload(TypedDict):
        errorMessage: 'ServiceWorkerErrorMessage'

    class workerRegistrationUpdatedPayload(TypedDict):
        registrations: List['ServiceWorkerRegistration']

    class workerVersionUpdatedPayload(TypedDict):
        versions: List['ServiceWorkerVersion']


    class Protocol:
        class Accessibility:
            # Unique accessibility node identifier.
            AXNodeId = str
            # Enum of possible property types.
            AXValueType = Literal['boolean', 'tristate', 'booleanOrUndefined', 'idref', 'idrefList', 'integer', 'node', 'nodeList', 'number', 'string', 'computedString', 'token', 'tokenList', 'domRelation', 'role', 'internalRole', 'valueUndefined']
            # Enum of possible property sources.
            AXValueSourceType = Literal['attribute', 'implicit', 'style', 'contents', 'placeholder', 'relatedElement']
            # Enum of possible native property sources (as a subtype of a particular AXValueSourceType).
            AXValueNativeSourceType = Literal['figcaption', 'label', 'labelfor', 'labelwrapped', 'legend', 'tablecaption', 'title', 'other']
            # A single source for a computed AX property.
            AXValueSource = Union[AXValueSource]
            AXRelatedNode = Union[AXRelatedNode]
            AXProperty = Union[AXProperty]
            # A single computed AX property.
            AXValue = Union[AXValue]
            # Values of AXProperty name: - from 'busy' to 'roledescription': states which apply to every AX node - from 'live' to 'root': attributes which apply to nodes in live regions - from 'autocomplete' to 'valuetext': attributes which apply to widgets - from 'checked' to 'selected': states which apply to widgets - from 'activedescendant' to 'owns' - relationships between elements other than parent/child/sibling.
            AXPropertyName = Literal['busy', 'disabled', 'editable', 'focusable', 'focused', 'hidden', 'hiddenRoot', 'invalid', 'keyshortcuts', 'settable', 'roledescription', 'live', 'atomic', 'relevant', 'root', 'autocomplete', 'hasPopup', 'level', 'multiselectable', 'orientation', 'multiline', 'readonly', 'required', 'valuemin', 'valuemax', 'valuetext', 'checked', 'expanded', 'modal', 'pressed', 'selected', 'activedescendant', 'controls', 'describedby', 'details', 'errormessage', 'flowto', 'labelledby', 'owns']
            # A node in the accessibility tree.
            AXNode = Union[AXNode]
            # Disables the accessibility domain.
            disableParameters = None
            # Disables the accessibility domain.
            disableReturnValues = None
            # Enables the accessibility domain which causes `AXNodeId`s to remain consistent between method calls. This turns on accessibility for the page, which can impact performance until accessibility is disabled.
            enableParameters = None
            # Enables the accessibility domain which causes `AXNodeId`s to remain consistent between method calls. This turns on accessibility for the page, which can impact performance until accessibility is disabled.
            enableReturnValues = None
            # Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.
            getPartialAXTreeParameters = None
            # Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.
            getPartialAXTreeReturnValues = Union[getPartialAXTreeReturnValues]
            # Fetches the entire accessibility tree
            getFullAXTreeParameters = None
            # Fetches the entire accessibility tree
            getFullAXTreeReturnValues = Union[getFullAXTreeReturnValues]

        class Animation:
            # Animation instance.
            Animation = Union[Animation]
            # AnimationEffect instance
            AnimationEffect = Union[AnimationEffect]
            # Keyframes Rule
            KeyframesRule = Union[KeyframesRule]
            # Keyframe Style
            KeyframeStyle = Union[KeyframeStyle]
            # Event for when an animation has been cancelled.
            animationCanceledPayload = Union[animationCanceledPayload]
            # Event for each animation that has been created.
            animationCreatedPayload = Union[animationCreatedPayload]
            # Event for animation that has been started.
            animationStartedPayload = Union[animationStartedPayload]
            # Disables animation domain notifications.
            disableParameters = None
            # Disables animation domain notifications.
            disableReturnValues = None
            # Enables animation domain notifications.
            enableParameters = None
            # Enables animation domain notifications.
            enableReturnValues = None
            # Returns the current time of the an animation.
            getCurrentTimeParameters = None
            # Returns the current time of the an animation.
            getCurrentTimeReturnValues = Union[getCurrentTimeReturnValues]
            # Gets the playback rate of the document timeline.
            getPlaybackRateParameters = None
            # Gets the playback rate of the document timeline.
            getPlaybackRateReturnValues = Union[getPlaybackRateReturnValues]
            # Releases a set of animations to no longer be manipulated.
            releaseAnimationsParameters = None
            # Releases a set of animations to no longer be manipulated.
            releaseAnimationsReturnValues = None
            # Gets the remote object of the Animation.
            resolveAnimationParameters = None
            # Gets the remote object of the Animation.
            resolveAnimationReturnValues = Union[resolveAnimationReturnValues]
            # Seek a set of animations to a particular time within each animation.
            seekAnimationsParameters = None
            # Seek a set of animations to a particular time within each animation.
            seekAnimationsReturnValues = None
            # Sets the paused state of a set of animations.
            setPausedParameters = None
            # Sets the paused state of a set of animations.
            setPausedReturnValues = None
            # Sets the playback rate of the document timeline.
            setPlaybackRateParameters = None
            # Sets the playback rate of the document timeline.
            setPlaybackRateReturnValues = None
            # Sets the timing of an animation node.
            setTimingParameters = None
            # Sets the timing of an animation node.
            setTimingReturnValues = None

        class ApplicationCache:
            # Detailed application cache resource information.
            ApplicationCacheResource = Union[ApplicationCacheResource]
            # Detailed application cache information.
            ApplicationCache = Union[ApplicationCache]
            # Frame identifier - manifest URL pair.
            FrameWithManifest = Union[FrameWithManifest]
            applicationCacheStatusUpdatedPayload = Union[applicationCacheStatusUpdatedPayload]
            networkStateUpdatedPayload = Union[networkStateUpdatedPayload]
            # Enables application cache domain notifications.
            enableParameters = None
            # Enables application cache domain notifications.
            enableReturnValues = None
            # Returns relevant application cache data for the document in given frame.
            getApplicationCacheForFrameParameters = None
            # Returns relevant application cache data for the document in given frame.
            getApplicationCacheForFrameReturnValues = Union[getApplicationCacheForFrameReturnValues]
            # Returns array of frame identifiers with manifest urls for each frame containing a document associated with some application cache.
            getFramesWithManifestsParameters = None
            # Returns array of frame identifiers with manifest urls for each frame containing a document associated with some application cache.
            getFramesWithManifestsReturnValues = Union[getFramesWithManifestsReturnValues]
            # Returns manifest URL for document in the given frame.
            getManifestForFrameParameters = None
            # Returns manifest URL for document in the given frame.
            getManifestForFrameReturnValues = Union[getManifestForFrameReturnValues]

        class Audits:
            # Audits domain allows investigation of page violations and possible improvements.
            # Returns the response body and size if it were re-encoded with the specified settings. Only applies to images.
            getEncodedResponseParameters = None
            # Returns the response body and size if it were re-encoded with the specified settings. Only applies to images.
            getEncodedResponseReturnValues = Union[getEncodedResponseReturnValues]

        class BackgroundService:
            # Defines events for background web platform features.
            # The Background Service that will be associated with the commands/events. Every Background Service operates independently, but they share the same API.
            ServiceName = Literal['backgroundFetch', 'backgroundSync', 'pushMessaging', 'notifications', 'paymentHandler', 'periodicBackgroundSync']
            # A key-value pair for additional event information to pass along.
            EventMetadata = Union[EventMetadata]
            BackgroundServiceEvent = Union[BackgroundServiceEvent]
            # Called when the recording state for the service has been updated.
            recordingStateChangedPayload = Union[recordingStateChangedPayload]
            # Called with all existing backgroundServiceEvents when enabled, and all new events afterwards if enabled and recording.
            backgroundServiceEventReceivedPayload = Union[backgroundServiceEventReceivedPayload]
            # Enables event updates for the service.
            startObservingParameters = None
            # Enables event updates for the service.
            startObservingReturnValues = None
            # Disables event updates for the service.
            stopObservingParameters = None
            # Disables event updates for the service.
            stopObservingReturnValues = None
            # Set the recording state for the service.
            setRecordingParameters = None
            # Set the recording state for the service.
            setRecordingReturnValues = None
            # Clears all stored data for the service.
            clearEventsParameters = None
            # Clears all stored data for the service.
            clearEventsReturnValues = None

        class Browser:
            # The Browser domain defines methods and events for browser managing.
            BrowserContextID = str
            WindowID = int
            # The state of the browser window.
            WindowState = Literal['normal', 'minimized', 'maximized', 'fullscreen']
            # Browser window bounds information
            Bounds = Union[Bounds]
            PermissionType = Literal['accessibilityEvents', 'audioCapture', 'backgroundSync', 'backgroundFetch', 'clipboardRead', 'clipboardWrite', 'durableStorage', 'flash', 'geolocation', 'midi', 'midiSysex', 'nfc', 'notifications', 'paymentHandler', 'periodicBackgroundSync', 'protectedMediaIdentifier', 'sensors', 'videoCapture', 'idleDetection', 'wakeLockScreen', 'wakeLockSystem']
            PermissionSetting = Literal['granted', 'denied', 'prompt']
            # Definition of PermissionDescriptor defined in the Permissions API: https://w3c.github.io/permissions/#dictdef-permissiondescriptor.
            PermissionDescriptor = Union[PermissionDescriptor]
            # Chrome histogram bucket.
            Bucket = Union[Bucket]
            # Chrome histogram.
            Histogram = Union[Histogram]
            # Set permission settings for given origin.
            setPermissionParameters = None
            # Set permission settings for given origin.
            setPermissionReturnValues = None
            # Grant specific permissions to the given origin and reject all others.
            grantPermissionsParameters = None
            # Grant specific permissions to the given origin and reject all others.
            grantPermissionsReturnValues = None
            # Reset all permission management for all origins.
            resetPermissionsParameters = None
            # Reset all permission management for all origins.
            resetPermissionsReturnValues = None
            # Close browser gracefully.
            closeParameters = None
            # Close browser gracefully.
            closeReturnValues = None
            # Crashes browser on the main thread.
            crashParameters = None
            # Crashes browser on the main thread.
            crashReturnValues = None
            # Crashes GPU process.
            crashGpuProcessParameters = None
            # Crashes GPU process.
            crashGpuProcessReturnValues = None
            # Returns version information.
            getVersionParameters = None
            # Returns version information.
            getVersionReturnValues = Union[getVersionReturnValues]
            # Returns the command line switches for the browser process if, and only if --enable-automation is on the commandline.
            getBrowserCommandLineParameters = None
            # Returns the command line switches for the browser process if, and only if --enable-automation is on the commandline.
            getBrowserCommandLineReturnValues = Union[getBrowserCommandLineReturnValues]
            # Get Chrome histograms.
            getHistogramsParameters = None
            # Get Chrome histograms.
            getHistogramsReturnValues = Union[getHistogramsReturnValues]
            # Get a Chrome histogram by name.
            getHistogramParameters = None
            # Get a Chrome histogram by name.
            getHistogramReturnValues = Union[getHistogramReturnValues]
            # Get position and size of the browser window.
            getWindowBoundsParameters = None
            # Get position and size of the browser window.
            getWindowBoundsReturnValues = Union[getWindowBoundsReturnValues]
            # Get the browser window that contains the devtools target.
            getWindowForTargetParameters = None
            # Get the browser window that contains the devtools target.
            getWindowForTargetReturnValues = Union[getWindowForTargetReturnValues]
            # Set position and/or size of the browser window.
            setWindowBoundsParameters = None
            # Set position and/or size of the browser window.
            setWindowBoundsReturnValues = None
            # Set dock tile details, platform-specific.
            setDockTileParameters = None
            # Set dock tile details, platform-specific.
            setDockTileReturnValues = None

        class CSS:
            # This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles) have an associated `id` used in subsequent operations on the related object. Each object type has a specific `id` structure, and those are not interchangeable between objects of different kinds. CSS objects can be loaded using the `get*ForNode()` calls (which accept a DOM node id). A client can also keep track of stylesheets via the `styleSheetAdded`/`styleSheetRemoved` events and subsequently load the required stylesheet contents using the `getStyleSheet[Text]()` methods.
            StyleSheetId = str
            # Stylesheet type: "injected" for stylesheets injected via extension, "user-agent" for user-agent stylesheets, "inspector" for stylesheets created by the inspector (i.e. those holding the "via inspector" rules), "regular" for regular stylesheets.
            StyleSheetOrigin = Literal['injected', 'user-agent', 'inspector', 'regular']
            # CSS rule collection for a single pseudo style.
            PseudoElementMatches = Union[PseudoElementMatches]
            # Inherited CSS rule collection from ancestor node.
            InheritedStyleEntry = Union[InheritedStyleEntry]
            # Match data for a CSS rule.
            RuleMatch = Union[RuleMatch]
            # Data for a simple selector (these are delimited by commas in a selector list).
            Value = Union[Value]
            # Selector list data.
            SelectorList = Union[SelectorList]
            # CSS stylesheet metainformation.
            CSSStyleSheetHeader = Union[CSSStyleSheetHeader]
            # CSS rule representation.
            CSSRule = Union[CSSRule]
            # CSS coverage information.
            RuleUsage = Union[RuleUsage]
            # Text range within a resource. All numbers are zero-based.
            SourceRange = Union[SourceRange]
            ShorthandEntry = Union[ShorthandEntry]
            CSSComputedStyleProperty = Union[CSSComputedStyleProperty]
            # CSS style representation.
            CSSStyle = Union[CSSStyle]
            # CSS property declaration data.
            CSSProperty = Union[CSSProperty]
            # CSS media rule descriptor.
            CSSMedia = Union[CSSMedia]
            # Media query descriptor.
            MediaQuery = Union[MediaQuery]
            # Media query expression descriptor.
            MediaQueryExpression = Union[MediaQueryExpression]
            # Information about amount of glyphs that were rendered with given font.
            PlatformFontUsage = Union[PlatformFontUsage]
            # Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions
            FontFace = Union[FontFace]
            # CSS keyframes rule representation.
            CSSKeyframesRule = Union[CSSKeyframesRule]
            # CSS keyframe rule representation.
            CSSKeyframeRule = Union[CSSKeyframeRule]
            # A descriptor of operation to mutate style declaration text.
            StyleDeclarationEdit = Union[StyleDeclarationEdit]
            # Fires whenever a web font is updated.  A non-empty font parameter indicates a successfully loaded web font
            fontsUpdatedPayload = Union[fontsUpdatedPayload]
            # Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features.
            mediaQueryResultChangedPayload = None
            # Fired whenever an active document stylesheet is added.
            styleSheetAddedPayload = Union[styleSheetAddedPayload]
            # Fired whenever a stylesheet is changed as a result of the client operation.
            styleSheetChangedPayload = Union[styleSheetChangedPayload]
            # Fired whenever an active document stylesheet is removed.
            styleSheetRemovedPayload = Union[styleSheetRemovedPayload]
            # Inserts a new rule with the given `ruleText` in a stylesheet with given `styleSheetId`, at the position specified by `location`.
            addRuleParameters = None
            # Inserts a new rule with the given `ruleText` in a stylesheet with given `styleSheetId`, at the position specified by `location`.
            addRuleReturnValues = Union[addRuleReturnValues]
            # Returns all class names from specified stylesheet.
            collectClassNamesParameters = None
            # Returns all class names from specified stylesheet.
            collectClassNamesReturnValues = Union[collectClassNamesReturnValues]
            # Creates a new special "via-inspector" stylesheet in the frame with given `frameId`.
            createStyleSheetParameters = None
            # Creates a new special "via-inspector" stylesheet in the frame with given `frameId`.
            createStyleSheetReturnValues = Union[createStyleSheetReturnValues]
            # Disables the CSS agent for the given page.
            disableParameters = None
            # Disables the CSS agent for the given page.
            disableReturnValues = None
            # Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received.
            enableParameters = None
            # Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received.
            enableReturnValues = None
            # Ensures that the given node will have specified pseudo-classes whenever its style is computed by the browser.
            forcePseudoStateParameters = None
            # Ensures that the given node will have specified pseudo-classes whenever its style is computed by the browser.
            forcePseudoStateReturnValues = None
            getBackgroundColorsParameters = None
            getBackgroundColorsReturnValues = Union[getBackgroundColorsReturnValues]
            # Returns the computed style for a DOM node identified by `nodeId`.
            getComputedStyleForNodeParameters = None
            # Returns the computed style for a DOM node identified by `nodeId`.
            getComputedStyleForNodeReturnValues = Union[getComputedStyleForNodeReturnValues]
            # Returns the styles defined inline (explicitly in the "style" attribute and implicitly, using DOM attributes) for a DOM node identified by `nodeId`.
            getInlineStylesForNodeParameters = None
            # Returns the styles defined inline (explicitly in the "style" attribute and implicitly, using DOM attributes) for a DOM node identified by `nodeId`.
            getInlineStylesForNodeReturnValues = Union[getInlineStylesForNodeReturnValues]
            # Returns requested styles for a DOM node identified by `nodeId`.
            getMatchedStylesForNodeParameters = None
            # Returns requested styles for a DOM node identified by `nodeId`.
            getMatchedStylesForNodeReturnValues = Union[getMatchedStylesForNodeReturnValues]
            # Returns all media queries parsed by the rendering engine.
            getMediaQueriesParameters = None
            # Returns all media queries parsed by the rendering engine.
            getMediaQueriesReturnValues = Union[getMediaQueriesReturnValues]
            # Requests information about platform fonts which we used to render child TextNodes in the given node.
            getPlatformFontsForNodeParameters = None
            # Requests information about platform fonts which we used to render child TextNodes in the given node.
            getPlatformFontsForNodeReturnValues = Union[getPlatformFontsForNodeReturnValues]
            # Returns the current textual content for a stylesheet.
            getStyleSheetTextParameters = None
            # Returns the current textual content for a stylesheet.
            getStyleSheetTextReturnValues = Union[getStyleSheetTextReturnValues]
            # Find a rule with the given active property for the given node and set the new value for this property
            setEffectivePropertyValueForNodeParameters = None
            # Find a rule with the given active property for the given node and set the new value for this property
            setEffectivePropertyValueForNodeReturnValues = None
            # Modifies the keyframe rule key text.
            setKeyframeKeyParameters = None
            # Modifies the keyframe rule key text.
            setKeyframeKeyReturnValues = Union[setKeyframeKeyReturnValues]
            # Modifies the rule selector.
            setMediaTextParameters = None
            # Modifies the rule selector.
            setMediaTextReturnValues = Union[setMediaTextReturnValues]
            # Modifies the rule selector.
            setRuleSelectorParameters = None
            # Modifies the rule selector.
            setRuleSelectorReturnValues = Union[setRuleSelectorReturnValues]
            # Sets the new stylesheet text.
            setStyleSheetTextParameters = None
            # Sets the new stylesheet text.
            setStyleSheetTextReturnValues = Union[setStyleSheetTextReturnValues]
            # Applies specified style edits one after another in the given order.
            setStyleTextsParameters = None
            # Applies specified style edits one after another in the given order.
            setStyleTextsReturnValues = Union[setStyleTextsReturnValues]
            # Enables the selector recording.
            startRuleUsageTrackingParameters = None
            # Enables the selector recording.
            startRuleUsageTrackingReturnValues = None
            # Stop tracking rule usage and return the list of rules that were used since last call to `takeCoverageDelta` (or since start of coverage instrumentation)
            stopRuleUsageTrackingParameters = None
            # Stop tracking rule usage and return the list of rules that were used since last call to `takeCoverageDelta` (or since start of coverage instrumentation)
            stopRuleUsageTrackingReturnValues = Union[stopRuleUsageTrackingReturnValues]
            # Obtain list of rules that became used since last call to this method (or since start of coverage instrumentation)
            takeCoverageDeltaParameters = None
            # Obtain list of rules that became used since last call to this method (or since start of coverage instrumentation)
            takeCoverageDeltaReturnValues = Union[takeCoverageDeltaReturnValues]

        class CacheStorage:
            # Unique identifier of the Cache object.
            CacheId = str
            # type of HTTP response cached
            CachedResponseType = Literal['basic', 'cors', 'default', 'error', 'opaqueResponse', 'opaqueRedirect']
            # Data entry.
            DataEntry = Union[DataEntry]
            # Cache identifier.
            Cache = Union[Cache]
            Header = Union[Header]
            # Cached response
            CachedResponse = Union[CachedResponse]
            # Deletes a cache.
            deleteCacheParameters = None
            # Deletes a cache.
            deleteCacheReturnValues = None
            # Deletes a cache entry.
            deleteEntryParameters = None
            # Deletes a cache entry.
            deleteEntryReturnValues = None
            # Requests cache names.
            requestCacheNamesParameters = None
            # Requests cache names.
            requestCacheNamesReturnValues = Union[requestCacheNamesReturnValues]
            # Fetches cache entry.
            requestCachedResponseParameters = None
            # Fetches cache entry.
            requestCachedResponseReturnValues = Union[requestCachedResponseReturnValues]
            # Requests data from cache.
            requestEntriesParameters = None
            # Requests data from cache.
            requestEntriesReturnValues = Union[requestEntriesReturnValues]

        class Cast:
            # A domain for interacting with Cast, Presentation API, and Remote Playback API functionalities.
            Sink = Union[Sink]
            # This is fired whenever the list of available sinks changes. A sink is a device or a software surface that you can cast to.
            sinksUpdatedPayload = Union[sinksUpdatedPayload]
            # This is fired whenever the outstanding issue/error message changes. |issueMessage| is empty if there is no issue.
            issueUpdatedPayload = Union[issueUpdatedPayload]
            # Starts observing for sinks that can be used for tab mirroring, and if set, sinks compatible with |presentationUrl| as well. When sinks are found, a |sinksUpdated| event is fired. Also starts observing for issue messages. When an issue is added or removed, an |issueUpdated| event is fired.
            enableParameters = None
            # Starts observing for sinks that can be used for tab mirroring, and if set, sinks compatible with |presentationUrl| as well. When sinks are found, a |sinksUpdated| event is fired. Also starts observing for issue messages. When an issue is added or removed, an |issueUpdated| event is fired.
            enableReturnValues = None
            # Stops observing for sinks and issues.
            disableParameters = None
            # Stops observing for sinks and issues.
            disableReturnValues = None
            # Sets a sink to be used when the web page requests the browser to choose a sink via Presentation API, Remote Playback API, or Cast SDK.
            setSinkToUseParameters = None
            # Sets a sink to be used when the web page requests the browser to choose a sink via Presentation API, Remote Playback API, or Cast SDK.
            setSinkToUseReturnValues = None
            # Starts mirroring the tab to the sink.
            startTabMirroringParameters = None
            # Starts mirroring the tab to the sink.
            startTabMirroringReturnValues = None
            # Stops the active Cast session on the sink.
            stopCastingParameters = None
            # Stops the active Cast session on the sink.
            stopCastingReturnValues = None

        class DOM:
            # This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an `id`. This `id` can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that `iframe` owner elements will return corresponding document elements as their child nodes.</p>
            # Unique DOM node identifier.
            NodeId = int
            # Unique DOM node identifier used to reference a node that may not have been pushed to the front-end.
            BackendNodeId = int
            # Backend node with a friendly name.
            BackendNode = Union[BackendNode]
            # Pseudo element type.
            PseudoType = Literal['first-line', 'first-letter', 'before', 'after', 'backdrop', 'selection', 'first-line-inherited', 'scrollbar', 'scrollbar-thumb', 'scrollbar-button', 'scrollbar-track', 'scrollbar-track-piece', 'scrollbar-corner', 'resizer', 'input-list-button']
            # Shadow root type.
            ShadowRootType = Literal['user-agent', 'open', 'closed']
            # DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type.
            Node = Union[Node]
            # A structure holding an RGBA color.
            RGBA = Union[RGBA]
            # An array of quad vertices, x immediately followed by y for each point, points clock-wise.
            Quad = List[float]
            # Box model.
            BoxModel = Union[BoxModel]
            # CSS Shape Outside details.
            ShapeOutsideInfo = Union[ShapeOutsideInfo]
            # Rectangle.
            Rect = Union[Rect]
            # Fired when `Element`'s attribute is modified.
            attributeModifiedPayload = Union[attributeModifiedPayload]
            # Fired when `Element`'s attribute is removed.
            attributeRemovedPayload = Union[attributeRemovedPayload]
            # Mirrors `DOMCharacterDataModified` event.
            characterDataModifiedPayload = Union[characterDataModifiedPayload]
            # Fired when `Container`'s child node count has changed.
            childNodeCountUpdatedPayload = Union[childNodeCountUpdatedPayload]
            # Mirrors `DOMNodeInserted` event.
            childNodeInsertedPayload = Union[childNodeInsertedPayload]
            # Mirrors `DOMNodeRemoved` event.
            childNodeRemovedPayload = Union[childNodeRemovedPayload]
            # Called when distrubution is changed.
            distributedNodesUpdatedPayload = Union[distributedNodesUpdatedPayload]
            # Fired when `Document` has been totally updated. Node ids are no longer valid.
            documentUpdatedPayload = None
            # Fired when `Element`'s inline style is modified via a CSS property modification.
            inlineStyleInvalidatedPayload = Union[inlineStyleInvalidatedPayload]
            # Called when a pseudo element is added to an element.
            pseudoElementAddedPayload = Union[pseudoElementAddedPayload]
            # Called when a pseudo element is removed from an element.
            pseudoElementRemovedPayload = Union[pseudoElementRemovedPayload]
            # Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids.
            setChildNodesPayload = Union[setChildNodesPayload]
            # Called when shadow root is popped from the element.
            shadowRootPoppedPayload = Union[shadowRootPoppedPayload]
            # Called when shadow root is pushed into the element.
            shadowRootPushedPayload = Union[shadowRootPushedPayload]
            # Collects class names for the node with given id and all of it's child nodes.
            collectClassNamesFromSubtreeParameters = None
            # Collects class names for the node with given id and all of it's child nodes.
            collectClassNamesFromSubtreeReturnValues = Union[collectClassNamesFromSubtreeReturnValues]
            # Creates a deep copy of the specified node and places it into the target container before the given anchor.
            copyToParameters = None
            # Creates a deep copy of the specified node and places it into the target container before the given anchor.
            copyToReturnValues = Union[copyToReturnValues]
            # Describes node given its id, does not require domain to be enabled. Does not start tracking any objects, can be used for automation.
            describeNodeParameters = None
            # Describes node given its id, does not require domain to be enabled. Does not start tracking any objects, can be used for automation.
            describeNodeReturnValues = Union[describeNodeReturnValues]
            # Disables DOM agent for the given page.
            disableParameters = None
            # Disables DOM agent for the given page.
            disableReturnValues = None
            # Discards search results from the session with the given id. `getSearchResults` should no longer be called for that search.
            discardSearchResultsParameters = None
            # Discards search results from the session with the given id. `getSearchResults` should no longer be called for that search.
            discardSearchResultsReturnValues = None
            # Enables DOM agent for the given page.
            enableParameters = None
            # Enables DOM agent for the given page.
            enableReturnValues = None
            # Focuses the given element.
            focusParameters = None
            # Focuses the given element.
            focusReturnValues = None
            # Returns attributes for the specified node.
            getAttributesParameters = None
            # Returns attributes for the specified node.
            getAttributesReturnValues = Union[getAttributesReturnValues]
            # Returns boxes for the given node.
            getBoxModelParameters = None
            # Returns boxes for the given node.
            getBoxModelReturnValues = Union[getBoxModelReturnValues]
            # Returns quads that describe node position on the page. This method might return multiple quads for inline nodes.
            getContentQuadsParameters = None
            # Returns quads that describe node position on the page. This method might return multiple quads for inline nodes.
            getContentQuadsReturnValues = Union[getContentQuadsReturnValues]
            # Returns the root DOM node (and optionally the subtree) to the caller.
            getDocumentParameters = None
            # Returns the root DOM node (and optionally the subtree) to the caller.
            getDocumentReturnValues = Union[getDocumentReturnValues]
            # Returns the root DOM node (and optionally the subtree) to the caller.
            getFlattenedDocumentParameters = None
            # Returns the root DOM node (and optionally the subtree) to the caller.
            getFlattenedDocumentReturnValues = Union[getFlattenedDocumentReturnValues]
            # Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is either returned or not.
            getNodeForLocationParameters = None
            # Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is either returned or not.
            getNodeForLocationReturnValues = Union[getNodeForLocationReturnValues]
            # Returns node's HTML markup.
            getOuterHTMLParameters = None
            # Returns node's HTML markup.
            getOuterHTMLReturnValues = Union[getOuterHTMLReturnValues]
            # Returns the id of the nearest ancestor that is a relayout boundary.
            getRelayoutBoundaryParameters = None
            # Returns the id of the nearest ancestor that is a relayout boundary.
            getRelayoutBoundaryReturnValues = Union[getRelayoutBoundaryReturnValues]
            # Returns search results from given `fromIndex` to given `toIndex` from the search with the given identifier.
            getSearchResultsParameters = None
            # Returns search results from given `fromIndex` to given `toIndex` from the search with the given identifier.
            getSearchResultsReturnValues = Union[getSearchResultsReturnValues]
            # Hides any highlight.
            hideHighlightParameters = None
            # Hides any highlight.
            hideHighlightReturnValues = None
            # Highlights DOM node.
            highlightNodeParameters = None
            # Highlights DOM node.
            highlightNodeReturnValues = None
            # Highlights given rectangle.
            highlightRectParameters = None
            # Highlights given rectangle.
            highlightRectReturnValues = None
            # Marks last undoable state.
            markUndoableStateParameters = None
            # Marks last undoable state.
            markUndoableStateReturnValues = None
            # Moves node into the new container, places it before the given anchor.
            moveToParameters = None
            # Moves node into the new container, places it before the given anchor.
            moveToReturnValues = Union[moveToReturnValues]
            # Searches for a given string in the DOM tree. Use `getSearchResults` to access search results or `cancelSearch` to end this search session.
            performSearchParameters = None
            # Searches for a given string in the DOM tree. Use `getSearchResults` to access search results or `cancelSearch` to end this search session.
            performSearchReturnValues = Union[performSearchReturnValues]
            # Requests that the node is sent to the caller given its path. // FIXME, use XPath
            pushNodeByPathToFrontendParameters = None
            # Requests that the node is sent to the caller given its path. // FIXME, use XPath
            pushNodeByPathToFrontendReturnValues = Union[pushNodeByPathToFrontendReturnValues]
            # Requests that a batch of nodes is sent to the caller given their backend node ids.
            pushNodesByBackendIdsToFrontendParameters = None
            # Requests that a batch of nodes is sent to the caller given their backend node ids.
            pushNodesByBackendIdsToFrontendReturnValues = Union[pushNodesByBackendIdsToFrontendReturnValues]
            # Executes `querySelector` on a given node.
            querySelectorParameters = None
            # Executes `querySelector` on a given node.
            querySelectorReturnValues = Union[querySelectorReturnValues]
            # Executes `querySelectorAll` on a given node.
            querySelectorAllParameters = None
            # Executes `querySelectorAll` on a given node.
            querySelectorAllReturnValues = Union[querySelectorAllReturnValues]
            # Re-does the last undone action.
            redoParameters = None
            # Re-does the last undone action.
            redoReturnValues = None
            # Removes attribute with given name from an element with given id.
            removeAttributeParameters = None
            # Removes attribute with given name from an element with given id.
            removeAttributeReturnValues = None
            # Removes node with given id.
            removeNodeParameters = None
            # Removes node with given id.
            removeNodeReturnValues = None
            # Requests that children of the node with given id are returned to the caller in form of `setChildNodes` events where not only immediate children are retrieved, but all children down to the specified depth.
            requestChildNodesParameters = None
            # Requests that children of the node with given id are returned to the caller in form of `setChildNodes` events where not only immediate children are retrieved, but all children down to the specified depth.
            requestChildNodesReturnValues = None
            # Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of `setChildNodes` notifications.
            requestNodeParameters = None
            # Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of `setChildNodes` notifications.
            requestNodeReturnValues = Union[requestNodeReturnValues]
            # Resolves the JavaScript node object for a given NodeId or BackendNodeId.
            resolveNodeParameters = None
            # Resolves the JavaScript node object for a given NodeId or BackendNodeId.
            resolveNodeReturnValues = Union[resolveNodeReturnValues]
            # Sets attribute for an element with given id.
            setAttributeValueParameters = None
            # Sets attribute for an element with given id.
            setAttributeValueReturnValues = None
            # Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs.
            setAttributesAsTextParameters = None
            # Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs.
            setAttributesAsTextReturnValues = None
            # Sets files for the given file input element.
            setFileInputFilesParameters = None
            # Sets files for the given file input element.
            setFileInputFilesReturnValues = None
            # Sets if stack traces should be captured for Nodes. See `Node.getNodeStackTraces`. Default is disabled.
            setNodeStackTracesEnabledParameters = None
            # Sets if stack traces should be captured for Nodes. See `Node.getNodeStackTraces`. Default is disabled.
            setNodeStackTracesEnabledReturnValues = None
            # Gets stack traces associated with a Node. As of now, only provides stack trace for Node creation.
            getNodeStackTracesParameters = None
            # Gets stack traces associated with a Node. As of now, only provides stack trace for Node creation.
            getNodeStackTracesReturnValues = Union[getNodeStackTracesReturnValues]
            # Returns file information for the given File wrapper.
            getFileInfoParameters = None
            # Returns file information for the given File wrapper.
            getFileInfoReturnValues = Union[getFileInfoReturnValues]
            # Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            setInspectedNodeParameters = None
            # Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            setInspectedNodeReturnValues = None
            # Sets node name for a node with given id.
            setNodeNameParameters = None
            # Sets node name for a node with given id.
            setNodeNameReturnValues = Union[setNodeNameReturnValues]
            # Sets node value for a node with given id.
            setNodeValueParameters = None
            # Sets node value for a node with given id.
            setNodeValueReturnValues = None
            # Sets node HTML markup, returns new node id.
            setOuterHTMLParameters = None
            # Sets node HTML markup, returns new node id.
            setOuterHTMLReturnValues = None
            # Undoes the last performed action.
            undoParameters = None
            # Undoes the last performed action.
            undoReturnValues = None
            # Returns iframe node that owns iframe with the given domain.
            getFrameOwnerParameters = None
            # Returns iframe node that owns iframe with the given domain.
            getFrameOwnerReturnValues = Union[getFrameOwnerReturnValues]

        class DOMDebugger:
            # DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript execution will stop on these operations as if there was a regular breakpoint set.
            # DOM breakpoint type.
            DOMBreakpointType = Literal['subtree-modified', 'attribute-modified', 'node-removed']
            # Object event listener.
            EventListener = Union[EventListener]
            # Returns event listeners of the given object.
            getEventListenersParameters = None
            # Returns event listeners of the given object.
            getEventListenersReturnValues = Union[getEventListenersReturnValues]
            # Removes DOM breakpoint that was set using `setDOMBreakpoint`.
            removeDOMBreakpointParameters = None
            # Removes DOM breakpoint that was set using `setDOMBreakpoint`.
            removeDOMBreakpointReturnValues = None
            # Removes breakpoint on particular DOM event.
            removeEventListenerBreakpointParameters = None
            # Removes breakpoint on particular DOM event.
            removeEventListenerBreakpointReturnValues = None
            # Removes breakpoint on particular native event.
            removeInstrumentationBreakpointParameters = None
            # Removes breakpoint on particular native event.
            removeInstrumentationBreakpointReturnValues = None
            # Removes breakpoint from XMLHttpRequest.
            removeXHRBreakpointParameters = None
            # Removes breakpoint from XMLHttpRequest.
            removeXHRBreakpointReturnValues = None
            # Sets breakpoint on particular operation with DOM.
            setDOMBreakpointParameters = None
            # Sets breakpoint on particular operation with DOM.
            setDOMBreakpointReturnValues = None
            # Sets breakpoint on particular DOM event.
            setEventListenerBreakpointParameters = None
            # Sets breakpoint on particular DOM event.
            setEventListenerBreakpointReturnValues = None
            # Sets breakpoint on particular native event.
            setInstrumentationBreakpointParameters = None
            # Sets breakpoint on particular native event.
            setInstrumentationBreakpointReturnValues = None
            # Sets breakpoint on XMLHttpRequest.
            setXHRBreakpointParameters = None
            # Sets breakpoint on XMLHttpRequest.
            setXHRBreakpointReturnValues = None

        class DOMSnapshot:
            # This domain facilitates obtaining document snapshots with DOM, layout, and style information.
            # A Node in the DOM tree.
            DOMNode = Union[DOMNode]
            # Details of post layout rendered text positions. The exact layout should not be regarded as stable and may change between versions.
            InlineTextBox = Union[InlineTextBox]
            # Details of an element in the DOM tree with a LayoutObject.
            LayoutTreeNode = Union[LayoutTreeNode]
            # A subset of the full ComputedStyle as defined by the request whitelist.
            ComputedStyle = Union[ComputedStyle]
            # A name/value pair.
            NameValue = Union[NameValue]
            # Index of the string in the strings table.
            StringIndex = int
            # Index of the string in the strings table.
            ArrayOfStrings = List[int]
            # Data that is only present on rare nodes.
            RareStringData = Union[RareStringData]
            RareBooleanData = Union[RareBooleanData]
            RareIntegerData = Union[RareIntegerData]
            Rectangle = List[float]
            # Document snapshot.
            DocumentSnapshot = Union[DocumentSnapshot]
            # Table containing nodes.
            NodeTreeSnapshot = Union[NodeTreeSnapshot]
            # Table of details of an element in the DOM tree with a LayoutObject.
            LayoutTreeSnapshot = Union[LayoutTreeSnapshot]
            # Table of details of the post layout rendered text positions. The exact layout should not be regarded as stable and may change between versions.
            TextBoxSnapshot = Union[TextBoxSnapshot]
            # Disables DOM snapshot agent for the given page.
            disableParameters = None
            # Disables DOM snapshot agent for the given page.
            disableReturnValues = None
            # Enables DOM snapshot agent for the given page.
            enableParameters = None
            # Enables DOM snapshot agent for the given page.
            enableReturnValues = None
            # Returns a document snapshot, including the full DOM tree of the root node (including iframes, template contents, and imported documents) in a flattened array, as well as layout and white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is flattened.
            getSnapshotParameters = None
            # Returns a document snapshot, including the full DOM tree of the root node (including iframes, template contents, and imported documents) in a flattened array, as well as layout and white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is flattened.
            getSnapshotReturnValues = Union[getSnapshotReturnValues]
            # Returns a document snapshot, including the full DOM tree of the root node (including iframes, template contents, and imported documents) in a flattened array, as well as layout and white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is flattened.
            captureSnapshotParameters = None
            # Returns a document snapshot, including the full DOM tree of the root node (including iframes, template contents, and imported documents) in a flattened array, as well as layout and white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is flattened.
            captureSnapshotReturnValues = Union[captureSnapshotReturnValues]

        class DOMStorage:
            # Query and modify DOM storage.
            # DOM Storage identifier.
            StorageId = Union[StorageId]
            # DOM Storage item.
            Item = List[str]
            domStorageItemAddedPayload = Union[domStorageItemAddedPayload]
            domStorageItemRemovedPayload = Union[domStorageItemRemovedPayload]
            domStorageItemUpdatedPayload = Union[domStorageItemUpdatedPayload]
            domStorageItemsClearedPayload = Union[domStorageItemsClearedPayload]
            clearParameters = None
            clearReturnValues = None
            # Disables storage tracking, prevents storage events from being sent to the client.
            disableParameters = None
            # Disables storage tracking, prevents storage events from being sent to the client.
            disableReturnValues = None
            # Enables storage tracking, storage events will now be delivered to the client.
            enableParameters = None
            # Enables storage tracking, storage events will now be delivered to the client.
            enableReturnValues = None
            getDOMStorageItemsParameters = None
            getDOMStorageItemsReturnValues = Union[getDOMStorageItemsReturnValues]
            removeDOMStorageItemParameters = None
            removeDOMStorageItemReturnValues = None
            setDOMStorageItemParameters = None
            setDOMStorageItemReturnValues = None

        class Database:
            # Unique identifier of Database object.
            DatabaseId = str
            # Database object.
            Database = Union[Database]
            # Database error.
            Error = Union[Error]
            addDatabasePayload = Union[addDatabasePayload]
            # Disables database tracking, prevents database events from being sent to the client.
            disableParameters = None
            # Disables database tracking, prevents database events from being sent to the client.
            disableReturnValues = None
            # Enables database tracking, database events will now be delivered to the client.
            enableParameters = None
            # Enables database tracking, database events will now be delivered to the client.
            enableReturnValues = None
            executeSQLParameters = None
            executeSQLReturnValues = Union[executeSQLReturnValues]
            getDatabaseTableNamesParameters = None
            getDatabaseTableNamesReturnValues = Union[getDatabaseTableNamesReturnValues]

        class DeviceOrientation:
            # Clears the overridden Device Orientation.
            clearDeviceOrientationOverrideParameters = None
            # Clears the overridden Device Orientation.
            clearDeviceOrientationOverrideReturnValues = None
            # Overrides the Device Orientation.
            setDeviceOrientationOverrideParameters = None
            # Overrides the Device Orientation.
            setDeviceOrientationOverrideReturnValues = None

        class Emulation:
            # This domain emulates different environments for the page.
            # Screen orientation.
            ScreenOrientation = Union[ScreenOrientation]
            MediaFeature = Union[MediaFeature]
            # advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to allow the next delayed task (if any) to run; pause: The virtual time base may not advance; pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending resource fetches.
            VirtualTimePolicy = Literal['advance', 'pause', 'pauseIfNetworkFetchesPending']
            # Notification sent after the virtual time budget for the current VirtualTimePolicy has run out.
            virtualTimeBudgetExpiredPayload = None
            # Tells whether emulation is supported.
            canEmulateParameters = None
            # Tells whether emulation is supported.
            canEmulateReturnValues = Union[canEmulateReturnValues]
            # Clears the overriden device metrics.
            clearDeviceMetricsOverrideParameters = None
            # Clears the overriden device metrics.
            clearDeviceMetricsOverrideReturnValues = None
            # Clears the overriden Geolocation Position and Error.
            clearGeolocationOverrideParameters = None
            # Clears the overriden Geolocation Position and Error.
            clearGeolocationOverrideReturnValues = None
            # Requests that page scale factor is reset to initial values.
            resetPageScaleFactorParameters = None
            # Requests that page scale factor is reset to initial values.
            resetPageScaleFactorReturnValues = None
            # Enables or disables simulating a focused and active page.
            setFocusEmulationEnabledParameters = None
            # Enables or disables simulating a focused and active page.
            setFocusEmulationEnabledReturnValues = None
            # Enables CPU throttling to emulate slow CPUs.
            setCPUThrottlingRateParameters = None
            # Enables CPU throttling to emulate slow CPUs.
            setCPUThrottlingRateReturnValues = None
            # Sets or clears an override of the default background color of the frame. This override is used if the content does not specify one.
            setDefaultBackgroundColorOverrideParameters = None
            # Sets or clears an override of the default background color of the frame. This override is used if the content does not specify one.
            setDefaultBackgroundColorOverrideReturnValues = None
            # Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results).
            setDeviceMetricsOverrideParameters = None
            # Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results).
            setDeviceMetricsOverrideReturnValues = None
            setScrollbarsHiddenParameters = None
            setScrollbarsHiddenReturnValues = None
            setDocumentCookieDisabledParameters = None
            setDocumentCookieDisabledReturnValues = None
            setEmitTouchEventsForMouseParameters = None
            setEmitTouchEventsForMouseReturnValues = None
            # Emulates the given media type or media feature for CSS media queries.
            setEmulatedMediaParameters = None
            # Emulates the given media type or media feature for CSS media queries.
            setEmulatedMediaReturnValues = None
            # Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.
            setGeolocationOverrideParameters = None
            # Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.
            setGeolocationOverrideReturnValues = None
            # Overrides value returned by the javascript navigator object.
            setNavigatorOverridesParameters = None
            # Overrides value returned by the javascript navigator object.
            setNavigatorOverridesReturnValues = None
            # Sets a specified page scale factor.
            setPageScaleFactorParameters = None
            # Sets a specified page scale factor.
            setPageScaleFactorReturnValues = None
            # Switches script execution in the page.
            setScriptExecutionDisabledParameters = None
            # Switches script execution in the page.
            setScriptExecutionDisabledReturnValues = None
            # Enables touch on platforms which do not support them.
            setTouchEmulationEnabledParameters = None
            # Enables touch on platforms which do not support them.
            setTouchEmulationEnabledReturnValues = None
            # Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets the current virtual time policy.  Note this supersedes any previous time budget.
            setVirtualTimePolicyParameters = None
            # Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets the current virtual time policy.  Note this supersedes any previous time budget.
            setVirtualTimePolicyReturnValues = Union[setVirtualTimePolicyReturnValues]
            # Overrides default host system timezone with the specified one.
            setTimezoneOverrideParameters = None
            # Overrides default host system timezone with the specified one.
            setTimezoneOverrideReturnValues = None
            # Resizes the frame/viewport of the page. Note that this does not affect the frame's container (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported on Android.
            setVisibleSizeParameters = None
            # Resizes the frame/viewport of the page. Note that this does not affect the frame's container (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported on Android.
            setVisibleSizeReturnValues = None
            # Allows overriding user agent with the given string.
            setUserAgentOverrideParameters = None
            # Allows overriding user agent with the given string.
            setUserAgentOverrideReturnValues = None

        class HeadlessExperimental:
            # This domain provides experimental commands only supported in headless mode.
            # Encoding options for a screenshot.
            ScreenshotParams = Union[ScreenshotParams]
            # Issued when the target starts or stops needing BeginFrames. Deprecated. Issue beginFrame unconditionally instead and use result from beginFrame to detect whether the frames were suppressed.
            needsBeginFramesChangedPayload = Union[needsBeginFramesChangedPayload]
            # Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a screenshot from the resulting frame. Requires that the target was created with enabled BeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also https://goo.gl/3zHXhB for more background.
            beginFrameParameters = None
            # Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a screenshot from the resulting frame. Requires that the target was created with enabled BeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also https://goo.gl/3zHXhB for more background.
            beginFrameReturnValues = Union[beginFrameReturnValues]
            # Disables headless events for the target.
            disableParameters = None
            # Disables headless events for the target.
            disableReturnValues = None
            # Enables headless events for the target.
            enableParameters = None
            # Enables headless events for the target.
            enableReturnValues = None

        class IO:
            # Input/Output operations for streams produced by DevTools.
            # This is either obtained from another method or specifed as `blob:&lt;uuid&gt;` where `&lt;uuid&gt` is an UUID of a Blob.
            StreamHandle = str
            # Close the stream, discard any temporary backing storage.
            closeParameters = None
            # Close the stream, discard any temporary backing storage.
            closeReturnValues = None
            # Read a chunk of the stream
            readParameters = None
            # Read a chunk of the stream
            readReturnValues = Union[readReturnValues]
            # Return UUID of Blob object specified by a remote object id.
            resolveBlobParameters = None
            # Return UUID of Blob object specified by a remote object id.
            resolveBlobReturnValues = Union[resolveBlobReturnValues]

        class IndexedDB:
            # Database with an array of object stores.
            DatabaseWithObjectStores = Union[DatabaseWithObjectStores]
            # Object store.
            ObjectStore = Union[ObjectStore]
            # Object store index.
            ObjectStoreIndex = Union[ObjectStoreIndex]
            # Key.
            Key = Union[Key]
            # Key range.
            KeyRange = Union[KeyRange]
            # Data entry.
            DataEntry = Union[DataEntry]
            # Key path.
            KeyPath = Union[KeyPath]
            # Clears all entries from an object store.
            clearObjectStoreParameters = None
            # Clears all entries from an object store.
            clearObjectStoreReturnValues = None
            # Deletes a database.
            deleteDatabaseParameters = None
            # Deletes a database.
            deleteDatabaseReturnValues = None
            # Delete a range of entries from an object store
            deleteObjectStoreEntriesParameters = None
            # Delete a range of entries from an object store
            deleteObjectStoreEntriesReturnValues = None
            # Disables events from backend.
            disableParameters = None
            # Disables events from backend.
            disableReturnValues = None
            # Enables events from backend.
            enableParameters = None
            # Enables events from backend.
            enableReturnValues = None
            # Requests data from object store or index.
            requestDataParameters = None
            # Requests data from object store or index.
            requestDataReturnValues = Union[requestDataReturnValues]
            # Gets metadata of an object store
            getMetadataParameters = None
            # Gets metadata of an object store
            getMetadataReturnValues = Union[getMetadataReturnValues]
            # Requests database with given name in given frame.
            requestDatabaseParameters = None
            # Requests database with given name in given frame.
            requestDatabaseReturnValues = Union[requestDatabaseReturnValues]
            # Requests database names for given security origin.
            requestDatabaseNamesParameters = None
            # Requests database names for given security origin.
            requestDatabaseNamesReturnValues = Union[requestDatabaseNamesReturnValues]

        class Input:
            TouchPoint = Union[TouchPoint]
            GestureSourceType = Literal['default', 'touch', 'mouse']
            # UTC time in seconds, counted from January 1, 1970.
            TimeSinceEpoch = float
            # Dispatches a key event to the page.
            dispatchKeyEventParameters = None
            # Dispatches a key event to the page.
            dispatchKeyEventReturnValues = None
            # This method emulates inserting text that doesn't come from a key press, for example an emoji keyboard or an IME.
            insertTextParameters = None
            # This method emulates inserting text that doesn't come from a key press, for example an emoji keyboard or an IME.
            insertTextReturnValues = None
            # Dispatches a mouse event to the page.
            dispatchMouseEventParameters = None
            # Dispatches a mouse event to the page.
            dispatchMouseEventReturnValues = None
            # Dispatches a touch event to the page.
            dispatchTouchEventParameters = None
            # Dispatches a touch event to the page.
            dispatchTouchEventReturnValues = None
            # Emulates touch event from the mouse event parameters.
            emulateTouchFromMouseEventParameters = None
            # Emulates touch event from the mouse event parameters.
            emulateTouchFromMouseEventReturnValues = None
            # Ignores input events (useful while auditing page).
            setIgnoreInputEventsParameters = None
            # Ignores input events (useful while auditing page).
            setIgnoreInputEventsReturnValues = None
            # Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
            synthesizePinchGestureParameters = None
            # Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
            synthesizePinchGestureReturnValues = None
            # Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
            synthesizeScrollGestureParameters = None
            # Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
            synthesizeScrollGestureReturnValues = None
            # Synthesizes a tap gesture over a time period by issuing appropriate touch events.
            synthesizeTapGestureParameters = None
            # Synthesizes a tap gesture over a time period by issuing appropriate touch events.
            synthesizeTapGestureReturnValues = None

        class Inspector:
            # Fired when remote debugging connection is about to be terminated. Contains detach reason.
            detachedPayload = Union[detachedPayload]
            # Fired when debugging target has crashed
            targetCrashedPayload = None
            # Fired when debugging target has reloaded after crash
            targetReloadedAfterCrashPayload = None
            # Disables inspector domain notifications.
            disableParameters = None
            # Disables inspector domain notifications.
            disableReturnValues = None
            # Enables inspector domain notifications.
            enableParameters = None
            # Enables inspector domain notifications.
            enableReturnValues = None

        class LayerTree:
            # Unique Layer identifier.
            LayerId = str
            # Unique snapshot identifier.
            SnapshotId = str
            # Rectangle where scrolling happens on the main thread.
            ScrollRect = Union[ScrollRect]
            # Sticky position constraints.
            StickyPositionConstraint = Union[StickyPositionConstraint]
            # Serialized fragment of layer picture along with its offset within the layer.
            PictureTile = Union[PictureTile]
            # Information about a compositing layer.
            Layer = Union[Layer]
            # Array of timings, one per paint step.
            PaintProfile = List[float]
            layerPaintedPayload = Union[layerPaintedPayload]
            layerTreeDidChangePayload = Union[layerTreeDidChangePayload]
            # Provides the reasons why the given layer was composited.
            compositingReasonsParameters = None
            # Provides the reasons why the given layer was composited.
            compositingReasonsReturnValues = Union[compositingReasonsReturnValues]
            # Disables compositing tree inspection.
            disableParameters = None
            # Disables compositing tree inspection.
            disableReturnValues = None
            # Enables compositing tree inspection.
            enableParameters = None
            # Enables compositing tree inspection.
            enableReturnValues = None
            # Returns the snapshot identifier.
            loadSnapshotParameters = None
            # Returns the snapshot identifier.
            loadSnapshotReturnValues = Union[loadSnapshotReturnValues]
            # Returns the layer snapshot identifier.
            makeSnapshotParameters = None
            # Returns the layer snapshot identifier.
            makeSnapshotReturnValues = Union[makeSnapshotReturnValues]
            profileSnapshotParameters = None
            profileSnapshotReturnValues = Union[profileSnapshotReturnValues]
            # Releases layer snapshot captured by the back-end.
            releaseSnapshotParameters = None
            # Releases layer snapshot captured by the back-end.
            releaseSnapshotReturnValues = None
            # Replays the layer snapshot and returns the resulting bitmap.
            replaySnapshotParameters = None
            # Replays the layer snapshot and returns the resulting bitmap.
            replaySnapshotReturnValues = Union[replaySnapshotReturnValues]
            # Replays the layer snapshot and returns canvas log.
            snapshotCommandLogParameters = None
            # Replays the layer snapshot and returns canvas log.
            snapshotCommandLogReturnValues = Union[snapshotCommandLogReturnValues]

        class Log:
            # Provides access to log entries.
            # Log entry.
            LogEntry = Union[LogEntry]
            # Violation configuration setting.
            ViolationSetting = Union[ViolationSetting]
            # Issued when new message was logged.
            entryAddedPayload = Union[entryAddedPayload]
            # Clears the log.
            clearParameters = None
            # Clears the log.
            clearReturnValues = None
            # Disables log domain, prevents further log entries from being reported to the client.
            disableParameters = None
            # Disables log domain, prevents further log entries from being reported to the client.
            disableReturnValues = None
            # Enables log domain, sends the entries collected so far to the client by means of the `entryAdded` notification.
            enableParameters = None
            # Enables log domain, sends the entries collected so far to the client by means of the `entryAdded` notification.
            enableReturnValues = None
            # start violation reporting.
            startViolationsReportParameters = None
            # start violation reporting.
            startViolationsReportReturnValues = None
            # Stop violation reporting.
            stopViolationsReportParameters = None
            # Stop violation reporting.
            stopViolationsReportReturnValues = None

        class Memory:
            # Memory pressure level.
            PressureLevel = Literal['moderate', 'critical']
            # Heap profile sample.
            SamplingProfileNode = Union[SamplingProfileNode]
            # Array of heap profile samples.
            SamplingProfile = Union[SamplingProfile]
            # Executable module information
            Module = Union[Module]
            getDOMCountersParameters = None
            getDOMCountersReturnValues = Union[getDOMCountersReturnValues]
            prepareForLeakDetectionParameters = None
            prepareForLeakDetectionReturnValues = None
            # Simulate OomIntervention by purging V8 memory.
            forciblyPurgeJavaScriptMemoryParameters = None
            # Simulate OomIntervention by purging V8 memory.
            forciblyPurgeJavaScriptMemoryReturnValues = None
            # Enable/disable suppressing memory pressure notifications in all processes.
            setPressureNotificationsSuppressedParameters = None
            # Enable/disable suppressing memory pressure notifications in all processes.
            setPressureNotificationsSuppressedReturnValues = None
            # Simulate a memory pressure notification in all processes.
            simulatePressureNotificationParameters = None
            # Simulate a memory pressure notification in all processes.
            simulatePressureNotificationReturnValues = None
            # Start collecting native memory profile.
            startSamplingParameters = None
            # Start collecting native memory profile.
            startSamplingReturnValues = None
            # Stop collecting native memory profile.
            stopSamplingParameters = None
            # Stop collecting native memory profile.
            stopSamplingReturnValues = None
            # Retrieve native memory allocations profile collected since renderer process startup.
            getAllTimeSamplingProfileParameters = None
            # Retrieve native memory allocations profile collected since renderer process startup.
            getAllTimeSamplingProfileReturnValues = Union[getAllTimeSamplingProfileReturnValues]
            # Retrieve native memory allocations profile collected since browser process startup.
            getBrowserSamplingProfileParameters = None
            # Retrieve native memory allocations profile collected since browser process startup.
            getBrowserSamplingProfileReturnValues = Union[getBrowserSamplingProfileReturnValues]
            # Retrieve native memory allocations profile collected since last `startSampling` call.
            getSamplingProfileParameters = None
            # Retrieve native memory allocations profile collected since last `startSampling` call.
            getSamplingProfileReturnValues = Union[getSamplingProfileReturnValues]

        class Network:
            # Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.
            # Resource type as it was perceived by the rendering engine.
            ResourceType = Literal['Document', 'Stylesheet', 'Image', 'Media', 'Font', 'Script', 'TextTrack', 'XHR', 'Fetch', 'EventSource', 'WebSocket', 'Manifest', 'SignedExchange', 'Ping', 'CSPViolationReport', 'Other']
            # Unique loader identifier.
            LoaderId = str
            # Unique request identifier.
            RequestId = str
            # Unique intercepted request identifier.
            InterceptionId = str
            # Network level fetch failure reason.
            ErrorReason = Literal['Failed', 'Aborted', 'TimedOut', 'AccessDenied', 'ConnectionClosed', 'ConnectionReset', 'ConnectionRefused', 'ConnectionAborted', 'ConnectionFailed', 'NameNotResolved', 'InternetDisconnected', 'AddressUnreachable', 'BlockedByClient', 'BlockedByResponse']
            # UTC time in seconds, counted from January 1, 1970.
            TimeSinceEpoch = float
            # Monotonically increasing time in seconds since an arbitrary point in the past.
            MonotonicTime = float
            # Request / response headers as keys / values of JSON object.
            Headers = Dict[str, str]
            # The underlying connection technology that the browser is supposedly using.
            ConnectionType = Literal['none', 'cellular2g', 'cellular3g', 'cellular4g', 'bluetooth', 'ethernet', 'wifi', 'wimax', 'other']
            # Represents the cookie's 'SameSite' status: https://tools.ietf.org/html/draft-west-first-party-cookies
            CookieSameSite = Literal['Strict', 'Lax', 'None']
            # Timing information for the request.
            ResourceTiming = Union[ResourceTiming]
            # Loading priority of a resource request.
            ResourcePriority = Literal['VeryLow', 'Low', 'Medium', 'High', 'VeryHigh']
            # HTTP request data.
            Request = Union[Request]
            # Details of a signed certificate timestamp (SCT).
            SignedCertificateTimestamp = Union[SignedCertificateTimestamp]
            # Security details about a request.
            SecurityDetails = Union[SecurityDetails]
            # Whether the request complied with Certificate Transparency policy.
            CertificateTransparencyCompliance = Literal['unknown', 'not-compliant', 'compliant']
            # The reason why request was blocked.
            BlockedReason = Literal['other', 'csp', 'mixed-content', 'origin', 'inspector', 'subresource-filter', 'content-type', 'collapsed-by-client']
            # HTTP response data.
            Response = Union[Response]
            # WebSocket request data.
            WebSocketRequest = Union[WebSocketRequest]
            # WebSocket response data.
            WebSocketResponse = Union[WebSocketResponse]
            # WebSocket message data. This represents an entire WebSocket message, not just a fragmented frame as the name suggests.
            WebSocketFrame = Union[WebSocketFrame]
            # Information about the cached resource.
            CachedResource = Union[CachedResource]
            # Information about the request initiator.
            Initiator = Union[Initiator]
            # Cookie object
            Cookie = Union[Cookie]
            # Types of reasons why a cookie may not be stored from a response.
            SetCookieBlockedReason = Literal['SecureOnly', 'SameSiteStrict', 'SameSiteLax', 'SameSiteUnspecifiedTreatedAsLax', 'SameSiteNoneInsecure', 'UserPreferences', 'SyntaxError', 'SchemeNotSupported', 'OverwriteSecure', 'InvalidDomain', 'InvalidPrefix', 'UnknownError']
            # Types of reasons why a cookie may not be sent with a request.
            CookieBlockedReason = Literal['SecureOnly', 'NotOnPath', 'DomainMismatch', 'SameSiteStrict', 'SameSiteLax', 'SameSiteUnspecifiedTreatedAsLax', 'SameSiteNoneInsecure', 'UserPreferences', 'UnknownError']
            # A cookie which was not stored from a response with the corresponding reason.
            BlockedSetCookieWithReason = Union[BlockedSetCookieWithReason]
            # A cookie with was not sent with a request with the corresponding reason.
            BlockedCookieWithReason = Union[BlockedCookieWithReason]
            # Cookie parameter object
            CookieParam = Union[CookieParam]
            # Authorization challenge for HTTP status code 401 or 407.
            AuthChallenge = Union[AuthChallenge]
            # Response to an AuthChallenge.
            AuthChallengeResponse = Union[AuthChallengeResponse]
            # Stages of the interception to begin intercepting. Request will intercept before the request is sent. Response will intercept after the response is received.
            InterceptionStage = Literal['Request', 'HeadersReceived']
            # Request pattern for interception.
            RequestPattern = Union[RequestPattern]
            # Information about a signed exchange signature. https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#rfc.section.3.1
            SignedExchangeSignature = Union[SignedExchangeSignature]
            # Information about a signed exchange header. https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#cbor-representation
            SignedExchangeHeader = Union[SignedExchangeHeader]
            # Field type for a signed exchange related error.
            SignedExchangeErrorField = Literal['signatureSig', 'signatureIntegrity', 'signatureCertUrl', 'signatureCertSha256', 'signatureValidityUrl', 'signatureTimestamps']
            # Information about a signed exchange response.
            SignedExchangeError = Union[SignedExchangeError]
            # Information about a signed exchange response.
            SignedExchangeInfo = Union[SignedExchangeInfo]
            # Fired when data chunk was received over the network.
            dataReceivedPayload = Union[dataReceivedPayload]
            # Fired when EventSource message is received.
            eventSourceMessageReceivedPayload = Union[eventSourceMessageReceivedPayload]
            # Fired when HTTP request has failed to load.
            loadingFailedPayload = Union[loadingFailedPayload]
            # Fired when HTTP request has finished loading.
            loadingFinishedPayload = Union[loadingFinishedPayload]
            # Details of an intercepted HTTP request, which must be either allowed, blocked, modified or mocked. Deprecated, use Fetch.requestPaused instead.
            requestInterceptedPayload = Union[requestInterceptedPayload]
            # Fired if request ended up loading from cache.
            requestServedFromCachePayload = Union[requestServedFromCachePayload]
            # Fired when page is about to send HTTP request.
            requestWillBeSentPayload = Union[requestWillBeSentPayload]
            # Fired when resource loading priority is changed
            resourceChangedPriorityPayload = Union[resourceChangedPriorityPayload]
            # Fired when a signed exchange was received over the network
            signedExchangeReceivedPayload = Union[signedExchangeReceivedPayload]
            # Fired when HTTP response is available.
            responseReceivedPayload = Union[responseReceivedPayload]
            # Fired when WebSocket is closed.
            webSocketClosedPayload = Union[webSocketClosedPayload]
            # Fired upon WebSocket creation.
            webSocketCreatedPayload = Union[webSocketCreatedPayload]
            # Fired when WebSocket message error occurs.
            webSocketFrameErrorPayload = Union[webSocketFrameErrorPayload]
            # Fired when WebSocket message is received.
            webSocketFrameReceivedPayload = Union[webSocketFrameReceivedPayload]
            # Fired when WebSocket message is sent.
            webSocketFrameSentPayload = Union[webSocketFrameSentPayload]
            # Fired when WebSocket handshake response becomes available.
            webSocketHandshakeResponseReceivedPayload = Union[webSocketHandshakeResponseReceivedPayload]
            # Fired when WebSocket is about to initiate handshake.
            webSocketWillSendHandshakeRequestPayload = Union[webSocketWillSendHandshakeRequestPayload]
            # Fired when additional information about a requestWillBeSent event is available from the network stack. Not every requestWillBeSent event will have an additional requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent or requestWillBeSentExtraInfo will be fired first for the same request.
            requestWillBeSentExtraInfoPayload = Union[requestWillBeSentExtraInfoPayload]
            # Fired when additional information about a responseReceived event is available from the network stack. Not every responseReceived event will have an additional responseReceivedExtraInfo for it, and responseReceivedExtraInfo may be fired before or after responseReceived.
            responseReceivedExtraInfoPayload = Union[responseReceivedExtraInfoPayload]
            # Tells whether clearing browser cache is supported.
            canClearBrowserCacheParameters = None
            # Tells whether clearing browser cache is supported.
            canClearBrowserCacheReturnValues = Union[canClearBrowserCacheReturnValues]
            # Tells whether clearing browser cookies is supported.
            canClearBrowserCookiesParameters = None
            # Tells whether clearing browser cookies is supported.
            canClearBrowserCookiesReturnValues = Union[canClearBrowserCookiesReturnValues]
            # Tells whether emulation of network conditions is supported.
            canEmulateNetworkConditionsParameters = None
            # Tells whether emulation of network conditions is supported.
            canEmulateNetworkConditionsReturnValues = Union[canEmulateNetworkConditionsReturnValues]
            # Clears browser cache.
            clearBrowserCacheParameters = None
            # Clears browser cache.
            clearBrowserCacheReturnValues = None
            # Clears browser cookies.
            clearBrowserCookiesParameters = None
            # Clears browser cookies.
            clearBrowserCookiesReturnValues = None
            # Response to Network.requestIntercepted which either modifies the request to continue with any modifications, or blocks it, or completes it with the provided response bytes. If a network fetch occurs as a result which encounters a redirect an additional Network.requestIntercepted event will be sent with the same InterceptionId. Deprecated, use Fetch.continueRequest, Fetch.fulfillRequest and Fetch.failRequest instead.
            continueInterceptedRequestParameters = None
            # Response to Network.requestIntercepted which either modifies the request to continue with any modifications, or blocks it, or completes it with the provided response bytes. If a network fetch occurs as a result which encounters a redirect an additional Network.requestIntercepted event will be sent with the same InterceptionId. Deprecated, use Fetch.continueRequest, Fetch.fulfillRequest and Fetch.failRequest instead.
            continueInterceptedRequestReturnValues = None
            # Deletes browser cookies with matching name and url or domain/path pair.
            deleteCookiesParameters = None
            # Deletes browser cookies with matching name and url or domain/path pair.
            deleteCookiesReturnValues = None
            # Disables network tracking, prevents network events from being sent to the client.
            disableParameters = None
            # Disables network tracking, prevents network events from being sent to the client.
            disableReturnValues = None
            # Activates emulation of network conditions.
            emulateNetworkConditionsParameters = None
            # Activates emulation of network conditions.
            emulateNetworkConditionsReturnValues = None
            # Enables network tracking, network events will now be delivered to the client.
            enableParameters = None
            # Enables network tracking, network events will now be delivered to the client.
            enableReturnValues = None
            # Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the `cookies` field.
            getAllCookiesParameters = None
            # Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the `cookies` field.
            getAllCookiesReturnValues = Union[getAllCookiesReturnValues]
            # Returns the DER-encoded certificate.
            getCertificateParameters = None
            # Returns the DER-encoded certificate.
            getCertificateReturnValues = Union[getCertificateReturnValues]
            # Returns all browser cookies for the current URL. Depending on the backend support, will return detailed cookie information in the `cookies` field.
            getCookiesParameters = None
            # Returns all browser cookies for the current URL. Depending on the backend support, will return detailed cookie information in the `cookies` field.
            getCookiesReturnValues = Union[getCookiesReturnValues]
            # Returns content served for the given request.
            getResponseBodyParameters = None
            # Returns content served for the given request.
            getResponseBodyReturnValues = Union[getResponseBodyReturnValues]
            # Returns post data sent with the request. Returns an error when no data was sent with the request.
            getRequestPostDataParameters = None
            # Returns post data sent with the request. Returns an error when no data was sent with the request.
            getRequestPostDataReturnValues = Union[getRequestPostDataReturnValues]
            # Returns content served for the given currently intercepted request.
            getResponseBodyForInterceptionParameters = None
            # Returns content served for the given currently intercepted request.
            getResponseBodyForInterceptionReturnValues = Union[getResponseBodyForInterceptionReturnValues]
            # Returns a handle to the stream representing the response body. Note that after this command, the intercepted request can't be continued as is -- you either need to cancel it or to provide the response body. The stream only supports sequential read, IO.read will fail if the position is specified.
            takeResponseBodyForInterceptionAsStreamParameters = None
            # Returns a handle to the stream representing the response body. Note that after this command, the intercepted request can't be continued as is -- you either need to cancel it or to provide the response body. The stream only supports sequential read, IO.read will fail if the position is specified.
            takeResponseBodyForInterceptionAsStreamReturnValues = Union[takeResponseBodyForInterceptionAsStreamReturnValues]
            # This method sends a new XMLHttpRequest which is identical to the original one. The following parameters should be identical: method, url, async, request body, extra headers, withCredentials attribute, user, password.
            replayXHRParameters = None
            # This method sends a new XMLHttpRequest which is identical to the original one. The following parameters should be identical: method, url, async, request body, extra headers, withCredentials attribute, user, password.
            replayXHRReturnValues = None
            # Searches for given string in response content.
            searchInResponseBodyParameters = None
            # Searches for given string in response content.
            searchInResponseBodyReturnValues = Union[searchInResponseBodyReturnValues]
            # Blocks URLs from loading.
            setBlockedURLsParameters = None
            # Blocks URLs from loading.
            setBlockedURLsReturnValues = None
            # Toggles ignoring of service worker for each request.
            setBypassServiceWorkerParameters = None
            # Toggles ignoring of service worker for each request.
            setBypassServiceWorkerReturnValues = None
            # Toggles ignoring cache for each request. If `true`, cache will not be used.
            setCacheDisabledParameters = None
            # Toggles ignoring cache for each request. If `true`, cache will not be used.
            setCacheDisabledReturnValues = None
            # Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
            setCookieParameters = None
            # Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
            setCookieReturnValues = Union[setCookieReturnValues]
            # Sets given cookies.
            setCookiesParameters = None
            # Sets given cookies.
            setCookiesReturnValues = None
            # For testing.
            setDataSizeLimitsForTestParameters = None
            # For testing.
            setDataSizeLimitsForTestReturnValues = None
            # Specifies whether to always send extra HTTP headers with the requests from this page.
            setExtraHTTPHeadersParameters = None
            # Specifies whether to always send extra HTTP headers with the requests from this page.
            setExtraHTTPHeadersReturnValues = None
            # Sets the requests to intercept that match the provided patterns and optionally resource types. Deprecated, please use Fetch.enable instead.
            setRequestInterceptionParameters = None
            # Sets the requests to intercept that match the provided patterns and optionally resource types. Deprecated, please use Fetch.enable instead.
            setRequestInterceptionReturnValues = None
            # Allows overriding user agent with the given string.
            setUserAgentOverrideParameters = None
            # Allows overriding user agent with the given string.
            setUserAgentOverrideReturnValues = None

        class Overlay:
            # This domain provides various functionality related to drawing atop the inspected page.
            # Configuration data for the highlighting of page elements.
            HighlightConfig = Union[HighlightConfig]
            InspectMode = Literal['searchForNode', 'searchForUAShadowDOM', 'captureAreaScreenshot', 'showDistances', 'none']
            # Fired when the node should be inspected. This happens after call to `setInspectMode` or when user manually inspects an element.
            inspectNodeRequestedPayload = Union[inspectNodeRequestedPayload]
            # Fired when the node should be highlighted. This happens after call to `setInspectMode`.
            nodeHighlightRequestedPayload = Union[nodeHighlightRequestedPayload]
            # Fired when user asks to capture screenshot of some area on the page.
            screenshotRequestedPayload = Union[screenshotRequestedPayload]
            # Fired when user cancels the inspect mode.
            inspectModeCanceledPayload = None
            # Disables domain notifications.
            disableParameters = None
            # Disables domain notifications.
            disableReturnValues = None
            # Enables domain notifications.
            enableParameters = None
            # Enables domain notifications.
            enableReturnValues = None
            # For testing.
            getHighlightObjectForTestParameters = None
            # For testing.
            getHighlightObjectForTestReturnValues = Union[getHighlightObjectForTestReturnValues]
            # Hides any highlight.
            hideHighlightParameters = None
            # Hides any highlight.
            hideHighlightReturnValues = None
            # Highlights owner element of the frame with given id.
            highlightFrameParameters = None
            # Highlights owner element of the frame with given id.
            highlightFrameReturnValues = None
            # Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified.
            highlightNodeParameters = None
            # Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified.
            highlightNodeReturnValues = None
            # Highlights given quad. Coordinates are absolute with respect to the main frame viewport.
            highlightQuadParameters = None
            # Highlights given quad. Coordinates are absolute with respect to the main frame viewport.
            highlightQuadReturnValues = None
            # Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.
            highlightRectParameters = None
            # Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.
            highlightRectReturnValues = None
            # Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspectNodeRequested' event upon element selection.
            setInspectModeParameters = None
            # Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspectNodeRequested' event upon element selection.
            setInspectModeReturnValues = None
            # Highlights owner element of all frames detected to be ads.
            setShowAdHighlightsParameters = None
            # Highlights owner element of all frames detected to be ads.
            setShowAdHighlightsReturnValues = None
            setPausedInDebuggerMessageParameters = None
            setPausedInDebuggerMessageReturnValues = None
            # Requests that backend shows debug borders on layers
            setShowDebugBordersParameters = None
            # Requests that backend shows debug borders on layers
            setShowDebugBordersReturnValues = None
            # Requests that backend shows the FPS counter
            setShowFPSCounterParameters = None
            # Requests that backend shows the FPS counter
            setShowFPSCounterReturnValues = None
            # Requests that backend shows paint rectangles
            setShowPaintRectsParameters = None
            # Requests that backend shows paint rectangles
            setShowPaintRectsReturnValues = None
            # Requests that backend shows layout shift regions
            setShowLayoutShiftRegionsParameters = None
            # Requests that backend shows layout shift regions
            setShowLayoutShiftRegionsReturnValues = None
            # Requests that backend shows scroll bottleneck rects
            setShowScrollBottleneckRectsParameters = None
            # Requests that backend shows scroll bottleneck rects
            setShowScrollBottleneckRectsReturnValues = None
            # Requests that backend shows hit-test borders on layers
            setShowHitTestBordersParameters = None
            # Requests that backend shows hit-test borders on layers
            setShowHitTestBordersReturnValues = None
            # Paints viewport size upon main frame resize.
            setShowViewportSizeOnResizeParameters = None
            # Paints viewport size upon main frame resize.
            setShowViewportSizeOnResizeReturnValues = None

        class Page:
            # Actions and events related to the inspected page belong to the page domain.
            # Unique frame identifier.
            FrameId = str
            # Information about the Frame on the page.
            Frame = Union[Frame]
            # Information about the Resource on the page.
            FrameResource = Union[FrameResource]
            # Information about the Frame hierarchy along with their cached resources.
            FrameResourceTree = Union[FrameResourceTree]
            # Information about the Frame hierarchy.
            FrameTree = Union[FrameTree]
            # Unique script identifier.
            ScriptIdentifier = str
            # Transition type.
            TransitionType = Literal['link', 'typed', 'address_bar', 'auto_bookmark', 'auto_subframe', 'manual_subframe', 'generated', 'auto_toplevel', 'form_submit', 'reload', 'keyword', 'keyword_generated', 'other']
            # Navigation history entry.
            NavigationEntry = Union[NavigationEntry]
            # Screencast frame metadata.
            ScreencastFrameMetadata = Union[ScreencastFrameMetadata]
            # Javascript dialog type.
            DialogType = Literal['alert', 'confirm', 'prompt', 'beforeunload']
            # Error while paring app manifest.
            AppManifestError = Union[AppManifestError]
            # Layout viewport position and dimensions.
            LayoutViewport = Union[LayoutViewport]
            # Visual viewport position, dimensions, and scale.
            VisualViewport = Union[VisualViewport]
            # Viewport for capturing screenshot.
            Viewport = Union[Viewport]
            # Generic font families collection.
            FontFamilies = Union[FontFamilies]
            # Default font sizes.
            FontSizes = Union[FontSizes]
            ClientNavigationReason = Literal['formSubmissionGet', 'formSubmissionPost', 'httpHeaderRefresh', 'scriptInitiated', 'metaTagRefresh', 'pageBlockInterstitial', 'reload']
            domContentEventFiredPayload = Union[domContentEventFiredPayload]
            # Emitted only when `page.interceptFileChooser` is enabled.
            fileChooserOpenedPayload = Union[fileChooserOpenedPayload]
            # Fired when frame has been attached to its parent.
            frameAttachedPayload = Union[frameAttachedPayload]
            # Fired when frame no longer has a scheduled navigation.
            frameClearedScheduledNavigationPayload = Union[frameClearedScheduledNavigationPayload]
            # Fired when frame has been detached from its parent.
            frameDetachedPayload = Union[frameDetachedPayload]
            # Fired once navigation of the frame has completed. Frame is now associated with the new loader.
            frameNavigatedPayload = Union[frameNavigatedPayload]
            frameResizedPayload = None
            # Fired when a renderer-initiated navigation is requested. Navigation may still be cancelled after the event is issued.
            frameRequestedNavigationPayload = Union[frameRequestedNavigationPayload]
            # Fired when frame schedules a potential navigation.
            frameScheduledNavigationPayload = Union[frameScheduledNavigationPayload]
            # Fired when frame has started loading.
            frameStartedLoadingPayload = Union[frameStartedLoadingPayload]
            # Fired when frame has stopped loading.
            frameStoppedLoadingPayload = Union[frameStoppedLoadingPayload]
            # Fired when page is about to start a download.
            downloadWillBeginPayload = Union[downloadWillBeginPayload]
            # Fired when interstitial page was hidden
            interstitialHiddenPayload = None
            # Fired when interstitial page was shown
            interstitialShownPayload = None
            # Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed.
            javascriptDialogClosedPayload = Union[javascriptDialogClosedPayload]
            # Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.
            javascriptDialogOpeningPayload = Union[javascriptDialogOpeningPayload]
            # Fired for top level page lifecycle events such as navigation, load, paint, etc.
            lifecycleEventPayload = Union[lifecycleEventPayload]
            loadEventFiredPayload = Union[loadEventFiredPayload]
            # Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.
            navigatedWithinDocumentPayload = Union[navigatedWithinDocumentPayload]
            # Compressed image data requested by the `startScreencast`.
            screencastFramePayload = Union[screencastFramePayload]
            # Fired when the page with currently enabled screencast was shown or hidden `.
            screencastVisibilityChangedPayload = Union[screencastVisibilityChangedPayload]
            # Fired when a new window is going to be opened, via window.open(), link click, form submission, etc.
            windowOpenPayload = Union[windowOpenPayload]
            # Issued for every compilation cache generated. Is only available if Page.setGenerateCompilationCache is enabled.
            compilationCacheProducedPayload = Union[compilationCacheProducedPayload]
            # Deprecated, please use addScriptToEvaluateOnNewDocument instead.
            addScriptToEvaluateOnLoadParameters = None
            # Deprecated, please use addScriptToEvaluateOnNewDocument instead.
            addScriptToEvaluateOnLoadReturnValues = Union[addScriptToEvaluateOnLoadReturnValues]
            # Evaluates given script in every frame upon creation (before loading frame's scripts).
            addScriptToEvaluateOnNewDocumentParameters = None
            # Evaluates given script in every frame upon creation (before loading frame's scripts).
            addScriptToEvaluateOnNewDocumentReturnValues = Union[addScriptToEvaluateOnNewDocumentReturnValues]
            # Brings page to front (activates tab).
            bringToFrontParameters = None
            # Brings page to front (activates tab).
            bringToFrontReturnValues = None
            # Capture page screenshot.
            captureScreenshotParameters = None
            # Capture page screenshot.
            captureScreenshotReturnValues = Union[captureScreenshotReturnValues]
            # Returns a snapshot of the page as a string. For MHTML format, the serialization includes iframes, shadow DOM, external resources, and element-inline styles.
            captureSnapshotParameters = None
            # Returns a snapshot of the page as a string. For MHTML format, the serialization includes iframes, shadow DOM, external resources, and element-inline styles.
            captureSnapshotReturnValues = Union[captureSnapshotReturnValues]
            # Clears the overriden device metrics.
            clearDeviceMetricsOverrideParameters = None
            # Clears the overriden device metrics.
            clearDeviceMetricsOverrideReturnValues = None
            # Clears the overridden Device Orientation.
            clearDeviceOrientationOverrideParameters = None
            # Clears the overridden Device Orientation.
            clearDeviceOrientationOverrideReturnValues = None
            # Clears the overriden Geolocation Position and Error.
            clearGeolocationOverrideParameters = None
            # Clears the overriden Geolocation Position and Error.
            clearGeolocationOverrideReturnValues = None
            # Creates an isolated world for the given frame.
            createIsolatedWorldParameters = None
            # Creates an isolated world for the given frame.
            createIsolatedWorldReturnValues = Union[createIsolatedWorldReturnValues]
            # Deletes browser cookie with given name, domain and path.
            deleteCookieParameters = None
            # Deletes browser cookie with given name, domain and path.
            deleteCookieReturnValues = None
            # Disables page domain notifications.
            disableParameters = None
            # Disables page domain notifications.
            disableReturnValues = None
            # Enables page domain notifications.
            enableParameters = None
            # Enables page domain notifications.
            enableReturnValues = None
            getAppManifestParameters = None
            getAppManifestReturnValues = Union[getAppManifestReturnValues]
            getInstallabilityErrorsParameters = None
            getInstallabilityErrorsReturnValues = Union[getInstallabilityErrorsReturnValues]
            # Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the `cookies` field.
            getCookiesParameters = None
            # Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the `cookies` field.
            getCookiesReturnValues = Union[getCookiesReturnValues]
            # Returns present frame tree structure.
            getFrameTreeParameters = None
            # Returns present frame tree structure.
            getFrameTreeReturnValues = Union[getFrameTreeReturnValues]
            # Returns metrics relating to the layouting of the page, such as viewport bounds/scale.
            getLayoutMetricsParameters = None
            # Returns metrics relating to the layouting of the page, such as viewport bounds/scale.
            getLayoutMetricsReturnValues = Union[getLayoutMetricsReturnValues]
            # Returns navigation history for the current page.
            getNavigationHistoryParameters = None
            # Returns navigation history for the current page.
            getNavigationHistoryReturnValues = Union[getNavigationHistoryReturnValues]
            # Resets navigation history for the current page.
            resetNavigationHistoryParameters = None
            # Resets navigation history for the current page.
            resetNavigationHistoryReturnValues = None
            # Returns content of the given resource.
            getResourceContentParameters = None
            # Returns content of the given resource.
            getResourceContentReturnValues = Union[getResourceContentReturnValues]
            # Returns present frame / resource tree structure.
            getResourceTreeParameters = None
            # Returns present frame / resource tree structure.
            getResourceTreeReturnValues = Union[getResourceTreeReturnValues]
            # Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).
            handleJavaScriptDialogParameters = None
            # Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).
            handleJavaScriptDialogReturnValues = None
            # Navigates current page to the given URL.
            navigateParameters = None
            # Navigates current page to the given URL.
            navigateReturnValues = Union[navigateReturnValues]
            # Navigates current page to the given history entry.
            navigateToHistoryEntryParameters = None
            # Navigates current page to the given history entry.
            navigateToHistoryEntryReturnValues = None
            # Print page as PDF.
            printToPDFParameters = None
            # Print page as PDF.
            printToPDFReturnValues = Union[printToPDFReturnValues]
            # Reloads given page optionally ignoring the cache.
            reloadParameters = None
            # Reloads given page optionally ignoring the cache.
            reloadReturnValues = None
            # Deprecated, please use removeScriptToEvaluateOnNewDocument instead.
            removeScriptToEvaluateOnLoadParameters = None
            # Deprecated, please use removeScriptToEvaluateOnNewDocument instead.
            removeScriptToEvaluateOnLoadReturnValues = None
            # Removes given script from the list.
            removeScriptToEvaluateOnNewDocumentParameters = None
            # Removes given script from the list.
            removeScriptToEvaluateOnNewDocumentReturnValues = None
            # Acknowledges that a screencast frame has been received by the frontend.
            screencastFrameAckParameters = None
            # Acknowledges that a screencast frame has been received by the frontend.
            screencastFrameAckReturnValues = None
            # Searches for given string in resource content.
            searchInResourceParameters = None
            # Searches for given string in resource content.
            searchInResourceReturnValues = Union[searchInResourceReturnValues]
            # Enable Chrome's experimental ad filter on all sites.
            setAdBlockingEnabledParameters = None
            # Enable Chrome's experimental ad filter on all sites.
            setAdBlockingEnabledReturnValues = None
            # Enable page Content Security Policy by-passing.
            setBypassCSPParameters = None
            # Enable page Content Security Policy by-passing.
            setBypassCSPReturnValues = None
            # Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results).
            setDeviceMetricsOverrideParameters = None
            # Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results).
            setDeviceMetricsOverrideReturnValues = None
            # Overrides the Device Orientation.
            setDeviceOrientationOverrideParameters = None
            # Overrides the Device Orientation.
            setDeviceOrientationOverrideReturnValues = None
            # Set generic font families.
            setFontFamiliesParameters = None
            # Set generic font families.
            setFontFamiliesReturnValues = None
            # Set default font sizes.
            setFontSizesParameters = None
            # Set default font sizes.
            setFontSizesReturnValues = None
            # Sets given markup as the document's HTML.
            setDocumentContentParameters = None
            # Sets given markup as the document's HTML.
            setDocumentContentReturnValues = None
            # Set the behavior when downloading a file.
            setDownloadBehaviorParameters = None
            # Set the behavior when downloading a file.
            setDownloadBehaviorReturnValues = None
            # Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.
            setGeolocationOverrideParameters = None
            # Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.
            setGeolocationOverrideReturnValues = None
            # Controls whether page will emit lifecycle events.
            setLifecycleEventsEnabledParameters = None
            # Controls whether page will emit lifecycle events.
            setLifecycleEventsEnabledReturnValues = None
            # Toggles mouse event-based touch event emulation.
            setTouchEmulationEnabledParameters = None
            # Toggles mouse event-based touch event emulation.
            setTouchEmulationEnabledReturnValues = None
            # Starts sending each frame using the `screencastFrame` event.
            startScreencastParameters = None
            # Starts sending each frame using the `screencastFrame` event.
            startScreencastReturnValues = None
            # Force the page stop all navigations and pending resource fetches.
            stopLoadingParameters = None
            # Force the page stop all navigations and pending resource fetches.
            stopLoadingReturnValues = None
            # Crashes renderer on the IO thread, generates minidumps.
            crashParameters = None
            # Crashes renderer on the IO thread, generates minidumps.
            crashReturnValues = None
            # Tries to close page, running its beforeunload hooks, if any.
            closeParameters = None
            # Tries to close page, running its beforeunload hooks, if any.
            closeReturnValues = None
            # Tries to update the web lifecycle state of the page. It will transition the page to the given state according to: https://github.com/WICG/web-lifecycle/
            setWebLifecycleStateParameters = None
            # Tries to update the web lifecycle state of the page. It will transition the page to the given state according to: https://github.com/WICG/web-lifecycle/
            setWebLifecycleStateReturnValues = None
            # Stops sending each frame in the `screencastFrame`.
            stopScreencastParameters = None
            # Stops sending each frame in the `screencastFrame`.
            stopScreencastReturnValues = None
            # Forces compilation cache to be generated for every subresource script.
            setProduceCompilationCacheParameters = None
            # Forces compilation cache to be generated for every subresource script.
            setProduceCompilationCacheReturnValues = None
            # Seeds compilation cache for given url. Compilation cache does not survive cross-process navigation.
            addCompilationCacheParameters = None
            # Seeds compilation cache for given url. Compilation cache does not survive cross-process navigation.
            addCompilationCacheReturnValues = None
            # Clears seeded compilation cache.
            clearCompilationCacheParameters = None
            # Clears seeded compilation cache.
            clearCompilationCacheReturnValues = None
            # Generates a report for testing.
            generateTestReportParameters = None
            # Generates a report for testing.
            generateTestReportReturnValues = None
            # Pauses page execution. Can be resumed using generic Runtime.runIfWaitingForDebugger.
            waitForDebuggerParameters = None
            # Pauses page execution. Can be resumed using generic Runtime.runIfWaitingForDebugger.
            waitForDebuggerReturnValues = None
            # Intercept file chooser requests and transfer control to protocol clients. When file chooser interception is enabled, native file chooser dialog is not shown. Instead, a protocol event `Page.fileChooserOpened` is emitted.
            setInterceptFileChooserDialogParameters = None
            # Intercept file chooser requests and transfer control to protocol clients. When file chooser interception is enabled, native file chooser dialog is not shown. Instead, a protocol event `Page.fileChooserOpened` is emitted.
            setInterceptFileChooserDialogReturnValues = None

        class Performance:
            # Run-time execution metric.
            Metric = Union[Metric]
            # Current values of the metrics.
            metricsPayload = Union[metricsPayload]
            # Disable collecting and reporting metrics.
            disableParameters = None
            # Disable collecting and reporting metrics.
            disableReturnValues = None
            # Enable collecting and reporting metrics.
            enableParameters = None
            # Enable collecting and reporting metrics.
            enableReturnValues = None
            # Sets time domain to use for collecting and reporting duration metrics. Note that this must be called before enabling metrics collection. Calling this method while metrics collection is enabled returns an error.
            setTimeDomainParameters = None
            # Sets time domain to use for collecting and reporting duration metrics. Note that this must be called before enabling metrics collection. Calling this method while metrics collection is enabled returns an error.
            setTimeDomainReturnValues = None
            # Retrieve current values of run-time metrics.
            getMetricsParameters = None
            # Retrieve current values of run-time metrics.
            getMetricsReturnValues = Union[getMetricsReturnValues]

        class Security:
            # Security
            # An internal certificate ID value.
            CertificateId = int
            # A description of mixed content (HTTP resources on HTTPS pages), as defined by https://www.w3.org/TR/mixed-content/#categories
            MixedContentType = Literal['blockable', 'optionally-blockable', 'none']
            # The security level of a page or resource.
            SecurityState = Literal['unknown', 'neutral', 'insecure', 'secure', 'info', 'insecure-broken']
            # Details about the security state of the page certificate.
            CertificateSecurityState = Union[CertificateSecurityState]
            SafetyTipStatus = Literal['badReputation', 'lookalike']
            SafetyTipInfo = Union[SafetyTipInfo]
            # Security state information about the page.
            VisibleSecurityState = Union[VisibleSecurityState]
            # An explanation of an factor contributing to the security state.
            SecurityStateExplanation = Union[SecurityStateExplanation]
            # Information about insecure content on the page.
            InsecureContentStatus = Union[InsecureContentStatus]
            # The action to take when a certificate error occurs. continue will continue processing the request and cancel will cancel the request.
            CertificateErrorAction = Literal['continue', 'cancel']
            # There is a certificate error. If overriding certificate errors is enabled, then it should be handled with the `handleCertificateError` command. Note: this event does not fire if the certificate error has been allowed internally. Only one client per target should override certificate errors at the same time.
            certificateErrorPayload = Union[certificateErrorPayload]
            # The security state of the page changed.
            visibleSecurityStateChangedPayload = Union[visibleSecurityStateChangedPayload]
            # The security state of the page changed.
            securityStateChangedPayload = Union[securityStateChangedPayload]
            # Disables tracking security state changes.
            disableParameters = None
            # Disables tracking security state changes.
            disableReturnValues = None
            # Enables tracking security state changes.
            enableParameters = None
            # Enables tracking security state changes.
            enableReturnValues = None
            # Enable/disable whether all certificate errors should be ignored.
            setIgnoreCertificateErrorsParameters = None
            # Enable/disable whether all certificate errors should be ignored.
            setIgnoreCertificateErrorsReturnValues = None
            # Handles a certificate error that fired a certificateError event.
            handleCertificateErrorParameters = None
            # Handles a certificate error that fired a certificateError event.
            handleCertificateErrorReturnValues = None
            # Enable/disable overriding certificate errors. If enabled, all certificate error events need to be handled by the DevTools client and should be answered with `handleCertificateError` commands.
            setOverrideCertificateErrorsParameters = None
            # Enable/disable overriding certificate errors. If enabled, all certificate error events need to be handled by the DevTools client and should be answered with `handleCertificateError` commands.
            setOverrideCertificateErrorsReturnValues = None

        class ServiceWorker:
            RegistrationID = str
            # ServiceWorker registration.
            ServiceWorkerRegistration = Union[ServiceWorkerRegistration]
            ServiceWorkerVersionRunningStatus = Literal['stopped', 'starting', 'running', 'stopping']
            ServiceWorkerVersionStatus = Literal['new', 'installing', 'installed', 'activating', 'activated', 'redundant']
            # ServiceWorker version.
            ServiceWorkerVersion = Union[ServiceWorkerVersion]
            # ServiceWorker error message.
            ServiceWorkerErrorMessage = Union[ServiceWorkerErrorMessage]
            workerErrorReportedPayload = Union[workerErrorReportedPayload]
            workerRegistrationUpdatedPayload = Union[workerRegistrationUpdatedPayload]
            workerVersionUpdatedPayload = Union[workerVersionUpdatedPayload]
            deliverPushMessageParameters = None
            deliverPushMessageReturnValues = None
            disableParameters = None
            disableReturnValues = None
            dispatchSyncEventParameters = None
            dispatchSyncEventReturnValues = None
            dispatchPeriodicSyncEventParameters = None
            dispatchPeriodicSyncEventReturnValues = None
            enableParameters = None
            enableReturnValues = None
            inspectWorkerParameters = None
            inspectWorkerReturnValues = None
            setForceUpdateOnPageLoadParameters = None
            setForceUpdateOnPageLoadReturnValues = None
            skipWaitingParameters = None
            skipWaitingReturnValues = None
            startWorkerParameters = None
            startWorkerReturnValues = None
            stopAllWorkersParameters = None
            stopAllWorkersReturnValues = None
            stopWorkerParameters = None
            stopWorkerReturnValues = None
            unregisterParameters = None
            unregisterReturnValues = None
            updateRegistrationParameters = None
            updateRegistrationReturnValues = None

        class Storage:
            # Enum of possible storage types.
            StorageType = Literal['appcache', 'cookies', 'file_systems', 'indexeddb', 'local_storage', 'shader_cache', 'websql', 'service_workers', 'cache_storage', 'all', 'other']
            # Usage for a storage type.
            UsageForType = Union[UsageForType]
            # A cache's contents have been modified.
            cacheStorageContentUpdatedPayload = Union[cacheStorageContentUpdatedPayload]
            # A cache has been added/deleted.
            cacheStorageListUpdatedPayload = Union[cacheStorageListUpdatedPayload]
            # The origin's IndexedDB object store has been modified.
            indexedDBContentUpdatedPayload = Union[indexedDBContentUpdatedPayload]
            # The origin's IndexedDB database list has been modified.
            indexedDBListUpdatedPayload = Union[indexedDBListUpdatedPayload]
            # Clears storage for origin.
            clearDataForOriginParameters = None
            # Clears storage for origin.
            clearDataForOriginReturnValues = None
            # Returns all browser cookies.
            getCookiesParameters = None
            # Returns all browser cookies.
            getCookiesReturnValues = Union[getCookiesReturnValues]
            # Sets given cookies.
            setCookiesParameters = None
            # Sets given cookies.
            setCookiesReturnValues = None
            # Clears cookies.
            clearCookiesParameters = None
            # Clears cookies.
            clearCookiesReturnValues = None
            # Returns usage and quota in bytes.
            getUsageAndQuotaParameters = None
            # Returns usage and quota in bytes.
            getUsageAndQuotaReturnValues = Union[getUsageAndQuotaReturnValues]
            # Registers origin to be notified when an update occurs to its cache storage list.
            trackCacheStorageForOriginParameters = None
            # Registers origin to be notified when an update occurs to its cache storage list.
            trackCacheStorageForOriginReturnValues = None
            # Registers origin to be notified when an update occurs to its IndexedDB.
            trackIndexedDBForOriginParameters = None
            # Registers origin to be notified when an update occurs to its IndexedDB.
            trackIndexedDBForOriginReturnValues = None
            # Unregisters origin from receiving notifications for cache storage.
            untrackCacheStorageForOriginParameters = None
            # Unregisters origin from receiving notifications for cache storage.
            untrackCacheStorageForOriginReturnValues = None
            # Unregisters origin from receiving notifications for IndexedDB.
            untrackIndexedDBForOriginParameters = None
            # Unregisters origin from receiving notifications for IndexedDB.
            untrackIndexedDBForOriginReturnValues = None

        class SystemInfo:
            # The SystemInfo domain defines methods and events for querying low-level system information.
            # Describes a single graphics processor (GPU).
            GPUDevice = Union[GPUDevice]
            # Describes the width and height dimensions of an entity.
            Size = Union[Size]
            # Describes a supported video decoding profile with its associated minimum and maximum resolutions.
            VideoDecodeAcceleratorCapability = Union[VideoDecodeAcceleratorCapability]
            # Describes a supported video encoding profile with its associated maximum resolution and maximum framerate.
            VideoEncodeAcceleratorCapability = Union[VideoEncodeAcceleratorCapability]
            # YUV subsampling type of the pixels of a given image.
            SubsamplingFormat = Literal['yuv420', 'yuv422', 'yuv444']
            # Image format of a given image.
            ImageType = Literal['jpeg', 'webp', 'unknown']
            # Describes a supported image decoding profile with its associated minimum and maximum resolutions and subsampling.
            ImageDecodeAcceleratorCapability = Union[ImageDecodeAcceleratorCapability]
            # Provides information about the GPU(s) on the system.
            GPUInfo = Union[GPUInfo]
            # Represents process info.
            ProcessInfo = Union[ProcessInfo]
            # Returns information about the system.
            getInfoParameters = None
            # Returns information about the system.
            getInfoReturnValues = Union[getInfoReturnValues]
            # Returns information about all running processes.
            getProcessInfoParameters = None
            # Returns information about all running processes.
            getProcessInfoReturnValues = Union[getProcessInfoReturnValues]

        class Target:
            # Supports additional targets discovery and allows to attach to them.
            TargetID = str
            # Unique identifier of attached debugging session.
            SessionID = str
            TargetInfo = Union[TargetInfo]
            RemoteLocation = Union[RemoteLocation]
            # Issued when attached to target because of auto-attach or `attachToTarget` command.
            attachedToTargetPayload = Union[attachedToTargetPayload]
            # Issued when detached from target for any reason (including `detachFromTarget` command). Can be issued multiple times per target if multiple sessions have been attached to it.
            detachedFromTargetPayload = Union[detachedFromTargetPayload]
            # Notifies about a new protocol message received from the session (as reported in `attachedToTarget` event).
            receivedMessageFromTargetPayload = Union[receivedMessageFromTargetPayload]
            # Issued when a possible inspection target is created.
            targetCreatedPayload = Union[targetCreatedPayload]
            # Issued when a target is destroyed.
            targetDestroyedPayload = Union[targetDestroyedPayload]
            # Issued when a target has crashed.
            targetCrashedPayload = Union[targetCrashedPayload]
            # Issued when some information about a target has changed. This only happens between `targetCreated` and `targetDestroyed`.
            targetInfoChangedPayload = Union[targetInfoChangedPayload]
            # Activates (focuses) the target.
            activateTargetParameters = None
            # Activates (focuses) the target.
            activateTargetReturnValues = None
            # Attaches to the target with given id.
            attachToTargetParameters = None
            # Attaches to the target with given id.
            attachToTargetReturnValues = Union[attachToTargetReturnValues]
            # Attaches to the browser target, only uses flat sessionId mode.
            attachToBrowserTargetParameters = None
            # Attaches to the browser target, only uses flat sessionId mode.
            attachToBrowserTargetReturnValues = Union[attachToBrowserTargetReturnValues]
            # Closes the target. If the target is a page that gets closed too.
            closeTargetParameters = None
            # Closes the target. If the target is a page that gets closed too.
            closeTargetReturnValues = Union[closeTargetReturnValues]
            # Inject object to the target's main frame that provides a communication channel with browser target.  Injected object will be available as `window[bindingName]`.  The object has the follwing API: - `binding.send(json)` - a method to send messages over the remote debugging protocol - `binding.onmessage = json => handleMessage(json)` - a callback that will be called for the protocol notifications and command responses.
            exposeDevToolsProtocolParameters = None
            # Inject object to the target's main frame that provides a communication channel with browser target.  Injected object will be available as `window[bindingName]`.  The object has the follwing API: - `binding.send(json)` - a method to send messages over the remote debugging protocol - `binding.onmessage = json => handleMessage(json)` - a callback that will be called for the protocol notifications and command responses.
            exposeDevToolsProtocolReturnValues = None
            # Creates a new empty BrowserContext. Similar to an incognito profile but you can have more than one.
            createBrowserContextParameters = None
            # Creates a new empty BrowserContext. Similar to an incognito profile but you can have more than one.
            createBrowserContextReturnValues = Union[createBrowserContextReturnValues]
            # Returns all browser contexts created with `Target.createBrowserContext` method.
            getBrowserContextsParameters = None
            # Returns all browser contexts created with `Target.createBrowserContext` method.
            getBrowserContextsReturnValues = Union[getBrowserContextsReturnValues]
            # Creates a new page.
            createTargetParameters = None
            # Creates a new page.
            createTargetReturnValues = Union[createTargetReturnValues]
            # Detaches session with given id.
            detachFromTargetParameters = None
            # Detaches session with given id.
            detachFromTargetReturnValues = None
            # Deletes a BrowserContext. All the belonging pages will be closed without calling their beforeunload hooks.
            disposeBrowserContextParameters = None
            # Deletes a BrowserContext. All the belonging pages will be closed without calling their beforeunload hooks.
            disposeBrowserContextReturnValues = None
            # Returns information about a target.
            getTargetInfoParameters = None
            # Returns information about a target.
            getTargetInfoReturnValues = Union[getTargetInfoReturnValues]
            # Retrieves a list of available targets.
            getTargetsParameters = None
            # Retrieves a list of available targets.
            getTargetsReturnValues = Union[getTargetsReturnValues]
            # Sends protocol message over session with given id. Consider using flat mode instead; see commands attachToTarget, setAutoAttach, and crbug.com/991325.
            sendMessageToTargetParameters = None
            # Sends protocol message over session with given id. Consider using flat mode instead; see commands attachToTarget, setAutoAttach, and crbug.com/991325.
            sendMessageToTargetReturnValues = None
            # Controls whether to automatically attach to new targets which are considered to be related to this one. When turned on, attaches to all existing related targets as well. When turned off, automatically detaches from all currently attached targets.
            setAutoAttachParameters = None
            # Controls whether to automatically attach to new targets which are considered to be related to this one. When turned on, attaches to all existing related targets as well. When turned off, automatically detaches from all currently attached targets.
            setAutoAttachReturnValues = None
            # Controls whether to discover available targets and notify via `targetCreated/targetInfoChanged/targetDestroyed` events.
            setDiscoverTargetsParameters = None
            # Controls whether to discover available targets and notify via `targetCreated/targetInfoChanged/targetDestroyed` events.
            setDiscoverTargetsReturnValues = None
            # Enables target discovery for the specified locations, when `setDiscoverTargets` was set to `true`.
            setRemoteLocationsParameters = None
            # Enables target discovery for the specified locations, when `setDiscoverTargets` was set to `true`.
            setRemoteLocationsReturnValues = None

        class Tethering:
            # The Tethering domain defines methods and events for browser port binding.
            # Informs that port was successfully bound and got a specified connection id.
            acceptedPayload = Union[acceptedPayload]
            # Request browser port binding.
            bindParameters = None
            # Request browser port binding.
            bindReturnValues = None
            # Request browser port unbinding.
            unbindParameters = None
            # Request browser port unbinding.
            unbindReturnValues = None

        class Tracing:
            # Configuration for memory dump. Used only when "memory-infra" category is enabled.
            MemoryDumpConfig = Dict[str, str]
            TraceConfig = Union[TraceConfig]
            # Data format of a trace. Can be either the legacy JSON format or the protocol buffer format. Note that the JSON format will be deprecated soon.
            StreamFormat = Literal['json', 'proto']
            # Compression type to use for traces returned via streams.
            StreamCompression = Literal['none', 'gzip']
            bufferUsagePayload = Union[bufferUsagePayload]
            # Contains an bucket of collected trace events. When tracing is stopped collected events will be send as a sequence of dataCollected events followed by tracingComplete event.
            dataCollectedPayload = Union[dataCollectedPayload]
            # Signals that tracing is stopped and there is no trace buffers pending flush, all data were delivered via dataCollected events.
            tracingCompletePayload = Union[tracingCompletePayload]
            # Stop trace events collection.
            endParameters = None
            # Stop trace events collection.
            endReturnValues = None
            # Gets supported tracing categories.
            getCategoriesParameters = None
            # Gets supported tracing categories.
            getCategoriesReturnValues = Union[getCategoriesReturnValues]
            # Record a clock sync marker in the trace.
            recordClockSyncMarkerParameters = None
            # Record a clock sync marker in the trace.
            recordClockSyncMarkerReturnValues = None
            # Request a global memory dump.
            requestMemoryDumpParameters = None
            # Request a global memory dump.
            requestMemoryDumpReturnValues = Union[requestMemoryDumpReturnValues]
            # Start trace events collection.
            startParameters = None
            # Start trace events collection.
            startReturnValues = None

        class Fetch:
            # A domain for letting clients substitute browser's network layer with client code.
            # Unique request identifier.
            RequestId = str
            # Stages of the request to handle. Request will intercept before the request is sent. Response will intercept after the response is received (but before response body is received.
            RequestStage = Literal['Request', 'Response']
            RequestPattern = Union[RequestPattern]
            # Response HTTP header entry
            HeaderEntry = Union[HeaderEntry]
            # Authorization challenge for HTTP status code 401 or 407.
            AuthChallenge = Union[AuthChallenge]
            # Response to an AuthChallenge.
            AuthChallengeResponse = Union[AuthChallengeResponse]
            # Issued when the domain is enabled and the request URL matches the specified filter. The request is paused until the client responds with one of continueRequest, failRequest or fulfillRequest. The stage of the request can be determined by presence of responseErrorReason and responseStatusCode -- the request is at the response stage if either of these fields is present and in the request stage otherwise.
            requestPausedPayload = Union[requestPausedPayload]
            # Issued when the domain is enabled with handleAuthRequests set to true. The request is paused until client responds with continueWithAuth.
            authRequiredPayload = Union[authRequiredPayload]
            # Disables the fetch domain.
            disableParameters = None
            # Disables the fetch domain.
            disableReturnValues = None
            # Enables issuing of requestPaused events. A request will be paused until client calls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.
            enableParameters = None
            # Enables issuing of requestPaused events. A request will be paused until client calls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.
            enableReturnValues = None
            # Causes the request to fail with specified reason.
            failRequestParameters = None
            # Causes the request to fail with specified reason.
            failRequestReturnValues = None
            # Provides response to the request.
            fulfillRequestParameters = None
            # Provides response to the request.
            fulfillRequestReturnValues = None
            # Continues the request, optionally modifying some of its parameters.
            continueRequestParameters = None
            # Continues the request, optionally modifying some of its parameters.
            continueRequestReturnValues = None
            # Continues a request supplying authChallengeResponse following authRequired event.
            continueWithAuthParameters = None
            # Continues a request supplying authChallengeResponse following authRequired event.
            continueWithAuthReturnValues = None
            # Causes the body of the response to be received from the server and returned as a single string. May only be issued for a request that is paused in the Response stage and is mutually exclusive with takeResponseBodyForInterceptionAsStream. Calling other methods that affect the request or disabling fetch domain before body is received results in an undefined behavior.
            getResponseBodyParameters = None
            # Causes the body of the response to be received from the server and returned as a single string. May only be issued for a request that is paused in the Response stage and is mutually exclusive with takeResponseBodyForInterceptionAsStream. Calling other methods that affect the request or disabling fetch domain before body is received results in an undefined behavior.
            getResponseBodyReturnValues = Union[getResponseBodyReturnValues]
            # Returns a handle to the stream representing the response body. The request must be paused in the HeadersReceived stage. Note that after this command the request can't be continued as is -- client either needs to cancel it or to provide the response body. The stream only supports sequential read, IO.read will fail if the position is specified. This method is mutually exclusive with getResponseBody. Calling other methods that affect the request or disabling fetch domain before body is received results in an undefined behavior.
            takeResponseBodyAsStreamParameters = None
            # Returns a handle to the stream representing the response body. The request must be paused in the HeadersReceived stage. Note that after this command the request can't be continued as is -- client either needs to cancel it or to provide the response body. The stream only supports sequential read, IO.read will fail if the position is specified. This method is mutually exclusive with getResponseBody. Calling other methods that affect the request or disabling fetch domain before body is received results in an undefined behavior.
            takeResponseBodyAsStreamReturnValues = Union[takeResponseBodyAsStreamReturnValues]

        class WebAudio:
            # This domain allows inspection of Web Audio API. https://webaudio.github.io/web-audio-api/
            # An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API
            GraphObjectId = str
            # Enum of BaseAudioContext types
            ContextType = Literal['realtime', 'offline']
            # Enum of AudioContextState from the spec
            ContextState = Literal['suspended', 'running', 'closed']
            # Enum of AudioNode types
            NodeType = str
            # Enum of AudioNode::ChannelCountMode from the spec
            ChannelCountMode = Literal['clamped-max', 'explicit', 'max']
            # Enum of AudioNode::ChannelInterpretation from the spec
            ChannelInterpretation = Literal['discrete', 'speakers']
            # Enum of AudioParam types
            ParamType = str
            # Enum of AudioParam::AutomationRate from the spec
            AutomationRate = Literal['a-rate', 'k-rate']
            # Fields in AudioContext that change in real-time.
            ContextRealtimeData = Union[ContextRealtimeData]
            # Protocol object for BaseAudioContext
            BaseAudioContext = Union[BaseAudioContext]
            # Protocol object for AudioListner
            AudioListener = Union[AudioListener]
            # Protocol object for AudioNode
            AudioNode = Union[AudioNode]
            # Protocol object for AudioParam
            AudioParam = Union[AudioParam]
            # Notifies that a new BaseAudioContext has been created.
            contextCreatedPayload = Union[contextCreatedPayload]
            # Notifies that an existing BaseAudioContext will be destroyed.
            contextWillBeDestroyedPayload = Union[contextWillBeDestroyedPayload]
            # Notifies that existing BaseAudioContext has changed some properties (id stays the same)..
            contextChangedPayload = Union[contextChangedPayload]
            # Notifies that the construction of an AudioListener has finished.
            audioListenerCreatedPayload = Union[audioListenerCreatedPayload]
            # Notifies that a new AudioListener has been created.
            audioListenerWillBeDestroyedPayload = Union[audioListenerWillBeDestroyedPayload]
            # Notifies that a new AudioNode has been created.
            audioNodeCreatedPayload = Union[audioNodeCreatedPayload]
            # Notifies that an existing AudioNode has been destroyed.
            audioNodeWillBeDestroyedPayload = Union[audioNodeWillBeDestroyedPayload]
            # Notifies that a new AudioParam has been created.
            audioParamCreatedPayload = Union[audioParamCreatedPayload]
            # Notifies that an existing AudioParam has been destroyed.
            audioParamWillBeDestroyedPayload = Union[audioParamWillBeDestroyedPayload]
            # Notifies that two AudioNodes are connected.
            nodesConnectedPayload = Union[nodesConnectedPayload]
            # Notifies that AudioNodes are disconnected. The destination can be null, and it means all the outgoing connections from the source are disconnected.
            nodesDisconnectedPayload = Union[nodesDisconnectedPayload]
            # Notifies that an AudioNode is connected to an AudioParam.
            nodeParamConnectedPayload = Union[nodeParamConnectedPayload]
            # Notifies that an AudioNode is disconnected to an AudioParam.
            nodeParamDisconnectedPayload = Union[nodeParamDisconnectedPayload]
            # Enables the WebAudio domain and starts sending context lifetime events.
            enableParameters = None
            # Enables the WebAudio domain and starts sending context lifetime events.
            enableReturnValues = None
            # Disables the WebAudio domain.
            disableParameters = None
            # Disables the WebAudio domain.
            disableReturnValues = None
            # Fetch the realtime data from the registered contexts.
            getRealtimeDataParameters = None
            # Fetch the realtime data from the registered contexts.
            getRealtimeDataReturnValues = Union[getRealtimeDataReturnValues]

        class WebAuthn:
            # This domain allows configuring virtual authenticators to test the WebAuthn API.
            AuthenticatorId = str
            AuthenticatorProtocol = Literal['u2f', 'ctap2']
            AuthenticatorTransport = Literal['usb', 'nfc', 'ble', 'cable', 'internal']
            VirtualAuthenticatorOptions = Union[VirtualAuthenticatorOptions]
            Credential = Union[Credential]
            # Enable the WebAuthn domain and start intercepting credential storage and retrieval with a virtual authenticator.
            enableParameters = None
            # Enable the WebAuthn domain and start intercepting credential storage and retrieval with a virtual authenticator.
            enableReturnValues = None
            # Disable the WebAuthn domain.
            disableParameters = None
            # Disable the WebAuthn domain.
            disableReturnValues = None
            # Creates and adds a virtual authenticator.
            addVirtualAuthenticatorParameters = None
            # Creates and adds a virtual authenticator.
            addVirtualAuthenticatorReturnValues = Union[addVirtualAuthenticatorReturnValues]
            # Removes the given authenticator.
            removeVirtualAuthenticatorParameters = None
            # Removes the given authenticator.
            removeVirtualAuthenticatorReturnValues = None
            # Adds the credential to the specified authenticator.
            addCredentialParameters = None
            # Adds the credential to the specified authenticator.
            addCredentialReturnValues = None
            # Returns a single credential stored in the given virtual authenticator that matches the credential ID.
            getCredentialParameters = None
            # Returns a single credential stored in the given virtual authenticator that matches the credential ID.
            getCredentialReturnValues = Union[getCredentialReturnValues]
            # Returns all the credentials stored in the given virtual authenticator.
            getCredentialsParameters = None
            # Returns all the credentials stored in the given virtual authenticator.
            getCredentialsReturnValues = Union[getCredentialsReturnValues]
            # Removes a credential from the authenticator.
            removeCredentialParameters = None
            # Removes a credential from the authenticator.
            removeCredentialReturnValues = None
            # Clears all the credentials from the specified device.
            clearCredentialsParameters = None
            # Clears all the credentials from the specified device.
            clearCredentialsReturnValues = None
            # Sets whether User Verification succeeds or fails for an authenticator. The default is true.
            setUserVerifiedParameters = None
            # Sets whether User Verification succeeds or fails for an authenticator. The default is true.
            setUserVerifiedReturnValues = None

        class Media:
            # This domain allows detailed inspection of media elements
            # Players will get an ID that is unique within the agent context.
            PlayerId = str
            Timestamp = float
            # Player Property type
            PlayerProperty = Union[PlayerProperty]
            # Break out events into different types
            PlayerEventType = Literal['playbackEvent', 'systemEvent', 'messageEvent']
            PlayerEvent = Union[PlayerEvent]
            # This can be called multiple times, and can be used to set / override / remove player properties. A null propValue indicates removal.
            playerPropertiesChangedPayload = Union[playerPropertiesChangedPayload]
            # Send events as a list, allowing them to be batched on the browser for less congestion. If batched, events must ALWAYS be in chronological order.
            playerEventsAddedPayload = Union[playerEventsAddedPayload]
            # Called whenever a player is created, or when a new agent joins and recieves a list of active players. If an agent is restored, it will recieve the full list of player ids and all events again.
            playersCreatedPayload = Union[playersCreatedPayload]
            # Enables the Media domain
            enableParameters = None
            # Enables the Media domain
            enableReturnValues = None
            # Disables the Media domain.
            disableParameters = None
            # Disables the Media domain.
            disableReturnValues = None

        class Console:
            # This domain is deprecated - use Runtime or Log instead.
            # Console message.
            ConsoleMessage = Union[ConsoleMessage]
            # Issued when new console message is added.
            messageAddedPayload = Union[messageAddedPayload]
            # Does nothing.
            clearMessagesParameters = None
            # Does nothing.
            clearMessagesReturnValues = None
            # Disables console domain, prevents further console messages from being reported to the client.
            disableParameters = None
            # Disables console domain, prevents further console messages from being reported to the client.
            disableReturnValues = None
            # Enables console domain, sends the messages collected so far to the client by means of the `messageAdded` notification.
            enableParameters = None
            # Enables console domain, sends the messages collected so far to the client by means of the `messageAdded` notification.
            enableReturnValues = None

        class Debugger:
            # Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc.
            # Breakpoint identifier.
            BreakpointId = str
            # Call frame identifier.
            CallFrameId = str
            # Location in the source code.
            Location = Union[Location]
            # Location in the source code.
            ScriptPosition = Union[ScriptPosition]
            # JavaScript call frame. Array of call frames form the call stack.
            CallFrame = Union[CallFrame]
            # Scope description.
            Scope = Union[Scope]
            # Search match for resource.
            SearchMatch = Union[SearchMatch]
            BreakLocation = Union[BreakLocation]
            # Fired when breakpoint is resolved to an actual script and location.
            breakpointResolvedPayload = Union[breakpointResolvedPayload]
            # Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
            pausedPayload = Union[pausedPayload]
            # Fired when the virtual machine resumed execution.
            resumedPayload = None
            # Fired when virtual machine fails to parse the script.
            scriptFailedToParsePayload = Union[scriptFailedToParsePayload]
            # Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.
            scriptParsedPayload = Union[scriptParsedPayload]
            # Continues execution until specific location is reached.
            continueToLocationParameters = None
            # Continues execution until specific location is reached.
            continueToLocationReturnValues = None
            # Disables debugger for given page.
            disableParameters = None
            # Disables debugger for given page.
            disableReturnValues = None
            # Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.
            enableParameters = None
            # Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.
            enableReturnValues = Union[enableReturnValues]
            # Evaluates expression on a given call frame.
            evaluateOnCallFrameParameters = None
            # Evaluates expression on a given call frame.
            evaluateOnCallFrameReturnValues = Union[evaluateOnCallFrameReturnValues]
            # Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.
            getPossibleBreakpointsParameters = None
            # Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.
            getPossibleBreakpointsReturnValues = Union[getPossibleBreakpointsReturnValues]
            # Returns source for the script with given id.
            getScriptSourceParameters = None
            # Returns source for the script with given id.
            getScriptSourceReturnValues = Union[getScriptSourceReturnValues]
            # This command is deprecated. Use getScriptSource instead.
            getWasmBytecodeParameters = None
            # This command is deprecated. Use getScriptSource instead.
            getWasmBytecodeReturnValues = Union[getWasmBytecodeReturnValues]
            # Returns stack trace with given `stackTraceId`.
            getStackTraceParameters = None
            # Returns stack trace with given `stackTraceId`.
            getStackTraceReturnValues = Union[getStackTraceReturnValues]
            # Stops on the next JavaScript statement.
            pauseParameters = None
            # Stops on the next JavaScript statement.
            pauseReturnValues = None
            pauseOnAsyncCallParameters = None
            pauseOnAsyncCallReturnValues = None
            # Removes JavaScript breakpoint.
            removeBreakpointParameters = None
            # Removes JavaScript breakpoint.
            removeBreakpointReturnValues = None
            # Restarts particular call frame from the beginning.
            restartFrameParameters = None
            # Restarts particular call frame from the beginning.
            restartFrameReturnValues = Union[restartFrameReturnValues]
            # Resumes JavaScript execution.
            resumeParameters = None
            # Resumes JavaScript execution.
            resumeReturnValues = None
            # Searches for given string in script content.
            searchInContentParameters = None
            # Searches for given string in script content.
            searchInContentReturnValues = Union[searchInContentReturnValues]
            # Enables or disables async call stacks tracking.
            setAsyncCallStackDepthParameters = None
            # Enables or disables async call stacks tracking.
            setAsyncCallStackDepthReturnValues = None
            # Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
            setBlackboxPatternsParameters = None
            # Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
            setBlackboxPatternsReturnValues = None
            # Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.
            setBlackboxedRangesParameters = None
            # Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.
            setBlackboxedRangesReturnValues = None
            # Sets JavaScript breakpoint at a given location.
            setBreakpointParameters = None
            # Sets JavaScript breakpoint at a given location.
            setBreakpointReturnValues = Union[setBreakpointReturnValues]
            # Sets instrumentation breakpoint.
            setInstrumentationBreakpointParameters = None
            # Sets instrumentation breakpoint.
            setInstrumentationBreakpointReturnValues = Union[setInstrumentationBreakpointReturnValues]
            # Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in `locations` property. Further matching script parsing will result in subsequent `breakpointResolved` events issued. This logical breakpoint will survive page reloads.
            setBreakpointByUrlParameters = None
            # Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in `locations` property. Further matching script parsing will result in subsequent `breakpointResolved` events issued. This logical breakpoint will survive page reloads.
            setBreakpointByUrlReturnValues = Union[setBreakpointByUrlReturnValues]
            # Sets JavaScript breakpoint before each call to the given function. If another function was created from the same source as a given one, calling it will also trigger the breakpoint.
            setBreakpointOnFunctionCallParameters = None
            # Sets JavaScript breakpoint before each call to the given function. If another function was created from the same source as a given one, calling it will also trigger the breakpoint.
            setBreakpointOnFunctionCallReturnValues = Union[setBreakpointOnFunctionCallReturnValues]
            # Activates / deactivates all breakpoints on the page.
            setBreakpointsActiveParameters = None
            # Activates / deactivates all breakpoints on the page.
            setBreakpointsActiveReturnValues = None
            # Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is `none`.
            setPauseOnExceptionsParameters = None
            # Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is `none`.
            setPauseOnExceptionsReturnValues = None
            # Changes return value in top frame. Available only at return break position.
            setReturnValueParameters = None
            # Changes return value in top frame. Available only at return break position.
            setReturnValueReturnValues = None
            # Edits JavaScript source live.
            setScriptSourceParameters = None
            # Edits JavaScript source live.
            setScriptSourceReturnValues = Union[setScriptSourceReturnValues]
            # Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
            setSkipAllPausesParameters = None
            # Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
            setSkipAllPausesReturnValues = None
            # Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.
            setVariableValueParameters = None
            # Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.
            setVariableValueReturnValues = None
            # Steps into the function call.
            stepIntoParameters = None
            # Steps into the function call.
            stepIntoReturnValues = None
            # Steps out of the function call.
            stepOutParameters = None
            # Steps out of the function call.
            stepOutReturnValues = None
            # Steps over the statement.
            stepOverParameters = None
            # Steps over the statement.
            stepOverReturnValues = None

        class HeapProfiler:
            # Heap snapshot object id.
            HeapSnapshotObjectId = str
            # Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.
            SamplingHeapProfileNode = Union[SamplingHeapProfileNode]
            # A single sample from a sampling profile.
            SamplingHeapProfileSample = Union[SamplingHeapProfileSample]
            # Sampling profile.
            SamplingHeapProfile = Union[SamplingHeapProfile]
            addHeapSnapshotChunkPayload = Union[addHeapSnapshotChunkPayload]
            # If heap objects tracking has been started then backend may send update for one or more fragments
            heapStatsUpdatePayload = Union[heapStatsUpdatePayload]
            # If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
            lastSeenObjectIdPayload = Union[lastSeenObjectIdPayload]
            reportHeapSnapshotProgressPayload = Union[reportHeapSnapshotProgressPayload]
            resetProfilesPayload = None
            # Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            addInspectedHeapObjectParameters = None
            # Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
            addInspectedHeapObjectReturnValues = None
            collectGarbageParameters = None
            collectGarbageReturnValues = None
            disableParameters = None
            disableReturnValues = None
            enableParameters = None
            enableReturnValues = None
            getHeapObjectIdParameters = None
            getHeapObjectIdReturnValues = Union[getHeapObjectIdReturnValues]
            getObjectByHeapObjectIdParameters = None
            getObjectByHeapObjectIdReturnValues = Union[getObjectByHeapObjectIdReturnValues]
            getSamplingProfileParameters = None
            getSamplingProfileReturnValues = Union[getSamplingProfileReturnValues]
            startSamplingParameters = None
            startSamplingReturnValues = None
            startTrackingHeapObjectsParameters = None
            startTrackingHeapObjectsReturnValues = None
            stopSamplingParameters = None
            stopSamplingReturnValues = Union[stopSamplingReturnValues]
            stopTrackingHeapObjectsParameters = None
            stopTrackingHeapObjectsReturnValues = None
            takeHeapSnapshotParameters = None
            takeHeapSnapshotReturnValues = None

        class Profiler:
            # Profile node. Holds callsite information, execution statistics and child nodes.
            ProfileNode = Union[ProfileNode]
            # Profile.
            Profile = Union[Profile]
            # Specifies a number of samples attributed to a certain source position.
            PositionTickInfo = Union[PositionTickInfo]
            # Coverage data for a source range.
            CoverageRange = Union[CoverageRange]
            # Coverage data for a JavaScript function.
            FunctionCoverage = Union[FunctionCoverage]
            # Coverage data for a JavaScript script.
            ScriptCoverage = Union[ScriptCoverage]
            # Describes a type collected during runtime.
            TypeObject = Union[TypeObject]
            # Source offset and types for a parameter or return value.
            TypeProfileEntry = Union[TypeProfileEntry]
            # Type profile data collected during runtime for a JavaScript script.
            ScriptTypeProfile = Union[ScriptTypeProfile]
            # Collected counter information.
            CounterInfo = Union[CounterInfo]
            consoleProfileFinishedPayload = Union[consoleProfileFinishedPayload]
            # Sent when new profile recording is started using console.profile() call.
            consoleProfileStartedPayload = Union[consoleProfileStartedPayload]
            disableParameters = None
            disableReturnValues = None
            enableParameters = None
            enableReturnValues = None
            # Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            getBestEffortCoverageParameters = None
            # Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
            getBestEffortCoverageReturnValues = Union[getBestEffortCoverageReturnValues]
            # Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
            setSamplingIntervalParameters = None
            # Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
            setSamplingIntervalReturnValues = None
            startParameters = None
            startReturnValues = None
            # Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.
            startPreciseCoverageParameters = None
            # Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.
            startPreciseCoverageReturnValues = None
            # Enable type profile.
            startTypeProfileParameters = None
            # Enable type profile.
            startTypeProfileReturnValues = None
            stopParameters = None
            stopReturnValues = Union[stopReturnValues]
            # Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.
            stopPreciseCoverageParameters = None
            # Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.
            stopPreciseCoverageReturnValues = None
            # Disable type profile. Disabling releases type profile data collected so far.
            stopTypeProfileParameters = None
            # Disable type profile. Disabling releases type profile data collected so far.
            stopTypeProfileReturnValues = None
            # Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.
            takePreciseCoverageParameters = None
            # Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.
            takePreciseCoverageReturnValues = Union[takePreciseCoverageReturnValues]
            # Collect type profile.
            takeTypeProfileParameters = None
            # Collect type profile.
            takeTypeProfileReturnValues = Union[takeTypeProfileReturnValues]
            # Enable run time call stats collection.
            enableRuntimeCallStatsParameters = None
            # Enable run time call stats collection.
            enableRuntimeCallStatsReturnValues = None
            # Disable run time call stats collection.
            disableRuntimeCallStatsParameters = None
            # Disable run time call stats collection.
            disableRuntimeCallStatsReturnValues = None
            # Retrieve run time call stats.
            getRuntimeCallStatsParameters = None
            # Retrieve run time call stats.
            getRuntimeCallStatsReturnValues = Union[getRuntimeCallStatsReturnValues]

        class Runtime:
            # Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group.
            # Unique script identifier.
            ScriptId = str
            # Unique object identifier.
            RemoteObjectId = str
            # Primitive value which cannot be JSON-stringified. Includes values `-0`, `NaN`, `Infinity`, `-Infinity`, and bigint literals.
            UnserializableValue = str
            # Mirror object referencing original JavaScript object.
            RemoteObject = Union[RemoteObject]
            CustomPreview = Union[CustomPreview]
            # Object containing abbreviated remote object value.
            ObjectPreview = Union[ObjectPreview]
            PropertyPreview = Union[PropertyPreview]
            EntryPreview = Union[EntryPreview]
            # Object property descriptor.
            PropertyDescriptor = Union[PropertyDescriptor]
            # Object internal property descriptor. This property isn't normally visible in JavaScript code.
            InternalPropertyDescriptor = Union[InternalPropertyDescriptor]
            # Object private field descriptor.
            PrivatePropertyDescriptor = Union[PrivatePropertyDescriptor]
            # Represents function call argument. Either remote object id `objectId`, primitive `value`, unserializable primitive value or neither of (for undefined) them should be specified.
            CallArgument = Union[CallArgument]
            # Id of an execution context.
            ExecutionContextId = int
            # Description of an isolated world.
            ExecutionContextDescription = Union[ExecutionContextDescription]
            # Detailed information about exception (or error) that was thrown during script compilation or execution.
            ExceptionDetails = Union[ExceptionDetails]
            # Number of milliseconds since epoch.
            Timestamp = float
            # Number of milliseconds.
            TimeDelta = float
            # Stack entry for runtime errors and assertions.
            CallFrame = Union[CallFrame]
            # Call frames for assertions or error messages.
            StackTrace = Union[StackTrace]
            # Unique identifier of current debugger.
            UniqueDebuggerId = str
            # If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This allows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages.
            StackTraceId = Union[StackTraceId]
            # Notification is issued every time when binding is called.
            bindingCalledPayload = Union[bindingCalledPayload]
            # Issued when console API was called.
            consoleAPICalledPayload = Union[consoleAPICalledPayload]
            # Issued when unhandled exception was revoked.
            exceptionRevokedPayload = Union[exceptionRevokedPayload]
            # Issued when exception was thrown and unhandled.
            exceptionThrownPayload = Union[exceptionThrownPayload]
            # Issued when new execution context is created.
            executionContextCreatedPayload = Union[executionContextCreatedPayload]
            # Issued when execution context is destroyed.
            executionContextDestroyedPayload = Union[executionContextDestroyedPayload]
            # Issued when all executionContexts were cleared in browser
            executionContextsClearedPayload = None
            # Issued when object should be inspected (for example, as a result of inspect() command line API call).
            inspectRequestedPayload = Union[inspectRequestedPayload]
            # Add handler to promise with given promise object id.
            awaitPromiseParameters = None
            # Add handler to promise with given promise object id.
            awaitPromiseReturnValues = Union[awaitPromiseReturnValues]
            # Calls function with given declaration on the given object. Object group of the result is inherited from the target object.
            callFunctionOnParameters = None
            # Calls function with given declaration on the given object. Object group of the result is inherited from the target object.
            callFunctionOnReturnValues = Union[callFunctionOnReturnValues]
            # Compiles expression.
            compileScriptParameters = None
            # Compiles expression.
            compileScriptReturnValues = Union[compileScriptReturnValues]
            # Disables reporting of execution contexts creation.
            disableParameters = None
            # Disables reporting of execution contexts creation.
            disableReturnValues = None
            # Discards collected exceptions and console API calls.
            discardConsoleEntriesParameters = None
            # Discards collected exceptions and console API calls.
            discardConsoleEntriesReturnValues = None
            # Enables reporting of execution contexts creation by means of `executionContextCreated` event. When the reporting gets enabled the event will be sent immediately for each existing execution context.
            enableParameters = None
            # Enables reporting of execution contexts creation by means of `executionContextCreated` event. When the reporting gets enabled the event will be sent immediately for each existing execution context.
            enableReturnValues = None
            # Evaluates expression on global object.
            evaluateParameters = None
            # Evaluates expression on global object.
            evaluateReturnValues = Union[evaluateReturnValues]
            # Returns the isolate id.
            getIsolateIdParameters = None
            # Returns the isolate id.
            getIsolateIdReturnValues = Union[getIsolateIdReturnValues]
            # Returns the JavaScript heap usage. It is the total usage of the corresponding isolate not scoped to a particular Runtime.
            getHeapUsageParameters = None
            # Returns the JavaScript heap usage. It is the total usage of the corresponding isolate not scoped to a particular Runtime.
            getHeapUsageReturnValues = Union[getHeapUsageReturnValues]
            # Returns properties of a given object. Object group of the result is inherited from the target object.
            getPropertiesParameters = None
            # Returns properties of a given object. Object group of the result is inherited from the target object.
            getPropertiesReturnValues = Union[getPropertiesReturnValues]
            # Returns all let, const and class variables from global scope.
            globalLexicalScopeNamesParameters = None
            # Returns all let, const and class variables from global scope.
            globalLexicalScopeNamesReturnValues = Union[globalLexicalScopeNamesReturnValues]
            queryObjectsParameters = None
            queryObjectsReturnValues = Union[queryObjectsReturnValues]
            # Releases remote object with given id.
            releaseObjectParameters = None
            # Releases remote object with given id.
            releaseObjectReturnValues = None
            # Releases all remote objects that belong to a given group.
            releaseObjectGroupParameters = None
            # Releases all remote objects that belong to a given group.
            releaseObjectGroupReturnValues = None
            # Tells inspected instance to run if it was waiting for debugger to attach.
            runIfWaitingForDebuggerParameters = None
            # Tells inspected instance to run if it was waiting for debugger to attach.
            runIfWaitingForDebuggerReturnValues = None
            # Runs script with given id in a given context.
            runScriptParameters = None
            # Runs script with given id in a given context.
            runScriptReturnValues = Union[runScriptReturnValues]
            # Enables or disables async call stacks tracking.
            setAsyncCallStackDepthParameters = None
            # Enables or disables async call stacks tracking.
            setAsyncCallStackDepthReturnValues = None
            setCustomObjectFormatterEnabledParameters = None
            setCustomObjectFormatterEnabledReturnValues = None
            setMaxCallStackSizeToCaptureParameters = None
            setMaxCallStackSizeToCaptureReturnValues = None
            # Terminate current or next JavaScript execution. Will cancel the termination when the outer-most script execution ends.
            terminateExecutionParameters = None
            # Terminate current or next JavaScript execution. Will cancel the termination when the outer-most script execution ends.
            terminateExecutionReturnValues = None
            # If executionContextId is empty, adds binding with the given name on the global objects of all inspected contexts, including those created later, bindings survive reloads. If executionContextId is specified, adds binding only on global object of given execution context. Binding function takes exactly one argument, this argument should be string, in case of any other input, function throws an exception. Each binding function call produces Runtime.bindingCalled notification.
            addBindingParameters = None
            # If executionContextId is empty, adds binding with the given name on the global objects of all inspected contexts, including those created later, bindings survive reloads. If executionContextId is specified, adds binding only on global object of given execution context. Binding function takes exactly one argument, this argument should be string, in case of any other input, function throws an exception. Each binding function call produces Runtime.bindingCalled notification.
            addBindingReturnValues = None
            # This method does not remove binding function from global object but unsubscribes current runtime agent from Runtime.bindingCalled notifications.
            removeBindingParameters = None
            # This method does not remove binding function from global object but unsubscribes current runtime agent from Runtime.bindingCalled notifications.
            removeBindingReturnValues = None

        class Schema:
            # This domain is deprecated.
            # Description of the protocol domain.
            Domain = Union[Domain]
            # Returns supported domains.
            getDomainsParameters = None
            # Returns supported domains.
            getDomainsReturnValues = Union[getDomainsReturnValues]

        class CommandParameters:
            class Accessibility:
                disableReturnValues = None
                enableReturnValues = None
                getPartialAXTreeReturnValues = getPartialAXTreeReturnValues
                getFullAXTreeReturnValues = getFullAXTreeReturnValues

            class Animation:
                disableReturnValues = None
                enableReturnValues = None
                getCurrentTimeReturnValues = getCurrentTimeReturnValues
                getPlaybackRateReturnValues = getPlaybackRateReturnValues
                releaseAnimationsReturnValues = None
                resolveAnimationReturnValues = resolveAnimationReturnValues
                seekAnimationsReturnValues = None
                setPausedReturnValues = None
                setPlaybackRateReturnValues = None
                setTimingReturnValues = None

            class ApplicationCache:
                enableReturnValues = None
                getApplicationCacheForFrameReturnValues = getApplicationCacheForFrameReturnValues
                getFramesWithManifestsReturnValues = getFramesWithManifestsReturnValues
                getManifestForFrameReturnValues = getManifestForFrameReturnValues

            class Audits:
                getEncodedResponseReturnValues = getEncodedResponseReturnValues

            class BackgroundService:
                startObservingReturnValues = None
                stopObservingReturnValues = None
                setRecordingReturnValues = None
                clearEventsReturnValues = None

            class Browser:
                setPermissionReturnValues = None
                grantPermissionsReturnValues = None
                resetPermissionsReturnValues = None
                closeReturnValues = None
                crashReturnValues = None
                crashGpuProcessReturnValues = None
                getVersionReturnValues = getVersionReturnValues
                getBrowserCommandLineReturnValues = getBrowserCommandLineReturnValues
                getHistogramsReturnValues = getHistogramsReturnValues
                getHistogramReturnValues = getHistogramReturnValues
                getWindowBoundsReturnValues = getWindowBoundsReturnValues
                getWindowForTargetReturnValues = getWindowForTargetReturnValues
                setWindowBoundsReturnValues = None
                setDockTileReturnValues = None

            class CSS:
                addRuleReturnValues = addRuleReturnValues
                collectClassNamesReturnValues = collectClassNamesReturnValues
                createStyleSheetReturnValues = createStyleSheetReturnValues
                disableReturnValues = None
                enableReturnValues = None
                forcePseudoStateReturnValues = None
                getBackgroundColorsReturnValues = getBackgroundColorsReturnValues
                getComputedStyleForNodeReturnValues = getComputedStyleForNodeReturnValues
                getInlineStylesForNodeReturnValues = getInlineStylesForNodeReturnValues
                getMatchedStylesForNodeReturnValues = getMatchedStylesForNodeReturnValues
                getMediaQueriesReturnValues = getMediaQueriesReturnValues
                getPlatformFontsForNodeReturnValues = getPlatformFontsForNodeReturnValues
                getStyleSheetTextReturnValues = getStyleSheetTextReturnValues
                setEffectivePropertyValueForNodeReturnValues = None
                setKeyframeKeyReturnValues = setKeyframeKeyReturnValues
                setMediaTextReturnValues = setMediaTextReturnValues
                setRuleSelectorReturnValues = setRuleSelectorReturnValues
                setStyleSheetTextReturnValues = setStyleSheetTextReturnValues
                setStyleTextsReturnValues = setStyleTextsReturnValues
                startRuleUsageTrackingReturnValues = None
                stopRuleUsageTrackingReturnValues = stopRuleUsageTrackingReturnValues
                takeCoverageDeltaReturnValues = takeCoverageDeltaReturnValues

            class CacheStorage:
                deleteCacheReturnValues = None
                deleteEntryReturnValues = None
                requestCacheNamesReturnValues = requestCacheNamesReturnValues
                requestCachedResponseReturnValues = requestCachedResponseReturnValues
                requestEntriesReturnValues = requestEntriesReturnValues

            class Cast:
                enableReturnValues = None
                disableReturnValues = None
                setSinkToUseReturnValues = None
                startTabMirroringReturnValues = None
                stopCastingReturnValues = None

            class DOM:
                collectClassNamesFromSubtreeReturnValues = collectClassNamesFromSubtreeReturnValues
                copyToReturnValues = copyToReturnValues
                describeNodeReturnValues = describeNodeReturnValues
                disableReturnValues = None
                discardSearchResultsReturnValues = None
                enableReturnValues = None
                focusReturnValues = None
                getAttributesReturnValues = getAttributesReturnValues
                getBoxModelReturnValues = getBoxModelReturnValues
                getContentQuadsReturnValues = getContentQuadsReturnValues
                getDocumentReturnValues = getDocumentReturnValues
                getFlattenedDocumentReturnValues = getFlattenedDocumentReturnValues
                getNodeForLocationReturnValues = getNodeForLocationReturnValues
                getOuterHTMLReturnValues = getOuterHTMLReturnValues
                getRelayoutBoundaryReturnValues = getRelayoutBoundaryReturnValues
                getSearchResultsReturnValues = getSearchResultsReturnValues
                hideHighlightReturnValues = None
                highlightNodeReturnValues = None
                highlightRectReturnValues = None
                markUndoableStateReturnValues = None
                moveToReturnValues = moveToReturnValues
                performSearchReturnValues = performSearchReturnValues
                pushNodeByPathToFrontendReturnValues = pushNodeByPathToFrontendReturnValues
                pushNodesByBackendIdsToFrontendReturnValues = pushNodesByBackendIdsToFrontendReturnValues
                querySelectorReturnValues = querySelectorReturnValues
                querySelectorAllReturnValues = querySelectorAllReturnValues
                redoReturnValues = None
                removeAttributeReturnValues = None
                removeNodeReturnValues = None
                requestChildNodesReturnValues = None
                requestNodeReturnValues = requestNodeReturnValues
                resolveNodeReturnValues = resolveNodeReturnValues
                setAttributeValueReturnValues = None
                setAttributesAsTextReturnValues = None
                setFileInputFilesReturnValues = None
                setNodeStackTracesEnabledReturnValues = None
                getNodeStackTracesReturnValues = getNodeStackTracesReturnValues
                getFileInfoReturnValues = getFileInfoReturnValues
                setInspectedNodeReturnValues = None
                setNodeNameReturnValues = setNodeNameReturnValues
                setNodeValueReturnValues = None
                setOuterHTMLReturnValues = None
                undoReturnValues = None
                getFrameOwnerReturnValues = getFrameOwnerReturnValues

            class DOMDebugger:
                getEventListenersReturnValues = getEventListenersReturnValues
                removeDOMBreakpointReturnValues = None
                removeEventListenerBreakpointReturnValues = None
                removeInstrumentationBreakpointReturnValues = None
                removeXHRBreakpointReturnValues = None
                setDOMBreakpointReturnValues = None
                setEventListenerBreakpointReturnValues = None
                setInstrumentationBreakpointReturnValues = None
                setXHRBreakpointReturnValues = None

            class DOMSnapshot:
                disableReturnValues = None
                enableReturnValues = None
                getSnapshotReturnValues = getSnapshotReturnValues
                captureSnapshotReturnValues = captureSnapshotReturnValues

            class DOMStorage:
                clearReturnValues = None
                disableReturnValues = None
                enableReturnValues = None
                getDOMStorageItemsReturnValues = getDOMStorageItemsReturnValues
                removeDOMStorageItemReturnValues = None
                setDOMStorageItemReturnValues = None

            class Database:
                disableReturnValues = None
                enableReturnValues = None
                executeSQLReturnValues = executeSQLReturnValues
                getDatabaseTableNamesReturnValues = getDatabaseTableNamesReturnValues

            class DeviceOrientation:
                clearDeviceOrientationOverrideReturnValues = None
                setDeviceOrientationOverrideReturnValues = None

            class Emulation:
                canEmulateReturnValues = canEmulateReturnValues
                clearDeviceMetricsOverrideReturnValues = None
                clearGeolocationOverrideReturnValues = None
                resetPageScaleFactorReturnValues = None
                setFocusEmulationEnabledReturnValues = None
                setCPUThrottlingRateReturnValues = None
                setDefaultBackgroundColorOverrideReturnValues = None
                setDeviceMetricsOverrideReturnValues = None
                setScrollbarsHiddenReturnValues = None
                setDocumentCookieDisabledReturnValues = None
                setEmitTouchEventsForMouseReturnValues = None
                setEmulatedMediaReturnValues = None
                setGeolocationOverrideReturnValues = None
                setNavigatorOverridesReturnValues = None
                setPageScaleFactorReturnValues = None
                setScriptExecutionDisabledReturnValues = None
                setTouchEmulationEnabledReturnValues = None
                setVirtualTimePolicyReturnValues = setVirtualTimePolicyReturnValues
                setTimezoneOverrideReturnValues = None
                setVisibleSizeReturnValues = None
                setUserAgentOverrideReturnValues = None

            class HeadlessExperimental:
                beginFrameReturnValues = beginFrameReturnValues
                disableReturnValues = None
                enableReturnValues = None

            class IO:
                closeReturnValues = None
                readReturnValues = readReturnValues
                resolveBlobReturnValues = resolveBlobReturnValues

            class IndexedDB:
                clearObjectStoreReturnValues = None
                deleteDatabaseReturnValues = None
                deleteObjectStoreEntriesReturnValues = None
                disableReturnValues = None
                enableReturnValues = None
                requestDataReturnValues = requestDataReturnValues
                getMetadataReturnValues = getMetadataReturnValues
                requestDatabaseReturnValues = requestDatabaseReturnValues
                requestDatabaseNamesReturnValues = requestDatabaseNamesReturnValues

            class Input:
                dispatchKeyEventReturnValues = None
                insertTextReturnValues = None
                dispatchMouseEventReturnValues = None
                dispatchTouchEventReturnValues = None
                emulateTouchFromMouseEventReturnValues = None
                setIgnoreInputEventsReturnValues = None
                synthesizePinchGestureReturnValues = None
                synthesizeScrollGestureReturnValues = None
                synthesizeTapGestureReturnValues = None

            class Inspector:
                disableReturnValues = None
                enableReturnValues = None

            class LayerTree:
                compositingReasonsReturnValues = compositingReasonsReturnValues
                disableReturnValues = None
                enableReturnValues = None
                loadSnapshotReturnValues = loadSnapshotReturnValues
                makeSnapshotReturnValues = makeSnapshotReturnValues
                profileSnapshotReturnValues = profileSnapshotReturnValues
                releaseSnapshotReturnValues = None
                replaySnapshotReturnValues = replaySnapshotReturnValues
                snapshotCommandLogReturnValues = snapshotCommandLogReturnValues

            class Log:
                clearReturnValues = None
                disableReturnValues = None
                enableReturnValues = None
                startViolationsReportReturnValues = None
                stopViolationsReportReturnValues = None

            class Memory:
                getDOMCountersReturnValues = getDOMCountersReturnValues
                prepareForLeakDetectionReturnValues = None
                forciblyPurgeJavaScriptMemoryReturnValues = None
                setPressureNotificationsSuppressedReturnValues = None
                simulatePressureNotificationReturnValues = None
                startSamplingReturnValues = None
                stopSamplingReturnValues = None
                getAllTimeSamplingProfileReturnValues = getAllTimeSamplingProfileReturnValues
                getBrowserSamplingProfileReturnValues = getBrowserSamplingProfileReturnValues
                getSamplingProfileReturnValues = getSamplingProfileReturnValues

            class Network:
                canClearBrowserCacheReturnValues = canClearBrowserCacheReturnValues
                canClearBrowserCookiesReturnValues = canClearBrowserCookiesReturnValues
                canEmulateNetworkConditionsReturnValues = canEmulateNetworkConditionsReturnValues
                clearBrowserCacheReturnValues = None
                clearBrowserCookiesReturnValues = None
                continueInterceptedRequestReturnValues = None
                deleteCookiesReturnValues = None
                disableReturnValues = None
                emulateNetworkConditionsReturnValues = None
                enableReturnValues = None
                getAllCookiesReturnValues = getAllCookiesReturnValues
                getCertificateReturnValues = getCertificateReturnValues
                getCookiesReturnValues = getCookiesReturnValues
                getResponseBodyReturnValues = getResponseBodyReturnValues
                getRequestPostDataReturnValues = getRequestPostDataReturnValues
                getResponseBodyForInterceptionReturnValues = getResponseBodyForInterceptionReturnValues
                takeResponseBodyForInterceptionAsStreamReturnValues = takeResponseBodyForInterceptionAsStreamReturnValues
                replayXHRReturnValues = None
                searchInResponseBodyReturnValues = searchInResponseBodyReturnValues
                setBlockedURLsReturnValues = None
                setBypassServiceWorkerReturnValues = None
                setCacheDisabledReturnValues = None
                setCookieReturnValues = setCookieReturnValues
                setCookiesReturnValues = None
                setDataSizeLimitsForTestReturnValues = None
                setExtraHTTPHeadersReturnValues = None
                setRequestInterceptionReturnValues = None
                setUserAgentOverrideReturnValues = None

            class Overlay:
                disableReturnValues = None
                enableReturnValues = None
                getHighlightObjectForTestReturnValues = getHighlightObjectForTestReturnValues
                hideHighlightReturnValues = None
                highlightFrameReturnValues = None
                highlightNodeReturnValues = None
                highlightQuadReturnValues = None
                highlightRectReturnValues = None
                setInspectModeReturnValues = None
                setShowAdHighlightsReturnValues = None
                setPausedInDebuggerMessageReturnValues = None
                setShowDebugBordersReturnValues = None
                setShowFPSCounterReturnValues = None
                setShowPaintRectsReturnValues = None
                setShowLayoutShiftRegionsReturnValues = None
                setShowScrollBottleneckRectsReturnValues = None
                setShowHitTestBordersReturnValues = None
                setShowViewportSizeOnResizeReturnValues = None

            class Page:
                addScriptToEvaluateOnLoadReturnValues = addScriptToEvaluateOnLoadReturnValues
                addScriptToEvaluateOnNewDocumentReturnValues = addScriptToEvaluateOnNewDocumentReturnValues
                bringToFrontReturnValues = None
                captureScreenshotReturnValues = captureScreenshotReturnValues
                captureSnapshotReturnValues = captureSnapshotReturnValues
                clearDeviceMetricsOverrideReturnValues = None
                clearDeviceOrientationOverrideReturnValues = None
                clearGeolocationOverrideReturnValues = None
                createIsolatedWorldReturnValues = createIsolatedWorldReturnValues
                deleteCookieReturnValues = None
                disableReturnValues = None
                enableReturnValues = None
                getAppManifestReturnValues = getAppManifestReturnValues
                getInstallabilityErrorsReturnValues = getInstallabilityErrorsReturnValues
                getCookiesReturnValues = getCookiesReturnValues
                getFrameTreeReturnValues = getFrameTreeReturnValues
                getLayoutMetricsReturnValues = getLayoutMetricsReturnValues
                getNavigationHistoryReturnValues = getNavigationHistoryReturnValues
                resetNavigationHistoryReturnValues = None
                getResourceContentReturnValues = getResourceContentReturnValues
                getResourceTreeReturnValues = getResourceTreeReturnValues
                handleJavaScriptDialogReturnValues = None
                navigateReturnValues = navigateReturnValues
                navigateToHistoryEntryReturnValues = None
                printToPDFReturnValues = printToPDFReturnValues
                reloadReturnValues = None
                removeScriptToEvaluateOnLoadReturnValues = None
                removeScriptToEvaluateOnNewDocumentReturnValues = None
                screencastFrameAckReturnValues = None
                searchInResourceReturnValues = searchInResourceReturnValues
                setAdBlockingEnabledReturnValues = None
                setBypassCSPReturnValues = None
                setDeviceMetricsOverrideReturnValues = None
                setDeviceOrientationOverrideReturnValues = None
                setFontFamiliesReturnValues = None
                setFontSizesReturnValues = None
                setDocumentContentReturnValues = None
                setDownloadBehaviorReturnValues = None
                setGeolocationOverrideReturnValues = None
                setLifecycleEventsEnabledReturnValues = None
                setTouchEmulationEnabledReturnValues = None
                startScreencastReturnValues = None
                stopLoadingReturnValues = None
                crashReturnValues = None
                closeReturnValues = None
                setWebLifecycleStateReturnValues = None
                stopScreencastReturnValues = None
                setProduceCompilationCacheReturnValues = None
                addCompilationCacheReturnValues = None
                clearCompilationCacheReturnValues = None
                generateTestReportReturnValues = None
                waitForDebuggerReturnValues = None
                setInterceptFileChooserDialogReturnValues = None

            class Performance:
                disableReturnValues = None
                enableReturnValues = None
                setTimeDomainReturnValues = None
                getMetricsReturnValues = getMetricsReturnValues

            class Security:
                disableReturnValues = None
                enableReturnValues = None
                setIgnoreCertificateErrorsReturnValues = None
                handleCertificateErrorReturnValues = None
                setOverrideCertificateErrorsReturnValues = None

            class ServiceWorker:
                deliverPushMessageReturnValues = None
                disableReturnValues = None
                dispatchSyncEventReturnValues = None
                dispatchPeriodicSyncEventReturnValues = None
                enableReturnValues = None
                inspectWorkerReturnValues = None
                setForceUpdateOnPageLoadReturnValues = None
                skipWaitingReturnValues = None
                startWorkerReturnValues = None
                stopAllWorkersReturnValues = None
                stopWorkerReturnValues = None
                unregisterReturnValues = None
                updateRegistrationReturnValues = None

            class Storage:
                clearDataForOriginReturnValues = None
                getCookiesReturnValues = getCookiesReturnValues
                setCookiesReturnValues = None
                clearCookiesReturnValues = None
                getUsageAndQuotaReturnValues = getUsageAndQuotaReturnValues
                trackCacheStorageForOriginReturnValues = None
                trackIndexedDBForOriginReturnValues = None
                untrackCacheStorageForOriginReturnValues = None
                untrackIndexedDBForOriginReturnValues = None

            class SystemInfo:
                getInfoReturnValues = getInfoReturnValues
                getProcessInfoReturnValues = getProcessInfoReturnValues

            class Target:
                activateTargetReturnValues = None
                attachToTargetReturnValues = attachToTargetReturnValues
                attachToBrowserTargetReturnValues = attachToBrowserTargetReturnValues
                closeTargetReturnValues = closeTargetReturnValues
                exposeDevToolsProtocolReturnValues = None
                createBrowserContextReturnValues = createBrowserContextReturnValues
                getBrowserContextsReturnValues = getBrowserContextsReturnValues
                createTargetReturnValues = createTargetReturnValues
                detachFromTargetReturnValues = None
                disposeBrowserContextReturnValues = None
                getTargetInfoReturnValues = getTargetInfoReturnValues
                getTargetsReturnValues = getTargetsReturnValues
                sendMessageToTargetReturnValues = None
                setAutoAttachReturnValues = None
                setDiscoverTargetsReturnValues = None
                setRemoteLocationsReturnValues = None

            class Tethering:
                bindReturnValues = None
                unbindReturnValues = None

            class Tracing:
                endReturnValues = None
                getCategoriesReturnValues = getCategoriesReturnValues
                recordClockSyncMarkerReturnValues = None
                requestMemoryDumpReturnValues = requestMemoryDumpReturnValues
                startReturnValues = None

            class Fetch:
                disableReturnValues = None
                enableReturnValues = None
                failRequestReturnValues = None
                fulfillRequestReturnValues = None
                continueRequestReturnValues = None
                continueWithAuthReturnValues = None
                getResponseBodyReturnValues = getResponseBodyReturnValues
                takeResponseBodyAsStreamReturnValues = takeResponseBodyAsStreamReturnValues

            class WebAudio:
                enableReturnValues = None
                disableReturnValues = None
                getRealtimeDataReturnValues = getRealtimeDataReturnValues

            class WebAuthn:
                enableReturnValues = None
                disableReturnValues = None
                addVirtualAuthenticatorReturnValues = addVirtualAuthenticatorReturnValues
                removeVirtualAuthenticatorReturnValues = None
                addCredentialReturnValues = None
                getCredentialReturnValues = getCredentialReturnValues
                getCredentialsReturnValues = getCredentialsReturnValues
                removeCredentialReturnValues = None
                clearCredentialsReturnValues = None
                setUserVerifiedReturnValues = None

            class Media:
                enableReturnValues = None
                disableReturnValues = None

            class Console:
                clearMessagesReturnValues = None
                disableReturnValues = None
                enableReturnValues = None

            class Debugger:
                continueToLocationReturnValues = None
                disableReturnValues = None
                enableReturnValues = enableReturnValues
                evaluateOnCallFrameReturnValues = evaluateOnCallFrameReturnValues
                getPossibleBreakpointsReturnValues = getPossibleBreakpointsReturnValues
                getScriptSourceReturnValues = getScriptSourceReturnValues
                getWasmBytecodeReturnValues = getWasmBytecodeReturnValues
                getStackTraceReturnValues = getStackTraceReturnValues
                pauseReturnValues = None
                pauseOnAsyncCallReturnValues = None
                removeBreakpointReturnValues = None
                restartFrameReturnValues = restartFrameReturnValues
                resumeReturnValues = None
                searchInContentReturnValues = searchInContentReturnValues
                setAsyncCallStackDepthReturnValues = None
                setBlackboxPatternsReturnValues = None
                setBlackboxedRangesReturnValues = None
                setBreakpointReturnValues = setBreakpointReturnValues
                setInstrumentationBreakpointReturnValues = setInstrumentationBreakpointReturnValues
                setBreakpointByUrlReturnValues = setBreakpointByUrlReturnValues
                setBreakpointOnFunctionCallReturnValues = setBreakpointOnFunctionCallReturnValues
                setBreakpointsActiveReturnValues = None
                setPauseOnExceptionsReturnValues = None
                setReturnValueReturnValues = None
                setScriptSourceReturnValues = setScriptSourceReturnValues
                setSkipAllPausesReturnValues = None
                setVariableValueReturnValues = None
                stepIntoReturnValues = None
                stepOutReturnValues = None
                stepOverReturnValues = None

            class HeapProfiler:
                addInspectedHeapObjectReturnValues = None
                collectGarbageReturnValues = None
                disableReturnValues = None
                enableReturnValues = None
                getHeapObjectIdReturnValues = getHeapObjectIdReturnValues
                getObjectByHeapObjectIdReturnValues = getObjectByHeapObjectIdReturnValues
                getSamplingProfileReturnValues = getSamplingProfileReturnValues
                startSamplingReturnValues = None
                startTrackingHeapObjectsReturnValues = None
                stopSamplingReturnValues = stopSamplingReturnValues
                stopTrackingHeapObjectsReturnValues = None
                takeHeapSnapshotReturnValues = None

            class Profiler:
                disableReturnValues = None
                enableReturnValues = None
                getBestEffortCoverageReturnValues = getBestEffortCoverageReturnValues
                setSamplingIntervalReturnValues = None
                startReturnValues = None
                startPreciseCoverageReturnValues = None
                startTypeProfileReturnValues = None
                stopReturnValues = stopReturnValues
                stopPreciseCoverageReturnValues = None
                stopTypeProfileReturnValues = None
                takePreciseCoverageReturnValues = takePreciseCoverageReturnValues
                takeTypeProfileReturnValues = takeTypeProfileReturnValues
                enableRuntimeCallStatsReturnValues = None
                disableRuntimeCallStatsReturnValues = None
                getRuntimeCallStatsReturnValues = getRuntimeCallStatsReturnValues

            class Runtime:
                awaitPromiseReturnValues = awaitPromiseReturnValues
                callFunctionOnReturnValues = callFunctionOnReturnValues
                compileScriptReturnValues = compileScriptReturnValues
                disableReturnValues = None
                discardConsoleEntriesReturnValues = None
                enableReturnValues = None
                evaluateReturnValues = evaluateReturnValues
                getIsolateIdReturnValues = getIsolateIdReturnValues
                getHeapUsageReturnValues = getHeapUsageReturnValues
                getPropertiesReturnValues = getPropertiesReturnValues
                globalLexicalScopeNamesReturnValues = globalLexicalScopeNamesReturnValues
                queryObjectsReturnValues = queryObjectsReturnValues
                releaseObjectReturnValues = None
                releaseObjectGroupReturnValues = None
                runIfWaitingForDebuggerReturnValues = None
                runScriptReturnValues = runScriptReturnValues
                setAsyncCallStackDepthReturnValues = None
                setCustomObjectFormatterEnabledReturnValues = None
                setMaxCallStackSizeToCaptureReturnValues = None
                terminateExecutionReturnValues = None
                addBindingReturnValues = None
                removeBindingReturnValues = None

            class Schema:
                getDomainsReturnValues = getDomainsReturnValues


        class CommandReturnValues:
            class Accessibility:
                disableReturnValues = None
                enableReturnValues = None
                getPartialAXTreeReturnValues = getPartialAXTreeReturnValues
                getFullAXTreeReturnValues = getFullAXTreeReturnValues

            class Animation:
                disableReturnValues = None
                enableReturnValues = None
                getCurrentTimeReturnValues = getCurrentTimeReturnValues
                getPlaybackRateReturnValues = getPlaybackRateReturnValues
                releaseAnimationsReturnValues = None
                resolveAnimationReturnValues = resolveAnimationReturnValues
                seekAnimationsReturnValues = None
                setPausedReturnValues = None
                setPlaybackRateReturnValues = None
                setTimingReturnValues = None

            class ApplicationCache:
                enableReturnValues = None
                getApplicationCacheForFrameReturnValues = getApplicationCacheForFrameReturnValues
                getFramesWithManifestsReturnValues = getFramesWithManifestsReturnValues
                getManifestForFrameReturnValues = getManifestForFrameReturnValues

            class Audits:
                getEncodedResponseReturnValues = getEncodedResponseReturnValues

            class BackgroundService:
                startObservingReturnValues = None
                stopObservingReturnValues = None
                setRecordingReturnValues = None
                clearEventsReturnValues = None

            class Browser:
                setPermissionReturnValues = None
                grantPermissionsReturnValues = None
                resetPermissionsReturnValues = None
                closeReturnValues = None
                crashReturnValues = None
                crashGpuProcessReturnValues = None
                getVersionReturnValues = getVersionReturnValues
                getBrowserCommandLineReturnValues = getBrowserCommandLineReturnValues
                getHistogramsReturnValues = getHistogramsReturnValues
                getHistogramReturnValues = getHistogramReturnValues
                getWindowBoundsReturnValues = getWindowBoundsReturnValues
                getWindowForTargetReturnValues = getWindowForTargetReturnValues
                setWindowBoundsReturnValues = None
                setDockTileReturnValues = None

            class CSS:
                addRuleReturnValues = addRuleReturnValues
                collectClassNamesReturnValues = collectClassNamesReturnValues
                createStyleSheetReturnValues = createStyleSheetReturnValues
                disableReturnValues = None
                enableReturnValues = None
                forcePseudoStateReturnValues = None
                getBackgroundColorsReturnValues = getBackgroundColorsReturnValues
                getComputedStyleForNodeReturnValues = getComputedStyleForNodeReturnValues
                getInlineStylesForNodeReturnValues = getInlineStylesForNodeReturnValues
                getMatchedStylesForNodeReturnValues = getMatchedStylesForNodeReturnValues
                getMediaQueriesReturnValues = getMediaQueriesReturnValues
                getPlatformFontsForNodeReturnValues = getPlatformFontsForNodeReturnValues
                getStyleSheetTextReturnValues = getStyleSheetTextReturnValues
                setEffectivePropertyValueForNodeReturnValues = None
                setKeyframeKeyReturnValues = setKeyframeKeyReturnValues
                setMediaTextReturnValues = setMediaTextReturnValues
                setRuleSelectorReturnValues = setRuleSelectorReturnValues
                setStyleSheetTextReturnValues = setStyleSheetTextReturnValues
                setStyleTextsReturnValues = setStyleTextsReturnValues
                startRuleUsageTrackingReturnValues = None
                stopRuleUsageTrackingReturnValues = stopRuleUsageTrackingReturnValues
                takeCoverageDeltaReturnValues = takeCoverageDeltaReturnValues

            class CacheStorage:
                deleteCacheReturnValues = None
                deleteEntryReturnValues = None
                requestCacheNamesReturnValues = requestCacheNamesReturnValues
                requestCachedResponseReturnValues = requestCachedResponseReturnValues
                requestEntriesReturnValues = requestEntriesReturnValues

            class Cast:
                enableReturnValues = None
                disableReturnValues = None
                setSinkToUseReturnValues = None
                startTabMirroringReturnValues = None
                stopCastingReturnValues = None

            class DOM:
                collectClassNamesFromSubtreeReturnValues = collectClassNamesFromSubtreeReturnValues
                copyToReturnValues = copyToReturnValues
                describeNodeReturnValues = describeNodeReturnValues
                disableReturnValues = None
                discardSearchResultsReturnValues = None
                enableReturnValues = None
                focusReturnValues = None
                getAttributesReturnValues = getAttributesReturnValues
                getBoxModelReturnValues = getBoxModelReturnValues
                getContentQuadsReturnValues = getContentQuadsReturnValues
                getDocumentReturnValues = getDocumentReturnValues
                getFlattenedDocumentReturnValues = getFlattenedDocumentReturnValues
                getNodeForLocationReturnValues = getNodeForLocationReturnValues
                getOuterHTMLReturnValues = getOuterHTMLReturnValues
                getRelayoutBoundaryReturnValues = getRelayoutBoundaryReturnValues
                getSearchResultsReturnValues = getSearchResultsReturnValues
                hideHighlightReturnValues = None
                highlightNodeReturnValues = None
                highlightRectReturnValues = None
                markUndoableStateReturnValues = None
                moveToReturnValues = moveToReturnValues
                performSearchReturnValues = performSearchReturnValues
                pushNodeByPathToFrontendReturnValues = pushNodeByPathToFrontendReturnValues
                pushNodesByBackendIdsToFrontendReturnValues = pushNodesByBackendIdsToFrontendReturnValues
                querySelectorReturnValues = querySelectorReturnValues
                querySelectorAllReturnValues = querySelectorAllReturnValues
                redoReturnValues = None
                removeAttributeReturnValues = None
                removeNodeReturnValues = None
                requestChildNodesReturnValues = None
                requestNodeReturnValues = requestNodeReturnValues
                resolveNodeReturnValues = resolveNodeReturnValues
                setAttributeValueReturnValues = None
                setAttributesAsTextReturnValues = None
                setFileInputFilesReturnValues = None
                setNodeStackTracesEnabledReturnValues = None
                getNodeStackTracesReturnValues = getNodeStackTracesReturnValues
                getFileInfoReturnValues = getFileInfoReturnValues
                setInspectedNodeReturnValues = None
                setNodeNameReturnValues = setNodeNameReturnValues
                setNodeValueReturnValues = None
                setOuterHTMLReturnValues = None
                undoReturnValues = None
                getFrameOwnerReturnValues = getFrameOwnerReturnValues

            class DOMDebugger:
                getEventListenersReturnValues = getEventListenersReturnValues
                removeDOMBreakpointReturnValues = None
                removeEventListenerBreakpointReturnValues = None
                removeInstrumentationBreakpointReturnValues = None
                removeXHRBreakpointReturnValues = None
                setDOMBreakpointReturnValues = None
                setEventListenerBreakpointReturnValues = None
                setInstrumentationBreakpointReturnValues = None
                setXHRBreakpointReturnValues = None

            class DOMSnapshot:
                disableReturnValues = None
                enableReturnValues = None
                getSnapshotReturnValues = getSnapshotReturnValues
                captureSnapshotReturnValues = captureSnapshotReturnValues

            class DOMStorage:
                clearReturnValues = None
                disableReturnValues = None
                enableReturnValues = None
                getDOMStorageItemsReturnValues = getDOMStorageItemsReturnValues
                removeDOMStorageItemReturnValues = None
                setDOMStorageItemReturnValues = None

            class Database:
                disableReturnValues = None
                enableReturnValues = None
                executeSQLReturnValues = executeSQLReturnValues
                getDatabaseTableNamesReturnValues = getDatabaseTableNamesReturnValues

            class DeviceOrientation:
                clearDeviceOrientationOverrideReturnValues = None
                setDeviceOrientationOverrideReturnValues = None

            class Emulation:
                canEmulateReturnValues = canEmulateReturnValues
                clearDeviceMetricsOverrideReturnValues = None
                clearGeolocationOverrideReturnValues = None
                resetPageScaleFactorReturnValues = None
                setFocusEmulationEnabledReturnValues = None
                setCPUThrottlingRateReturnValues = None
                setDefaultBackgroundColorOverrideReturnValues = None
                setDeviceMetricsOverrideReturnValues = None
                setScrollbarsHiddenReturnValues = None
                setDocumentCookieDisabledReturnValues = None
                setEmitTouchEventsForMouseReturnValues = None
                setEmulatedMediaReturnValues = None
                setGeolocationOverrideReturnValues = None
                setNavigatorOverridesReturnValues = None
                setPageScaleFactorReturnValues = None
                setScriptExecutionDisabledReturnValues = None
                setTouchEmulationEnabledReturnValues = None
                setVirtualTimePolicyReturnValues = setVirtualTimePolicyReturnValues
                setTimezoneOverrideReturnValues = None
                setVisibleSizeReturnValues = None
                setUserAgentOverrideReturnValues = None

            class HeadlessExperimental:
                beginFrameReturnValues = beginFrameReturnValues
                disableReturnValues = None
                enableReturnValues = None

            class IO:
                closeReturnValues = None
                readReturnValues = readReturnValues
                resolveBlobReturnValues = resolveBlobReturnValues

            class IndexedDB:
                clearObjectStoreReturnValues = None
                deleteDatabaseReturnValues = None
                deleteObjectStoreEntriesReturnValues = None
                disableReturnValues = None
                enableReturnValues = None
                requestDataReturnValues = requestDataReturnValues
                getMetadataReturnValues = getMetadataReturnValues
                requestDatabaseReturnValues = requestDatabaseReturnValues
                requestDatabaseNamesReturnValues = requestDatabaseNamesReturnValues

            class Input:
                dispatchKeyEventReturnValues = None
                insertTextReturnValues = None
                dispatchMouseEventReturnValues = None
                dispatchTouchEventReturnValues = None
                emulateTouchFromMouseEventReturnValues = None
                setIgnoreInputEventsReturnValues = None
                synthesizePinchGestureReturnValues = None
                synthesizeScrollGestureReturnValues = None
                synthesizeTapGestureReturnValues = None

            class Inspector:
                disableReturnValues = None
                enableReturnValues = None

            class LayerTree:
                compositingReasonsReturnValues = compositingReasonsReturnValues
                disableReturnValues = None
                enableReturnValues = None
                loadSnapshotReturnValues = loadSnapshotReturnValues
                makeSnapshotReturnValues = makeSnapshotReturnValues
                profileSnapshotReturnValues = profileSnapshotReturnValues
                releaseSnapshotReturnValues = None
                replaySnapshotReturnValues = replaySnapshotReturnValues
                snapshotCommandLogReturnValues = snapshotCommandLogReturnValues

            class Log:
                clearReturnValues = None
                disableReturnValues = None
                enableReturnValues = None
                startViolationsReportReturnValues = None
                stopViolationsReportReturnValues = None

            class Memory:
                getDOMCountersReturnValues = getDOMCountersReturnValues
                prepareForLeakDetectionReturnValues = None
                forciblyPurgeJavaScriptMemoryReturnValues = None
                setPressureNotificationsSuppressedReturnValues = None
                simulatePressureNotificationReturnValues = None
                startSamplingReturnValues = None
                stopSamplingReturnValues = None
                getAllTimeSamplingProfileReturnValues = getAllTimeSamplingProfileReturnValues
                getBrowserSamplingProfileReturnValues = getBrowserSamplingProfileReturnValues
                getSamplingProfileReturnValues = getSamplingProfileReturnValues

            class Network:
                canClearBrowserCacheReturnValues = canClearBrowserCacheReturnValues
                canClearBrowserCookiesReturnValues = canClearBrowserCookiesReturnValues
                canEmulateNetworkConditionsReturnValues = canEmulateNetworkConditionsReturnValues
                clearBrowserCacheReturnValues = None
                clearBrowserCookiesReturnValues = None
                continueInterceptedRequestReturnValues = None
                deleteCookiesReturnValues = None
                disableReturnValues = None
                emulateNetworkConditionsReturnValues = None
                enableReturnValues = None
                getAllCookiesReturnValues = getAllCookiesReturnValues
                getCertificateReturnValues = getCertificateReturnValues
                getCookiesReturnValues = getCookiesReturnValues
                getResponseBodyReturnValues = getResponseBodyReturnValues
                getRequestPostDataReturnValues = getRequestPostDataReturnValues
                getResponseBodyForInterceptionReturnValues = getResponseBodyForInterceptionReturnValues
                takeResponseBodyForInterceptionAsStreamReturnValues = takeResponseBodyForInterceptionAsStreamReturnValues
                replayXHRReturnValues = None
                searchInResponseBodyReturnValues = searchInResponseBodyReturnValues
                setBlockedURLsReturnValues = None
                setBypassServiceWorkerReturnValues = None
                setCacheDisabledReturnValues = None
                setCookieReturnValues = setCookieReturnValues
                setCookiesReturnValues = None
                setDataSizeLimitsForTestReturnValues = None
                setExtraHTTPHeadersReturnValues = None
                setRequestInterceptionReturnValues = None
                setUserAgentOverrideReturnValues = None

            class Overlay:
                disableReturnValues = None
                enableReturnValues = None
                getHighlightObjectForTestReturnValues = getHighlightObjectForTestReturnValues
                hideHighlightReturnValues = None
                highlightFrameReturnValues = None
                highlightNodeReturnValues = None
                highlightQuadReturnValues = None
                highlightRectReturnValues = None
                setInspectModeReturnValues = None
                setShowAdHighlightsReturnValues = None
                setPausedInDebuggerMessageReturnValues = None
                setShowDebugBordersReturnValues = None
                setShowFPSCounterReturnValues = None
                setShowPaintRectsReturnValues = None
                setShowLayoutShiftRegionsReturnValues = None
                setShowScrollBottleneckRectsReturnValues = None
                setShowHitTestBordersReturnValues = None
                setShowViewportSizeOnResizeReturnValues = None

            class Page:
                addScriptToEvaluateOnLoadReturnValues = addScriptToEvaluateOnLoadReturnValues
                addScriptToEvaluateOnNewDocumentReturnValues = addScriptToEvaluateOnNewDocumentReturnValues
                bringToFrontReturnValues = None
                captureScreenshotReturnValues = captureScreenshotReturnValues
                captureSnapshotReturnValues = captureSnapshotReturnValues
                clearDeviceMetricsOverrideReturnValues = None
                clearDeviceOrientationOverrideReturnValues = None
                clearGeolocationOverrideReturnValues = None
                createIsolatedWorldReturnValues = createIsolatedWorldReturnValues
                deleteCookieReturnValues = None
                disableReturnValues = None
                enableReturnValues = None
                getAppManifestReturnValues = getAppManifestReturnValues
                getInstallabilityErrorsReturnValues = getInstallabilityErrorsReturnValues
                getCookiesReturnValues = getCookiesReturnValues
                getFrameTreeReturnValues = getFrameTreeReturnValues
                getLayoutMetricsReturnValues = getLayoutMetricsReturnValues
                getNavigationHistoryReturnValues = getNavigationHistoryReturnValues
                resetNavigationHistoryReturnValues = None
                getResourceContentReturnValues = getResourceContentReturnValues
                getResourceTreeReturnValues = getResourceTreeReturnValues
                handleJavaScriptDialogReturnValues = None
                navigateReturnValues = navigateReturnValues
                navigateToHistoryEntryReturnValues = None
                printToPDFReturnValues = printToPDFReturnValues
                reloadReturnValues = None
                removeScriptToEvaluateOnLoadReturnValues = None
                removeScriptToEvaluateOnNewDocumentReturnValues = None
                screencastFrameAckReturnValues = None
                searchInResourceReturnValues = searchInResourceReturnValues
                setAdBlockingEnabledReturnValues = None
                setBypassCSPReturnValues = None
                setDeviceMetricsOverrideReturnValues = None
                setDeviceOrientationOverrideReturnValues = None
                setFontFamiliesReturnValues = None
                setFontSizesReturnValues = None
                setDocumentContentReturnValues = None
                setDownloadBehaviorReturnValues = None
                setGeolocationOverrideReturnValues = None
                setLifecycleEventsEnabledReturnValues = None
                setTouchEmulationEnabledReturnValues = None
                startScreencastReturnValues = None
                stopLoadingReturnValues = None
                crashReturnValues = None
                closeReturnValues = None
                setWebLifecycleStateReturnValues = None
                stopScreencastReturnValues = None
                setProduceCompilationCacheReturnValues = None
                addCompilationCacheReturnValues = None
                clearCompilationCacheReturnValues = None
                generateTestReportReturnValues = None
                waitForDebuggerReturnValues = None
                setInterceptFileChooserDialogReturnValues = None

            class Performance:
                disableReturnValues = None
                enableReturnValues = None
                setTimeDomainReturnValues = None
                getMetricsReturnValues = getMetricsReturnValues

            class Security:
                disableReturnValues = None
                enableReturnValues = None
                setIgnoreCertificateErrorsReturnValues = None
                handleCertificateErrorReturnValues = None
                setOverrideCertificateErrorsReturnValues = None

            class ServiceWorker:
                deliverPushMessageReturnValues = None
                disableReturnValues = None
                dispatchSyncEventReturnValues = None
                dispatchPeriodicSyncEventReturnValues = None
                enableReturnValues = None
                inspectWorkerReturnValues = None
                setForceUpdateOnPageLoadReturnValues = None
                skipWaitingReturnValues = None
                startWorkerReturnValues = None
                stopAllWorkersReturnValues = None
                stopWorkerReturnValues = None
                unregisterReturnValues = None
                updateRegistrationReturnValues = None

            class Storage:
                clearDataForOriginReturnValues = None
                getCookiesReturnValues = getCookiesReturnValues
                setCookiesReturnValues = None
                clearCookiesReturnValues = None
                getUsageAndQuotaReturnValues = getUsageAndQuotaReturnValues
                trackCacheStorageForOriginReturnValues = None
                trackIndexedDBForOriginReturnValues = None
                untrackCacheStorageForOriginReturnValues = None
                untrackIndexedDBForOriginReturnValues = None

            class SystemInfo:
                getInfoReturnValues = getInfoReturnValues
                getProcessInfoReturnValues = getProcessInfoReturnValues

            class Target:
                activateTargetReturnValues = None
                attachToTargetReturnValues = attachToTargetReturnValues
                attachToBrowserTargetReturnValues = attachToBrowserTargetReturnValues
                closeTargetReturnValues = closeTargetReturnValues
                exposeDevToolsProtocolReturnValues = None
                createBrowserContextReturnValues = createBrowserContextReturnValues
                getBrowserContextsReturnValues = getBrowserContextsReturnValues
                createTargetReturnValues = createTargetReturnValues
                detachFromTargetReturnValues = None
                disposeBrowserContextReturnValues = None
                getTargetInfoReturnValues = getTargetInfoReturnValues
                getTargetsReturnValues = getTargetsReturnValues
                sendMessageToTargetReturnValues = None
                setAutoAttachReturnValues = None
                setDiscoverTargetsReturnValues = None
                setRemoteLocationsReturnValues = None

            class Tethering:
                bindReturnValues = None
                unbindReturnValues = None

            class Tracing:
                endReturnValues = None
                getCategoriesReturnValues = getCategoriesReturnValues
                recordClockSyncMarkerReturnValues = None
                requestMemoryDumpReturnValues = requestMemoryDumpReturnValues
                startReturnValues = None

            class Fetch:
                disableReturnValues = None
                enableReturnValues = None
                failRequestReturnValues = None
                fulfillRequestReturnValues = None
                continueRequestReturnValues = None
                continueWithAuthReturnValues = None
                getResponseBodyReturnValues = getResponseBodyReturnValues
                takeResponseBodyAsStreamReturnValues = takeResponseBodyAsStreamReturnValues

            class WebAudio:
                enableReturnValues = None
                disableReturnValues = None
                getRealtimeDataReturnValues = getRealtimeDataReturnValues

            class WebAuthn:
                enableReturnValues = None
                disableReturnValues = None
                addVirtualAuthenticatorReturnValues = addVirtualAuthenticatorReturnValues
                removeVirtualAuthenticatorReturnValues = None
                addCredentialReturnValues = None
                getCredentialReturnValues = getCredentialReturnValues
                getCredentialsReturnValues = getCredentialsReturnValues
                removeCredentialReturnValues = None
                clearCredentialsReturnValues = None
                setUserVerifiedReturnValues = None

            class Media:
                enableReturnValues = None
                disableReturnValues = None

            class Console:
                clearMessagesReturnValues = None
                disableReturnValues = None
                enableReturnValues = None

            class Debugger:
                continueToLocationReturnValues = None
                disableReturnValues = None
                enableReturnValues = enableReturnValues
                evaluateOnCallFrameReturnValues = evaluateOnCallFrameReturnValues
                getPossibleBreakpointsReturnValues = getPossibleBreakpointsReturnValues
                getScriptSourceReturnValues = getScriptSourceReturnValues
                getWasmBytecodeReturnValues = getWasmBytecodeReturnValues
                getStackTraceReturnValues = getStackTraceReturnValues
                pauseReturnValues = None
                pauseOnAsyncCallReturnValues = None
                removeBreakpointReturnValues = None
                restartFrameReturnValues = restartFrameReturnValues
                resumeReturnValues = None
                searchInContentReturnValues = searchInContentReturnValues
                setAsyncCallStackDepthReturnValues = None
                setBlackboxPatternsReturnValues = None
                setBlackboxedRangesReturnValues = None
                setBreakpointReturnValues = setBreakpointReturnValues
                setInstrumentationBreakpointReturnValues = setInstrumentationBreakpointReturnValues
                setBreakpointByUrlReturnValues = setBreakpointByUrlReturnValues
                setBreakpointOnFunctionCallReturnValues = setBreakpointOnFunctionCallReturnValues
                setBreakpointsActiveReturnValues = None
                setPauseOnExceptionsReturnValues = None
                setReturnValueReturnValues = None
                setScriptSourceReturnValues = setScriptSourceReturnValues
                setSkipAllPausesReturnValues = None
                setVariableValueReturnValues = None
                stepIntoReturnValues = None
                stepOutReturnValues = None
                stepOverReturnValues = None

            class HeapProfiler:
                addInspectedHeapObjectReturnValues = None
                collectGarbageReturnValues = None
                disableReturnValues = None
                enableReturnValues = None
                getHeapObjectIdReturnValues = getHeapObjectIdReturnValues
                getObjectByHeapObjectIdReturnValues = getObjectByHeapObjectIdReturnValues
                getSamplingProfileReturnValues = getSamplingProfileReturnValues
                startSamplingReturnValues = None
                startTrackingHeapObjectsReturnValues = None
                stopSamplingReturnValues = stopSamplingReturnValues
                stopTrackingHeapObjectsReturnValues = None
                takeHeapSnapshotReturnValues = None

            class Profiler:
                disableReturnValues = None
                enableReturnValues = None
                getBestEffortCoverageReturnValues = getBestEffortCoverageReturnValues
                setSamplingIntervalReturnValues = None
                startReturnValues = None
                startPreciseCoverageReturnValues = None
                startTypeProfileReturnValues = None
                stopReturnValues = stopReturnValues
                stopPreciseCoverageReturnValues = None
                stopTypeProfileReturnValues = None
                takePreciseCoverageReturnValues = takePreciseCoverageReturnValues
                takeTypeProfileReturnValues = takeTypeProfileReturnValues
                enableRuntimeCallStatsReturnValues = None
                disableRuntimeCallStatsReturnValues = None
                getRuntimeCallStatsReturnValues = getRuntimeCallStatsReturnValues

            class Runtime:
                awaitPromiseReturnValues = awaitPromiseReturnValues
                callFunctionOnReturnValues = callFunctionOnReturnValues
                compileScriptReturnValues = compileScriptReturnValues
                disableReturnValues = None
                discardConsoleEntriesReturnValues = None
                enableReturnValues = None
                evaluateReturnValues = evaluateReturnValues
                getIsolateIdReturnValues = getIsolateIdReturnValues
                getHeapUsageReturnValues = getHeapUsageReturnValues
                getPropertiesReturnValues = getPropertiesReturnValues
                globalLexicalScopeNamesReturnValues = globalLexicalScopeNamesReturnValues
                queryObjectsReturnValues = queryObjectsReturnValues
                releaseObjectReturnValues = None
                releaseObjectGroupReturnValues = None
                runIfWaitingForDebuggerReturnValues = None
                runScriptReturnValues = runScriptReturnValues
                setAsyncCallStackDepthReturnValues = None
                setCustomObjectFormatterEnabledReturnValues = None
                setMaxCallStackSizeToCaptureReturnValues = None
                terminateExecutionReturnValues = None
                addBindingReturnValues = None
                removeBindingReturnValues = None

            class Schema:
                getDomainsReturnValues = getDomainsReturnValues


else:

    class DummyProtocol:
        """
        Dummy class for use at runtime
        """

        def __getattr__(self, _):
            return self

    Protocol = DummyProtocol()


class Events:
    class Animation:
        animationCanceledPayload = 'Animation.animationCanceledPayload'
        animationCreatedPayload = 'Animation.animationCreatedPayload'
        animationStartedPayload = 'Animation.animationStartedPayload'

    class ApplicationCache:
        applicationCacheStatusUpdatedPayload = 'ApplicationCache.applicationCacheStatusUpdatedPayload'
        networkStateUpdatedPayload = 'ApplicationCache.networkStateUpdatedPayload'

    class BackgroundService:
        recordingStateChangedPayload = 'BackgroundService.recordingStateChangedPayload'
        backgroundServiceEventReceivedPayload = 'BackgroundService.backgroundServiceEventReceivedPayload'

    class CSS:
        fontsUpdatedPayload = 'CSS.fontsUpdatedPayload'
        mediaQueryResultChangedPayload = 'CSS.mediaQueryResultChangedPayload'
        styleSheetAddedPayload = 'CSS.styleSheetAddedPayload'
        styleSheetChangedPayload = 'CSS.styleSheetChangedPayload'
        styleSheetRemovedPayload = 'CSS.styleSheetRemovedPayload'

    class Cast:
        sinksUpdatedPayload = 'Cast.sinksUpdatedPayload'
        issueUpdatedPayload = 'Cast.issueUpdatedPayload'

    class DOM:
        attributeModifiedPayload = 'DOM.attributeModifiedPayload'
        attributeRemovedPayload = 'DOM.attributeRemovedPayload'
        characterDataModifiedPayload = 'DOM.characterDataModifiedPayload'
        childNodeCountUpdatedPayload = 'DOM.childNodeCountUpdatedPayload'
        childNodeInsertedPayload = 'DOM.childNodeInsertedPayload'
        childNodeRemovedPayload = 'DOM.childNodeRemovedPayload'
        distributedNodesUpdatedPayload = 'DOM.distributedNodesUpdatedPayload'
        documentUpdatedPayload = 'DOM.documentUpdatedPayload'
        inlineStyleInvalidatedPayload = 'DOM.inlineStyleInvalidatedPayload'
        pseudoElementAddedPayload = 'DOM.pseudoElementAddedPayload'
        pseudoElementRemovedPayload = 'DOM.pseudoElementRemovedPayload'
        setChildNodesPayload = 'DOM.setChildNodesPayload'
        shadowRootPoppedPayload = 'DOM.shadowRootPoppedPayload'
        shadowRootPushedPayload = 'DOM.shadowRootPushedPayload'

    class DOMStorage:
        domStorageItemAddedPayload = 'DOMStorage.domStorageItemAddedPayload'
        domStorageItemRemovedPayload = 'DOMStorage.domStorageItemRemovedPayload'
        domStorageItemUpdatedPayload = 'DOMStorage.domStorageItemUpdatedPayload'
        domStorageItemsClearedPayload = 'DOMStorage.domStorageItemsClearedPayload'

    class Database:
        addDatabasePayload = 'Database.addDatabasePayload'

    class Emulation:
        virtualTimeBudgetExpiredPayload = 'Emulation.virtualTimeBudgetExpiredPayload'

    class HeadlessExperimental:
        needsBeginFramesChangedPayload = 'HeadlessExperimental.needsBeginFramesChangedPayload'

    class Inspector:
        detachedPayload = 'Inspector.detachedPayload'
        targetCrashedPayload = 'Inspector.targetCrashedPayload'
        targetReloadedAfterCrashPayload = 'Inspector.targetReloadedAfterCrashPayload'

    class LayerTree:
        layerPaintedPayload = 'LayerTree.layerPaintedPayload'
        layerTreeDidChangePayload = 'LayerTree.layerTreeDidChangePayload'

    class Log:
        entryAddedPayload = 'Log.entryAddedPayload'

    class Network:
        dataReceivedPayload = 'Network.dataReceivedPayload'
        eventSourceMessageReceivedPayload = 'Network.eventSourceMessageReceivedPayload'
        loadingFailedPayload = 'Network.loadingFailedPayload'
        loadingFinishedPayload = 'Network.loadingFinishedPayload'
        requestInterceptedPayload = 'Network.requestInterceptedPayload'
        requestServedFromCachePayload = 'Network.requestServedFromCachePayload'
        requestWillBeSentPayload = 'Network.requestWillBeSentPayload'
        resourceChangedPriorityPayload = 'Network.resourceChangedPriorityPayload'
        signedExchangeReceivedPayload = 'Network.signedExchangeReceivedPayload'
        responseReceivedPayload = 'Network.responseReceivedPayload'
        webSocketClosedPayload = 'Network.webSocketClosedPayload'
        webSocketCreatedPayload = 'Network.webSocketCreatedPayload'
        webSocketFrameErrorPayload = 'Network.webSocketFrameErrorPayload'
        webSocketFrameReceivedPayload = 'Network.webSocketFrameReceivedPayload'
        webSocketFrameSentPayload = 'Network.webSocketFrameSentPayload'
        webSocketHandshakeResponseReceivedPayload = 'Network.webSocketHandshakeResponseReceivedPayload'
        webSocketWillSendHandshakeRequestPayload = 'Network.webSocketWillSendHandshakeRequestPayload'
        requestWillBeSentExtraInfoPayload = 'Network.requestWillBeSentExtraInfoPayload'
        responseReceivedExtraInfoPayload = 'Network.responseReceivedExtraInfoPayload'

    class Overlay:
        inspectNodeRequestedPayload = 'Overlay.inspectNodeRequestedPayload'
        nodeHighlightRequestedPayload = 'Overlay.nodeHighlightRequestedPayload'
        screenshotRequestedPayload = 'Overlay.screenshotRequestedPayload'
        inspectModeCanceledPayload = 'Overlay.inspectModeCanceledPayload'

    class Page:
        domContentEventFiredPayload = 'Page.domContentEventFiredPayload'
        fileChooserOpenedPayload = 'Page.fileChooserOpenedPayload'
        frameAttachedPayload = 'Page.frameAttachedPayload'
        frameClearedScheduledNavigationPayload = 'Page.frameClearedScheduledNavigationPayload'
        frameDetachedPayload = 'Page.frameDetachedPayload'
        frameNavigatedPayload = 'Page.frameNavigatedPayload'
        frameResizedPayload = 'Page.frameResizedPayload'
        frameRequestedNavigationPayload = 'Page.frameRequestedNavigationPayload'
        frameScheduledNavigationPayload = 'Page.frameScheduledNavigationPayload'
        frameStartedLoadingPayload = 'Page.frameStartedLoadingPayload'
        frameStoppedLoadingPayload = 'Page.frameStoppedLoadingPayload'
        downloadWillBeginPayload = 'Page.downloadWillBeginPayload'
        interstitialHiddenPayload = 'Page.interstitialHiddenPayload'
        interstitialShownPayload = 'Page.interstitialShownPayload'
        javascriptDialogClosedPayload = 'Page.javascriptDialogClosedPayload'
        javascriptDialogOpeningPayload = 'Page.javascriptDialogOpeningPayload'
        lifecycleEventPayload = 'Page.lifecycleEventPayload'
        loadEventFiredPayload = 'Page.loadEventFiredPayload'
        navigatedWithinDocumentPayload = 'Page.navigatedWithinDocumentPayload'
        screencastFramePayload = 'Page.screencastFramePayload'
        screencastVisibilityChangedPayload = 'Page.screencastVisibilityChangedPayload'
        windowOpenPayload = 'Page.windowOpenPayload'
        compilationCacheProducedPayload = 'Page.compilationCacheProducedPayload'

    class Performance:
        metricsPayload = 'Performance.metricsPayload'

    class Security:
        certificateErrorPayload = 'Security.certificateErrorPayload'
        visibleSecurityStateChangedPayload = 'Security.visibleSecurityStateChangedPayload'
        securityStateChangedPayload = 'Security.securityStateChangedPayload'

    class ServiceWorker:
        workerErrorReportedPayload = 'ServiceWorker.workerErrorReportedPayload'
        workerRegistrationUpdatedPayload = 'ServiceWorker.workerRegistrationUpdatedPayload'
        workerVersionUpdatedPayload = 'ServiceWorker.workerVersionUpdatedPayload'

    class Storage:
        cacheStorageContentUpdatedPayload = 'Storage.cacheStorageContentUpdatedPayload'
        cacheStorageListUpdatedPayload = 'Storage.cacheStorageListUpdatedPayload'
        indexedDBContentUpdatedPayload = 'Storage.indexedDBContentUpdatedPayload'
        indexedDBListUpdatedPayload = 'Storage.indexedDBListUpdatedPayload'

    class Target:
        attachedToTargetPayload = 'Target.attachedToTargetPayload'
        detachedFromTargetPayload = 'Target.detachedFromTargetPayload'
        receivedMessageFromTargetPayload = 'Target.receivedMessageFromTargetPayload'
        targetCreatedPayload = 'Target.targetCreatedPayload'
        targetDestroyedPayload = 'Target.targetDestroyedPayload'
        targetCrashedPayload = 'Target.targetCrashedPayload'
        targetInfoChangedPayload = 'Target.targetInfoChangedPayload'

    class Tethering:
        acceptedPayload = 'Tethering.acceptedPayload'

    class Tracing:
        bufferUsagePayload = 'Tracing.bufferUsagePayload'
        dataCollectedPayload = 'Tracing.dataCollectedPayload'
        tracingCompletePayload = 'Tracing.tracingCompletePayload'

    class Fetch:
        requestPausedPayload = 'Fetch.requestPausedPayload'
        authRequiredPayload = 'Fetch.authRequiredPayload'

    class WebAudio:
        contextCreatedPayload = 'WebAudio.contextCreatedPayload'
        contextWillBeDestroyedPayload = 'WebAudio.contextWillBeDestroyedPayload'
        contextChangedPayload = 'WebAudio.contextChangedPayload'
        audioListenerCreatedPayload = 'WebAudio.audioListenerCreatedPayload'
        audioListenerWillBeDestroyedPayload = 'WebAudio.audioListenerWillBeDestroyedPayload'
        audioNodeCreatedPayload = 'WebAudio.audioNodeCreatedPayload'
        audioNodeWillBeDestroyedPayload = 'WebAudio.audioNodeWillBeDestroyedPayload'
        audioParamCreatedPayload = 'WebAudio.audioParamCreatedPayload'
        audioParamWillBeDestroyedPayload = 'WebAudio.audioParamWillBeDestroyedPayload'
        nodesConnectedPayload = 'WebAudio.nodesConnectedPayload'
        nodesDisconnectedPayload = 'WebAudio.nodesDisconnectedPayload'
        nodeParamConnectedPayload = 'WebAudio.nodeParamConnectedPayload'
        nodeParamDisconnectedPayload = 'WebAudio.nodeParamDisconnectedPayload'

    class Media:
        playerPropertiesChangedPayload = 'Media.playerPropertiesChangedPayload'
        playerEventsAddedPayload = 'Media.playerEventsAddedPayload'
        playersCreatedPayload = 'Media.playersCreatedPayload'

    class Console:
        messageAddedPayload = 'Console.messageAddedPayload'

    class Debugger:
        breakpointResolvedPayload = 'Debugger.breakpointResolvedPayload'
        pausedPayload = 'Debugger.pausedPayload'
        resumedPayload = 'Debugger.resumedPayload'
        scriptFailedToParsePayload = 'Debugger.scriptFailedToParsePayload'
        scriptParsedPayload = 'Debugger.scriptParsedPayload'

    class HeapProfiler:
        addHeapSnapshotChunkPayload = 'HeapProfiler.addHeapSnapshotChunkPayload'
        heapStatsUpdatePayload = 'HeapProfiler.heapStatsUpdatePayload'
        lastSeenObjectIdPayload = 'HeapProfiler.lastSeenObjectIdPayload'
        reportHeapSnapshotProgressPayload = 'HeapProfiler.reportHeapSnapshotProgressPayload'
        resetProfilesPayload = 'HeapProfiler.resetProfilesPayload'

    class Profiler:
        consoleProfileFinishedPayload = 'Profiler.consoleProfileFinishedPayload'
        consoleProfileStartedPayload = 'Profiler.consoleProfileStartedPayload'

    class Runtime:
        bindingCalledPayload = 'Runtime.bindingCalledPayload'
        consoleAPICalledPayload = 'Runtime.consoleAPICalledPayload'
        exceptionRevokedPayload = 'Runtime.exceptionRevokedPayload'
        exceptionThrownPayload = 'Runtime.exceptionThrownPayload'
        executionContextCreatedPayload = 'Runtime.executionContextCreatedPayload'
        executionContextDestroyedPayload = 'Runtime.executionContextDestroyedPayload'
        executionContextsClearedPayload = 'Runtime.executionContextsClearedPayload'
        inspectRequestedPayload = 'Runtime.inspectRequestedPayload'


class CommandNames:
    class Accessibility:
        disable = 'Accessibility.disable'
        enable = 'Accessibility.enable'
        getPartialAXTree = 'Accessibility.getPartialAXTree'
        getFullAXTree = 'Accessibility.getFullAXTree'

    class Animation:
        disable = 'Animation.disable'
        enable = 'Animation.enable'
        getCurrentTime = 'Animation.getCurrentTime'
        getPlaybackRate = 'Animation.getPlaybackRate'
        releaseAnimations = 'Animation.releaseAnimations'
        resolveAnimation = 'Animation.resolveAnimation'
        seekAnimations = 'Animation.seekAnimations'
        setPaused = 'Animation.setPaused'
        setPlaybackRate = 'Animation.setPlaybackRate'
        setTiming = 'Animation.setTiming'

    class ApplicationCache:
        enable = 'ApplicationCache.enable'
        getApplicationCacheForFrame = 'ApplicationCache.getApplicationCacheForFrame'
        getFramesWithManifests = 'ApplicationCache.getFramesWithManifests'
        getManifestForFrame = 'ApplicationCache.getManifestForFrame'

    class Audits:
        getEncodedResponse = 'Audits.getEncodedResponse'

    class BackgroundService:
        startObserving = 'BackgroundService.startObserving'
        stopObserving = 'BackgroundService.stopObserving'
        setRecording = 'BackgroundService.setRecording'
        clearEvents = 'BackgroundService.clearEvents'

    class Browser:
        setPermission = 'Browser.setPermission'
        grantPermissions = 'Browser.grantPermissions'
        resetPermissions = 'Browser.resetPermissions'
        close = 'Browser.close'
        crash = 'Browser.crash'
        crashGpuProcess = 'Browser.crashGpuProcess'
        getVersion = 'Browser.getVersion'
        getBrowserCommandLine = 'Browser.getBrowserCommandLine'
        getHistograms = 'Browser.getHistograms'
        getHistogram = 'Browser.getHistogram'
        getWindowBounds = 'Browser.getWindowBounds'
        getWindowForTarget = 'Browser.getWindowForTarget'
        setWindowBounds = 'Browser.setWindowBounds'
        setDockTile = 'Browser.setDockTile'

    class CSS:
        addRule = 'CSS.addRule'
        collectClassNames = 'CSS.collectClassNames'
        createStyleSheet = 'CSS.createStyleSheet'
        disable = 'CSS.disable'
        enable = 'CSS.enable'
        forcePseudoState = 'CSS.forcePseudoState'
        getBackgroundColors = 'CSS.getBackgroundColors'
        getComputedStyleForNode = 'CSS.getComputedStyleForNode'
        getInlineStylesForNode = 'CSS.getInlineStylesForNode'
        getMatchedStylesForNode = 'CSS.getMatchedStylesForNode'
        getMediaQueries = 'CSS.getMediaQueries'
        getPlatformFontsForNode = 'CSS.getPlatformFontsForNode'
        getStyleSheetText = 'CSS.getStyleSheetText'
        setEffectivePropertyValueForNode = 'CSS.setEffectivePropertyValueForNode'
        setKeyframeKey = 'CSS.setKeyframeKey'
        setMediaText = 'CSS.setMediaText'
        setRuleSelector = 'CSS.setRuleSelector'
        setStyleSheetText = 'CSS.setStyleSheetText'
        setStyleTexts = 'CSS.setStyleTexts'
        startRuleUsageTracking = 'CSS.startRuleUsageTracking'
        stopRuleUsageTracking = 'CSS.stopRuleUsageTracking'
        takeCoverageDelta = 'CSS.takeCoverageDelta'

    class CacheStorage:
        deleteCache = 'CacheStorage.deleteCache'
        deleteEntry = 'CacheStorage.deleteEntry'
        requestCacheNames = 'CacheStorage.requestCacheNames'
        requestCachedResponse = 'CacheStorage.requestCachedResponse'
        requestEntries = 'CacheStorage.requestEntries'

    class Cast:
        enable = 'Cast.enable'
        disable = 'Cast.disable'
        setSinkToUse = 'Cast.setSinkToUse'
        startTabMirroring = 'Cast.startTabMirroring'
        stopCasting = 'Cast.stopCasting'

    class DOM:
        collectClassNamesFromSubtree = 'DOM.collectClassNamesFromSubtree'
        copyTo = 'DOM.copyTo'
        describeNode = 'DOM.describeNode'
        disable = 'DOM.disable'
        discardSearchResults = 'DOM.discardSearchResults'
        enable = 'DOM.enable'
        focus = 'DOM.focus'
        getAttributes = 'DOM.getAttributes'
        getBoxModel = 'DOM.getBoxModel'
        getContentQuads = 'DOM.getContentQuads'
        getDocument = 'DOM.getDocument'
        getFlattenedDocument = 'DOM.getFlattenedDocument'
        getNodeForLocation = 'DOM.getNodeForLocation'
        getOuterHTML = 'DOM.getOuterHTML'
        getRelayoutBoundary = 'DOM.getRelayoutBoundary'
        getSearchResults = 'DOM.getSearchResults'
        hideHighlight = 'DOM.hideHighlight'
        highlightNode = 'DOM.highlightNode'
        highlightRect = 'DOM.highlightRect'
        markUndoableState = 'DOM.markUndoableState'
        moveTo = 'DOM.moveTo'
        performSearch = 'DOM.performSearch'
        pushNodeByPathToFrontend = 'DOM.pushNodeByPathToFrontend'
        pushNodesByBackendIdsToFrontend = 'DOM.pushNodesByBackendIdsToFrontend'
        querySelector = 'DOM.querySelector'
        querySelectorAll = 'DOM.querySelectorAll'
        redo = 'DOM.redo'
        removeAttribute = 'DOM.removeAttribute'
        removeNode = 'DOM.removeNode'
        requestChildNodes = 'DOM.requestChildNodes'
        requestNode = 'DOM.requestNode'
        resolveNode = 'DOM.resolveNode'
        setAttributeValue = 'DOM.setAttributeValue'
        setAttributesAsText = 'DOM.setAttributesAsText'
        setFileInputFiles = 'DOM.setFileInputFiles'
        setNodeStackTracesEnabled = 'DOM.setNodeStackTracesEnabled'
        getNodeStackTraces = 'DOM.getNodeStackTraces'
        getFileInfo = 'DOM.getFileInfo'
        setInspectedNode = 'DOM.setInspectedNode'
        setNodeName = 'DOM.setNodeName'
        setNodeValue = 'DOM.setNodeValue'
        setOuterHTML = 'DOM.setOuterHTML'
        undo = 'DOM.undo'
        getFrameOwner = 'DOM.getFrameOwner'

    class DOMDebugger:
        getEventListeners = 'DOMDebugger.getEventListeners'
        removeDOMBreakpoint = 'DOMDebugger.removeDOMBreakpoint'
        removeEventListenerBreakpoint = 'DOMDebugger.removeEventListenerBreakpoint'
        removeInstrumentationBreakpoint = 'DOMDebugger.removeInstrumentationBreakpoint'
        removeXHRBreakpoint = 'DOMDebugger.removeXHRBreakpoint'
        setDOMBreakpoint = 'DOMDebugger.setDOMBreakpoint'
        setEventListenerBreakpoint = 'DOMDebugger.setEventListenerBreakpoint'
        setInstrumentationBreakpoint = 'DOMDebugger.setInstrumentationBreakpoint'
        setXHRBreakpoint = 'DOMDebugger.setXHRBreakpoint'

    class DOMSnapshot:
        disable = 'DOMSnapshot.disable'
        enable = 'DOMSnapshot.enable'
        getSnapshot = 'DOMSnapshot.getSnapshot'
        captureSnapshot = 'DOMSnapshot.captureSnapshot'

    class DOMStorage:
        clear = 'DOMStorage.clear'
        disable = 'DOMStorage.disable'
        enable = 'DOMStorage.enable'
        getDOMStorageItems = 'DOMStorage.getDOMStorageItems'
        removeDOMStorageItem = 'DOMStorage.removeDOMStorageItem'
        setDOMStorageItem = 'DOMStorage.setDOMStorageItem'

    class Database:
        disable = 'Database.disable'
        enable = 'Database.enable'
        executeSQL = 'Database.executeSQL'
        getDatabaseTableNames = 'Database.getDatabaseTableNames'

    class DeviceOrientation:
        clearDeviceOrientationOverride = 'DeviceOrientation.clearDeviceOrientationOverride'
        setDeviceOrientationOverride = 'DeviceOrientation.setDeviceOrientationOverride'

    class Emulation:
        canEmulate = 'Emulation.canEmulate'
        clearDeviceMetricsOverride = 'Emulation.clearDeviceMetricsOverride'
        clearGeolocationOverride = 'Emulation.clearGeolocationOverride'
        resetPageScaleFactor = 'Emulation.resetPageScaleFactor'
        setFocusEmulationEnabled = 'Emulation.setFocusEmulationEnabled'
        setCPUThrottlingRate = 'Emulation.setCPUThrottlingRate'
        setDefaultBackgroundColorOverride = 'Emulation.setDefaultBackgroundColorOverride'
        setDeviceMetricsOverride = 'Emulation.setDeviceMetricsOverride'
        setScrollbarsHidden = 'Emulation.setScrollbarsHidden'
        setDocumentCookieDisabled = 'Emulation.setDocumentCookieDisabled'
        setEmitTouchEventsForMouse = 'Emulation.setEmitTouchEventsForMouse'
        setEmulatedMedia = 'Emulation.setEmulatedMedia'
        setGeolocationOverride = 'Emulation.setGeolocationOverride'
        setNavigatorOverrides = 'Emulation.setNavigatorOverrides'
        setPageScaleFactor = 'Emulation.setPageScaleFactor'
        setScriptExecutionDisabled = 'Emulation.setScriptExecutionDisabled'
        setTouchEmulationEnabled = 'Emulation.setTouchEmulationEnabled'
        setVirtualTimePolicy = 'Emulation.setVirtualTimePolicy'
        setTimezoneOverride = 'Emulation.setTimezoneOverride'
        setVisibleSize = 'Emulation.setVisibleSize'
        setUserAgentOverride = 'Emulation.setUserAgentOverride'

    class HeadlessExperimental:
        beginFrame = 'HeadlessExperimental.beginFrame'
        disable = 'HeadlessExperimental.disable'
        enable = 'HeadlessExperimental.enable'

    class IO:
        close = 'IO.close'
        read = 'IO.read'
        resolveBlob = 'IO.resolveBlob'

    class IndexedDB:
        clearObjectStore = 'IndexedDB.clearObjectStore'
        deleteDatabase = 'IndexedDB.deleteDatabase'
        deleteObjectStoreEntries = 'IndexedDB.deleteObjectStoreEntries'
        disable = 'IndexedDB.disable'
        enable = 'IndexedDB.enable'
        requestData = 'IndexedDB.requestData'
        getMetadata = 'IndexedDB.getMetadata'
        requestDatabase = 'IndexedDB.requestDatabase'
        requestDatabaseNames = 'IndexedDB.requestDatabaseNames'

    class Input:
        dispatchKeyEvent = 'Input.dispatchKeyEvent'
        insertText = 'Input.insertText'
        dispatchMouseEvent = 'Input.dispatchMouseEvent'
        dispatchTouchEvent = 'Input.dispatchTouchEvent'
        emulateTouchFromMouseEvent = 'Input.emulateTouchFromMouseEvent'
        setIgnoreInputEvents = 'Input.setIgnoreInputEvents'
        synthesizePinchGesture = 'Input.synthesizePinchGesture'
        synthesizeScrollGesture = 'Input.synthesizeScrollGesture'
        synthesizeTapGesture = 'Input.synthesizeTapGesture'

    class Inspector:
        disable = 'Inspector.disable'
        enable = 'Inspector.enable'

    class LayerTree:
        compositingReasons = 'LayerTree.compositingReasons'
        disable = 'LayerTree.disable'
        enable = 'LayerTree.enable'
        loadSnapshot = 'LayerTree.loadSnapshot'
        makeSnapshot = 'LayerTree.makeSnapshot'
        profileSnapshot = 'LayerTree.profileSnapshot'
        releaseSnapshot = 'LayerTree.releaseSnapshot'
        replaySnapshot = 'LayerTree.replaySnapshot'
        snapshotCommandLog = 'LayerTree.snapshotCommandLog'

    class Log:
        clear = 'Log.clear'
        disable = 'Log.disable'
        enable = 'Log.enable'
        startViolationsReport = 'Log.startViolationsReport'
        stopViolationsReport = 'Log.stopViolationsReport'

    class Memory:
        getDOMCounters = 'Memory.getDOMCounters'
        prepareForLeakDetection = 'Memory.prepareForLeakDetection'
        forciblyPurgeJavaScriptMemory = 'Memory.forciblyPurgeJavaScriptMemory'
        setPressureNotificationsSuppressed = 'Memory.setPressureNotificationsSuppressed'
        simulatePressureNotification = 'Memory.simulatePressureNotification'
        startSampling = 'Memory.startSampling'
        stopSampling = 'Memory.stopSampling'
        getAllTimeSamplingProfile = 'Memory.getAllTimeSamplingProfile'
        getBrowserSamplingProfile = 'Memory.getBrowserSamplingProfile'
        getSamplingProfile = 'Memory.getSamplingProfile'

    class Network:
        canClearBrowserCache = 'Network.canClearBrowserCache'
        canClearBrowserCookies = 'Network.canClearBrowserCookies'
        canEmulateNetworkConditions = 'Network.canEmulateNetworkConditions'
        clearBrowserCache = 'Network.clearBrowserCache'
        clearBrowserCookies = 'Network.clearBrowserCookies'
        continueInterceptedRequest = 'Network.continueInterceptedRequest'
        deleteCookies = 'Network.deleteCookies'
        disable = 'Network.disable'
        emulateNetworkConditions = 'Network.emulateNetworkConditions'
        enable = 'Network.enable'
        getAllCookies = 'Network.getAllCookies'
        getCertificate = 'Network.getCertificate'
        getCookies = 'Network.getCookies'
        getResponseBody = 'Network.getResponseBody'
        getRequestPostData = 'Network.getRequestPostData'
        getResponseBodyForInterception = 'Network.getResponseBodyForInterception'
        takeResponseBodyForInterceptionAsStream = 'Network.takeResponseBodyForInterceptionAsStream'
        replayXHR = 'Network.replayXHR'
        searchInResponseBody = 'Network.searchInResponseBody'
        setBlockedURLs = 'Network.setBlockedURLs'
        setBypassServiceWorker = 'Network.setBypassServiceWorker'
        setCacheDisabled = 'Network.setCacheDisabled'
        setCookie = 'Network.setCookie'
        setCookies = 'Network.setCookies'
        setDataSizeLimitsForTest = 'Network.setDataSizeLimitsForTest'
        setExtraHTTPHeaders = 'Network.setExtraHTTPHeaders'
        setRequestInterception = 'Network.setRequestInterception'
        setUserAgentOverride = 'Network.setUserAgentOverride'

    class Overlay:
        disable = 'Overlay.disable'
        enable = 'Overlay.enable'
        getHighlightObjectForTest = 'Overlay.getHighlightObjectForTest'
        hideHighlight = 'Overlay.hideHighlight'
        highlightFrame = 'Overlay.highlightFrame'
        highlightNode = 'Overlay.highlightNode'
        highlightQuad = 'Overlay.highlightQuad'
        highlightRect = 'Overlay.highlightRect'
        setInspectMode = 'Overlay.setInspectMode'
        setShowAdHighlights = 'Overlay.setShowAdHighlights'
        setPausedInDebuggerMessage = 'Overlay.setPausedInDebuggerMessage'
        setShowDebugBorders = 'Overlay.setShowDebugBorders'
        setShowFPSCounter = 'Overlay.setShowFPSCounter'
        setShowPaintRects = 'Overlay.setShowPaintRects'
        setShowLayoutShiftRegions = 'Overlay.setShowLayoutShiftRegions'
        setShowScrollBottleneckRects = 'Overlay.setShowScrollBottleneckRects'
        setShowHitTestBorders = 'Overlay.setShowHitTestBorders'
        setShowViewportSizeOnResize = 'Overlay.setShowViewportSizeOnResize'

    class Page:
        addScriptToEvaluateOnLoad = 'Page.addScriptToEvaluateOnLoad'
        addScriptToEvaluateOnNewDocument = 'Page.addScriptToEvaluateOnNewDocument'
        bringToFront = 'Page.bringToFront'
        captureScreenshot = 'Page.captureScreenshot'
        captureSnapshot = 'Page.captureSnapshot'
        clearDeviceMetricsOverride = 'Page.clearDeviceMetricsOverride'
        clearDeviceOrientationOverride = 'Page.clearDeviceOrientationOverride'
        clearGeolocationOverride = 'Page.clearGeolocationOverride'
        createIsolatedWorld = 'Page.createIsolatedWorld'
        deleteCookie = 'Page.deleteCookie'
        disable = 'Page.disable'
        enable = 'Page.enable'
        getAppManifest = 'Page.getAppManifest'
        getInstallabilityErrors = 'Page.getInstallabilityErrors'
        getCookies = 'Page.getCookies'
        getFrameTree = 'Page.getFrameTree'
        getLayoutMetrics = 'Page.getLayoutMetrics'
        getNavigationHistory = 'Page.getNavigationHistory'
        resetNavigationHistory = 'Page.resetNavigationHistory'
        getResourceContent = 'Page.getResourceContent'
        getResourceTree = 'Page.getResourceTree'
        handleJavaScriptDialog = 'Page.handleJavaScriptDialog'
        navigate = 'Page.navigate'
        navigateToHistoryEntry = 'Page.navigateToHistoryEntry'
        printToPDF = 'Page.printToPDF'
        reload = 'Page.reload'
        removeScriptToEvaluateOnLoad = 'Page.removeScriptToEvaluateOnLoad'
        removeScriptToEvaluateOnNewDocument = 'Page.removeScriptToEvaluateOnNewDocument'
        screencastFrameAck = 'Page.screencastFrameAck'
        searchInResource = 'Page.searchInResource'
        setAdBlockingEnabled = 'Page.setAdBlockingEnabled'
        setBypassCSP = 'Page.setBypassCSP'
        setDeviceMetricsOverride = 'Page.setDeviceMetricsOverride'
        setDeviceOrientationOverride = 'Page.setDeviceOrientationOverride'
        setFontFamilies = 'Page.setFontFamilies'
        setFontSizes = 'Page.setFontSizes'
        setDocumentContent = 'Page.setDocumentContent'
        setDownloadBehavior = 'Page.setDownloadBehavior'
        setGeolocationOverride = 'Page.setGeolocationOverride'
        setLifecycleEventsEnabled = 'Page.setLifecycleEventsEnabled'
        setTouchEmulationEnabled = 'Page.setTouchEmulationEnabled'
        startScreencast = 'Page.startScreencast'
        stopLoading = 'Page.stopLoading'
        crash = 'Page.crash'
        close = 'Page.close'
        setWebLifecycleState = 'Page.setWebLifecycleState'
        stopScreencast = 'Page.stopScreencast'
        setProduceCompilationCache = 'Page.setProduceCompilationCache'
        addCompilationCache = 'Page.addCompilationCache'
        clearCompilationCache = 'Page.clearCompilationCache'
        generateTestReport = 'Page.generateTestReport'
        waitForDebugger = 'Page.waitForDebugger'
        setInterceptFileChooserDialog = 'Page.setInterceptFileChooserDialog'

    class Performance:
        disable = 'Performance.disable'
        enable = 'Performance.enable'
        setTimeDomain = 'Performance.setTimeDomain'
        getMetrics = 'Performance.getMetrics'

    class Security:
        disable = 'Security.disable'
        enable = 'Security.enable'
        setIgnoreCertificateErrors = 'Security.setIgnoreCertificateErrors'
        handleCertificateError = 'Security.handleCertificateError'
        setOverrideCertificateErrors = 'Security.setOverrideCertificateErrors'

    class ServiceWorker:
        deliverPushMessage = 'ServiceWorker.deliverPushMessage'
        disable = 'ServiceWorker.disable'
        dispatchSyncEvent = 'ServiceWorker.dispatchSyncEvent'
        dispatchPeriodicSyncEvent = 'ServiceWorker.dispatchPeriodicSyncEvent'
        enable = 'ServiceWorker.enable'
        inspectWorker = 'ServiceWorker.inspectWorker'
        setForceUpdateOnPageLoad = 'ServiceWorker.setForceUpdateOnPageLoad'
        skipWaiting = 'ServiceWorker.skipWaiting'
        startWorker = 'ServiceWorker.startWorker'
        stopAllWorkers = 'ServiceWorker.stopAllWorkers'
        stopWorker = 'ServiceWorker.stopWorker'
        unregister = 'ServiceWorker.unregister'
        updateRegistration = 'ServiceWorker.updateRegistration'

    class Storage:
        clearDataForOrigin = 'Storage.clearDataForOrigin'
        getCookies = 'Storage.getCookies'
        setCookies = 'Storage.setCookies'
        clearCookies = 'Storage.clearCookies'
        getUsageAndQuota = 'Storage.getUsageAndQuota'
        trackCacheStorageForOrigin = 'Storage.trackCacheStorageForOrigin'
        trackIndexedDBForOrigin = 'Storage.trackIndexedDBForOrigin'
        untrackCacheStorageForOrigin = 'Storage.untrackCacheStorageForOrigin'
        untrackIndexedDBForOrigin = 'Storage.untrackIndexedDBForOrigin'

    class SystemInfo:
        getInfo = 'SystemInfo.getInfo'
        getProcessInfo = 'SystemInfo.getProcessInfo'

    class Target:
        activateTarget = 'Target.activateTarget'
        attachToTarget = 'Target.attachToTarget'
        attachToBrowserTarget = 'Target.attachToBrowserTarget'
        closeTarget = 'Target.closeTarget'
        exposeDevToolsProtocol = 'Target.exposeDevToolsProtocol'
        createBrowserContext = 'Target.createBrowserContext'
        getBrowserContexts = 'Target.getBrowserContexts'
        createTarget = 'Target.createTarget'
        detachFromTarget = 'Target.detachFromTarget'
        disposeBrowserContext = 'Target.disposeBrowserContext'
        getTargetInfo = 'Target.getTargetInfo'
        getTargets = 'Target.getTargets'
        sendMessageToTarget = 'Target.sendMessageToTarget'
        setAutoAttach = 'Target.setAutoAttach'
        setDiscoverTargets = 'Target.setDiscoverTargets'
        setRemoteLocations = 'Target.setRemoteLocations'

    class Tethering:
        bind = 'Tethering.bind'
        unbind = 'Tethering.unbind'

    class Tracing:
        end = 'Tracing.end'
        getCategories = 'Tracing.getCategories'
        recordClockSyncMarker = 'Tracing.recordClockSyncMarker'
        requestMemoryDump = 'Tracing.requestMemoryDump'
        start = 'Tracing.start'

    class Fetch:
        disable = 'Fetch.disable'
        enable = 'Fetch.enable'
        failRequest = 'Fetch.failRequest'
        fulfillRequest = 'Fetch.fulfillRequest'
        continueRequest = 'Fetch.continueRequest'
        continueWithAuth = 'Fetch.continueWithAuth'
        getResponseBody = 'Fetch.getResponseBody'
        takeResponseBodyAsStream = 'Fetch.takeResponseBodyAsStream'

    class WebAudio:
        enable = 'WebAudio.enable'
        disable = 'WebAudio.disable'
        getRealtimeData = 'WebAudio.getRealtimeData'

    class WebAuthn:
        enable = 'WebAuthn.enable'
        disable = 'WebAuthn.disable'
        addVirtualAuthenticator = 'WebAuthn.addVirtualAuthenticator'
        removeVirtualAuthenticator = 'WebAuthn.removeVirtualAuthenticator'
        addCredential = 'WebAuthn.addCredential'
        getCredential = 'WebAuthn.getCredential'
        getCredentials = 'WebAuthn.getCredentials'
        removeCredential = 'WebAuthn.removeCredential'
        clearCredentials = 'WebAuthn.clearCredentials'
        setUserVerified = 'WebAuthn.setUserVerified'

    class Media:
        enable = 'Media.enable'
        disable = 'Media.disable'

    class Console:
        clearMessages = 'Console.clearMessages'
        disable = 'Console.disable'
        enable = 'Console.enable'

    class Debugger:
        continueToLocation = 'Debugger.continueToLocation'
        disable = 'Debugger.disable'
        enable = 'Debugger.enable'
        evaluateOnCallFrame = 'Debugger.evaluateOnCallFrame'
        getPossibleBreakpoints = 'Debugger.getPossibleBreakpoints'
        getScriptSource = 'Debugger.getScriptSource'
        getWasmBytecode = 'Debugger.getWasmBytecode'
        getStackTrace = 'Debugger.getStackTrace'
        pause = 'Debugger.pause'
        pauseOnAsyncCall = 'Debugger.pauseOnAsyncCall'
        removeBreakpoint = 'Debugger.removeBreakpoint'
        restartFrame = 'Debugger.restartFrame'
        resume = 'Debugger.resume'
        searchInContent = 'Debugger.searchInContent'
        setAsyncCallStackDepth = 'Debugger.setAsyncCallStackDepth'
        setBlackboxPatterns = 'Debugger.setBlackboxPatterns'
        setBlackboxedRanges = 'Debugger.setBlackboxedRanges'
        setBreakpoint = 'Debugger.setBreakpoint'
        setInstrumentationBreakpoint = 'Debugger.setInstrumentationBreakpoint'
        setBreakpointByUrl = 'Debugger.setBreakpointByUrl'
        setBreakpointOnFunctionCall = 'Debugger.setBreakpointOnFunctionCall'
        setBreakpointsActive = 'Debugger.setBreakpointsActive'
        setPauseOnExceptions = 'Debugger.setPauseOnExceptions'
        setReturnValue = 'Debugger.setReturnValue'
        setScriptSource = 'Debugger.setScriptSource'
        setSkipAllPauses = 'Debugger.setSkipAllPauses'
        setVariableValue = 'Debugger.setVariableValue'
        stepInto = 'Debugger.stepInto'
        stepOut = 'Debugger.stepOut'
        stepOver = 'Debugger.stepOver'

    class HeapProfiler:
        addInspectedHeapObject = 'HeapProfiler.addInspectedHeapObject'
        collectGarbage = 'HeapProfiler.collectGarbage'
        disable = 'HeapProfiler.disable'
        enable = 'HeapProfiler.enable'
        getHeapObjectId = 'HeapProfiler.getHeapObjectId'
        getObjectByHeapObjectId = 'HeapProfiler.getObjectByHeapObjectId'
        getSamplingProfile = 'HeapProfiler.getSamplingProfile'
        startSampling = 'HeapProfiler.startSampling'
        startTrackingHeapObjects = 'HeapProfiler.startTrackingHeapObjects'
        stopSampling = 'HeapProfiler.stopSampling'
        stopTrackingHeapObjects = 'HeapProfiler.stopTrackingHeapObjects'
        takeHeapSnapshot = 'HeapProfiler.takeHeapSnapshot'

    class Profiler:
        disable = 'Profiler.disable'
        enable = 'Profiler.enable'
        getBestEffortCoverage = 'Profiler.getBestEffortCoverage'
        setSamplingInterval = 'Profiler.setSamplingInterval'
        start = 'Profiler.start'
        startPreciseCoverage = 'Profiler.startPreciseCoverage'
        startTypeProfile = 'Profiler.startTypeProfile'
        stop = 'Profiler.stop'
        stopPreciseCoverage = 'Profiler.stopPreciseCoverage'
        stopTypeProfile = 'Profiler.stopTypeProfile'
        takePreciseCoverage = 'Profiler.takePreciseCoverage'
        takeTypeProfile = 'Profiler.takeTypeProfile'
        enableRuntimeCallStats = 'Profiler.enableRuntimeCallStats'
        disableRuntimeCallStats = 'Profiler.disableRuntimeCallStats'
        getRuntimeCallStats = 'Profiler.getRuntimeCallStats'

    class Runtime:
        awaitPromise = 'Runtime.awaitPromise'
        callFunctionOn = 'Runtime.callFunctionOn'
        compileScript = 'Runtime.compileScript'
        disable = 'Runtime.disable'
        discardConsoleEntries = 'Runtime.discardConsoleEntries'
        enable = 'Runtime.enable'
        evaluate = 'Runtime.evaluate'
        getIsolateId = 'Runtime.getIsolateId'
        getHeapUsage = 'Runtime.getHeapUsage'
        getProperties = 'Runtime.getProperties'
        globalLexicalScopeNames = 'Runtime.globalLexicalScopeNames'
        queryObjects = 'Runtime.queryObjects'
        releaseObject = 'Runtime.releaseObject'
        releaseObjectGroup = 'Runtime.releaseObjectGroup'
        runIfWaitingForDebugger = 'Runtime.runIfWaitingForDebugger'
        runScript = 'Runtime.runScript'
        setAsyncCallStackDepth = 'Runtime.setAsyncCallStackDepth'
        setCustomObjectFormatterEnabled = 'Runtime.setCustomObjectFormatterEnabled'
        setMaxCallStackSizeToCapture = 'Runtime.setMaxCallStackSizeToCapture'
        terminateExecution = 'Runtime.terminateExecution'
        addBinding = 'Runtime.addBinding'
        removeBinding = 'Runtime.removeBinding'

    class Schema:
        getDomains = 'Schema.getDomains'
